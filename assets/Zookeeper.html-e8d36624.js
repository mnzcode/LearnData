import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,d as s,b as l,e as a}from"./app-109af9bf.js";const i={},u=a('<h1 id="zookeeper" tabindex="-1"><a class="header-anchor" href="#zookeeper" aria-hidden="true">#</a> Zookeeper</h1><h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h2><h3 id="框架特征" tabindex="-1"><a class="header-anchor" href="#框架特征" aria-hidden="true">#</a> 框架特征</h3><p>Zookeeper 是 Apache Hadoop 项目子项目，为分布式框架提供协调服务，是一个树形目录服务</p><p>Zookeeper 是基于观察者模式设计的分布式服务管理框架，负责存储和管理共享数据，接受观察者的注册监控，一旦这些数据的状态发生变化，Zookeeper 会通知观察者</p><ul><li>Zookeeper 是一个领导者（Leader），多个跟随者（Follower）组成的集群</li><li>集群中只要有半数以上节点存活就能正常服务，所以 Zookeeper 适合部署奇数台服务器</li><li><strong>全局数据一致</strong>，每个 Server 保存一份相同的数据副本，Client 无论连接到哪个 Server，数据都是一致</li><li>更新的请求顺序执行，来自同一个 Client 的请求按其发送顺序依次执行</li><li><strong>数据更新原子性</strong>，一次数据更新要么成功，要么失败</li><li>实时性，在一定的时间范围内，Client 能读到最新数据</li><li>心跳检测，会定时向各个服务提供者发送一个请求（实际上建立的是一个 Socket 长连接）</li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-框架结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',7),r={href:"https://www.bilibili.com/video/BV1to4y1C7gw",target:"_blank",rel:"noopener noreferrer"},d=a(`<hr><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><p>Zookeeper 提供的主要功能包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡、分布式锁等</p><ul><li><p>在分布式环境中，经常对应用/服务进行统一命名，便于识别，例如域名相对于 IP 地址更容易被接收</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/service/www.baidu.com 		<span class="token comment"># 节点路径</span>
<span class="token number">192.168</span>.1.1  <span class="token number">192.168</span>.1.2	<span class="token comment"># 节点值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在节点中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求，可以实现负载均衡</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">192.168</span>.1.1  <span class="token number">10</span>	<span class="token comment"># 次数</span>
<span class="token number">192.168</span>.1.1  <span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置文件同步可以通过 Zookeeper 实现，将配置信息写入某个 ZNode，其他客户端监视该节点，当节点数据被修改，通知各个客户端服务器</p></li><li><p>集群环境中，需要实时掌握每个集群节点的状态，可以将这些信息放入 ZNode，通过监控通知的机制实现</p></li><li><p>实现客户端实时观察服务器上下线的变化，通过心跳检测实现</p></li></ul><hr><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h2><h3 id="安装搭建" tabindex="-1"><a class="header-anchor" href="#安装搭建" aria-hidden="true">#</a> 安装搭建</h3><p>安装步骤：</p><ul><li><p>安装 JDK</p></li><li><p>拷贝 apache-zookeeper-3.5.7-bin.tar.gz 安装包到 Linux 系统下，并解压到指定目录</p></li><li><p>conf 目录下的配置文件重命名：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mv zoo_sample.cfg zoo.cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改配置文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> zoo.cfg
<span class="token comment"># 修改内容</span>
<span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/home/seazean/SoftWare/zookeeper-3.5.7/zkData 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在对应目录创建 zkData 文件夹：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> zkData
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>Zookeeper 中的配置文件 zoo.cfg 中参数含义解读：</p><ul><li>tickTime = 2000：通信心跳时间，<strong>Zookeeper 服务器与客户端心跳</strong>时间，单位毫秒</li><li>initLimit = 10：Leader 与 Follower 初始通信时限，初始连接时能容忍的最多心跳次数</li><li>syncLimit = 5：Leader 与 Follower 同步通信时限，LF 通信时间超过 <code>syncLimit * tickTime</code>，Leader 认为 Follwer 下线</li><li>dataDir：保存 Zookeeper 中的数据目录，默认是 tmp目录，容易被 Linux 系统定期删除，所以建议修改</li><li>clientPort = 2181：客户端连接端口，通常不做修改</li></ul><hr><h3 id="操作命令" tabindex="-1"><a class="header-anchor" href="#操作命令" aria-hidden="true">#</a> 操作命令</h3><h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h4><p>Linux 命令：</p><ul><li><p>启动 ZooKeeper 服务：<code>./zkServer.sh start</code></p></li><li><p>查看 ZooKeeper 服务：<code>./zkServer.sh status</code></p></li><li><p>停止 ZooKeeper 服务：<code>./zkServer.sh stop</code></p></li><li><p>重启 ZooKeeper 服务：<code>./zkServer.sh restart </code></p></li><li><p>查看进程是否启动：<code>jps</code></p></li></ul><hr><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h4><p>Linux 命令：</p><ul><li><p>连接 ZooKeeper 服务端：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./zkCli.sh					<span class="token comment"># 直接启动</span>
./zkCli.sh –server ip:port	<span class="token comment"># 指定 host 启动</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>客户端命令：</p><ul><li><p>基础操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>quit						<span class="token comment"># 停止连接</span>
<span class="token builtin class-name">help</span>						<span class="token comment"># 查看命令帮助</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建命令：<strong><code>/</code> 代表根目录</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>create /path value			<span class="token comment"># 创建节点，value 可选</span>
create <span class="token parameter variable">-e</span> /path value		<span class="token comment"># 创建临时节点</span>
create <span class="token parameter variable">-s</span> /path value		<span class="token comment"># 创建顺序节点</span>
create <span class="token parameter variable">-es</span> /path value  	<span class="token comment"># 创建临时顺序节点，比如node10000012 删除12后也会继续从13开始，只会增加</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> /path					<span class="token comment"># 显示指定目录下子节点</span>
<span class="token function">ls</span> –s /path					<span class="token comment"># 查询节点详细信息</span>
<span class="token function">ls</span> –w /path					<span class="token comment"># 监听子节点数量的变化</span>
<span class="token function">stat</span> /path					<span class="token comment"># 查看节点状态</span>
get –s /path				<span class="token comment"># 查询节点详细信息</span>
get –w /path				<span class="token comment"># 监听节点数据的变化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 属性，分为当前节点的属性和子节点属性</span>
czxid: 节点被创建的事务ID, 是ZooKeeper中所有修改总的次序，每次修改都有唯一的 zxid，谁小谁先发生
ctime: 被创建的时间戳
mzxid: 最后一次被更新的事务ID 
mtime: 最后修改的时间戳
pzxid: 子节点列表最后一次被更新的事务ID
cversion: 子节点的变化号，修改次数
dataversion: 节点的数据变化号，数据的变化次数
aclversion: 节点的访问控制列表变化号
ephemeralOwner: 用于临时节点，代表节点拥有者的 session id，如果为持久节点则为0 
dataLength: 节点存储的数据的长度 
numChildren: 当前节点的子节点数量
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>delete /path				<span class="token comment"># 删除节点</span>
deleteall /path				<span class="token comment"># 递归删除节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><p>ZooKeeper 是一个树形目录服务，类似 Unix 的文件系统，每一个节点都被称为 ZNode，每个 ZNode 默认存储 1MB 的数据，节点上会保存数据和节点信息，每个 ZNode 都可以通过其路径唯一标识</p><p>节点可以分为四大类：</p><ul><li>PERSISTENT：持久化节点</li><li>EPHEMERAL：临时节点，客户端和服务器端<strong>断开连接</strong>后，创建的节点删除</li><li>PERSISTENT_SEQUENTIAL：持久化顺序节点，创建 znode 时设置顺序标识，节点名称后会附加一个值，<strong>顺序号是一个单调递增的计数器</strong>，由父节点维护</li><li>EPHEMERAL_SEQUENTIAL：临时顺序节点</li></ul><p>注意：在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-节点树形结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><p>添加 Maven 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数一：连接地址</span>
    <span class="token comment">// 参数二：会话超时时间</span>
    <span class="token comment">// 参数三：监听器</span>
    <span class="token class-name">ZooKeeper</span> zkClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.3.128:2181&quot;</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听处理函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="集群介绍" tabindex="-1"><a class="header-anchor" href="#集群介绍" aria-hidden="true">#</a> 集群介绍</h2><h3 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念" aria-hidden="true">#</a> 相关概念</h3><p>Zookeepe 集群三个角色：</p><ul><li><p>Leader 领导者：处理客户端<strong>事务请求</strong>，负责集群内部各服务器的调度</p></li><li><p>Follower 跟随者：处理客户端非事务请求，转发事务请求给 Leader 服务器，参与 Leader 选举投票</p></li><li><p>Observer 观察者：观察集群的最新状态的变化，并将这些状态进行同步；处理非事务性请求，事务性请求会转发给 Leader 服务器进行处理；不会参与任何形式的投票。只提供非事务性的服务，通常用于在不影响集群事务处理能力的前提下，提升集群的非事务处理能力（提高集群读的能力，但是也降低了集群选主的复杂程度）</p></li></ul><p>相关属性：</p><ul><li><p>SID：服务器 ID，用来唯一标识一台集群中的机器，和 myid 一致</p></li><li><p>ZXID：事务 ID，用来标识一次服务器状态的变更，在某一时刻集群中每台机器的 ZXID 值不一定完全一致，这和 ZooKeeper 服务器对于客户端更新请求的处理逻辑有关</p></li><li><p>Epoch：每个 Leader 任期的代号，同一轮选举投票过程中的该值是相同的，投完一次票就增加</p></li></ul><p>选举机制：半数机制，超过半数的投票就通过</p><ul><li><p>第一次启动选举规则：投票过半数时，服务器 ID 大的胜出</p></li><li><p>第二次启动选举规则：</p><ul><li>EPOCH 大的直接胜出</li><li>EPOCH 相同，事务 ID 大的胜出（事务 ID 越大，数据越新）</li><li>事务 ID 相同，服务器 ID 大的胜出</li></ul></li></ul><hr><h3 id="初次选举" tabindex="-1"><a class="header-anchor" href="#初次选举" aria-hidden="true">#</a> 初次选举</h3><p>选举过程：</p><ul><li>服务器 1 启动，发起一次选举，服务器 1 投自己一票，票数不超过半数，选举无法完成，服务器 1 状态保持为 LOOKING</li><li>服务器 2 启动，再发起一次选举，服务器 1 和 2 分别投自己一票并<strong>交换选票信息</strong>，此时服务器 1 会发现服务器 2 的 SID 比自己投票推举的（服务器 1）大，更改选票为推举服务器 2。投票结果为服务器 1 票数 0 票，服务器 2 票数 2 票，票数不超过半数，选举无法完成，服务器 1、2 状态保持 LOOKING</li><li>服务器 3 启动，发起一次选举，此时服务器 1 和 2 都会更改选票为服务器 3，投票结果为服务器 3 票数 3 票，此时服务器 3 的票数已经超过半数，服务器 3 当选 Leader，服务器 1、2 更改状态为 FOLLOWING，服务器 3 更改状态为 LEADING</li><li>服务器 4 启动，发起一次选举，此时服务器 1、2、3 已经不是 LOOKING 状态，不会更改选票信息，交换选票信息结果后服务器 3 为 3 票，服务器 4 为 1 票，此时服务器 4 更改选票信息为服务器 3，并更改状态为 FOLLOWING</li><li>服务器 5 启动，同 4 一样</li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-初次选举机制.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="再次选举" tabindex="-1"><a class="header-anchor" href="#再次选举" aria-hidden="true">#</a> 再次选举</h3><p>ZooKeeper 集群中的一台服务器出现以下情况之一时，就会开始进入 Leader 选举：</p><ul><li>服务器初始化启动</li><li>服务器运行期间无法和 Leader 保持连接</li></ul><p>当一台服务器进入 Leader 选举流程时，当前集群可能会处于以下两种状态：</p><ul><li><p>集群中本来就已经存在一个 Leader，服务器试图去选举 Leader 时会被告知当前服务器的 Leader 信息，对于该服务器来说，只需要和 Leader 服务器建立连接，并进行状态同步即可</p></li><li><p>集群中确实不存在 Leader，假设服务器 3 和 5 出现故障，开始进行 Leader 选举，SID 为 1、2、4 的机器投票情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>EPOCH，ZXID，SID<span class="token punctuation">)</span>: <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">8</span>, <span class="token number">1</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">8</span>, <span class="token number">2</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">7</span>, <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据选举规则，服务器 2 胜出</p></li></ul><hr><h3 id="数据写入" tabindex="-1"><a class="header-anchor" href="#数据写入" aria-hidden="true">#</a> 数据写入</h3><p>写操作就是事务请求，写入请求直接发送给 Leader 节点：Leader 会先将数据写入自身，同时通知其他 Follower 写入，<strong>当集群中有半数以上节点写入完成</strong>，Leader 节点就会响应客户端数据写入完成</p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-写入请求Leader.png" style="zoom:50%;"><p>写入请求直接发送给 Follower 节点：Follower 没有写入权限，会将写请求转发给 Leader，Leader 将数据写入自身，通知其他 Follower 写入，当集群中有半数以上节点写入完成，Leader 会通知 Follower 写入完成，<strong>由 Follower 响应客户端数据写入完成</strong></p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-写入请求Follower.png" style="zoom:50%;"><hr><h2 id="底层协议" tabindex="-1"><a class="header-anchor" href="#底层协议" aria-hidden="true">#</a> 底层协议</h2><h3 id="paxos" tabindex="-1"><a class="header-anchor" href="#paxos" aria-hidden="true">#</a> Paxos</h3><p>Paxos 算法：基于消息传递且具有高度容错特性的一致性算法</p><p>优点：快速正确的在一个分布式系统中对某个数据值达成一致，并且保证不论发生任何异常，都不会破坏整个系统的一致性</p><p>缺陷：在网络复杂的情况下，可能很久无法收敛，甚至陷入活锁的情况</p><hr><h3 id="zab" tabindex="-1"><a class="header-anchor" href="#zab" aria-hidden="true">#</a> ZAB</h3><h4 id="算法介绍" tabindex="-1"><a class="header-anchor" href="#算法介绍" aria-hidden="true">#</a> 算法介绍</h4><p>ZAB 协议借鉴了 Paxos 算法，是为 Zookeeper 设计的支持崩溃恢复的原子广播协议，基于该协议 Zookeeper 设计为只有一台客户端（Leader）负责处理外部的写事务请求，然后 Leader 将数据同步到其他 Follower 节点</p><p>Zab 协议包括两种基本的模式：消息广播、崩溃恢复</p><hr><h4 id="消息广播" tabindex="-1"><a class="header-anchor" href="#消息广播" aria-hidden="true">#</a> 消息广播</h4><p>ZAB 协议针对事务请求的处理过程类似于一个<strong>两阶段提交</strong>过程：广播事务阶段、广播提交操作</p><ul><li>客户端发起写操作请求，Leader 服务器将请求转化为事务 Proposal 提案，同时为 Proposal 分配一个全局的 ID，即 ZXID</li><li>Leader 服务器为每个 Follower 分配一个单独的队列，将广播的 Proposal <strong>依次放到队列</strong>中去，根据 FIFO 策略进行消息发送</li><li>Follower 接收到 Proposal 后，将其以事务日志的方式写入本地磁盘中，写入成功后向 Leader 反馈一个 ACK 响应消息</li><li>Leader 接收到超过半数以上 Follower 的 ACK 响应消息后，即认为消息发送成功，可以发送 Commit 消息</li><li>Leader 向所有 Follower 广播 commit 消息，同时自身也会完成事务提交，Follower 接收到 Commit 后，将上一条事务提交</li></ul><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-消息广播.png" style="zoom:67%;"><p>两阶段提交模型可能因为 Leader 宕机带来数据不一致：</p><ul><li>Leader 发起一个事务 Proposal 后就宕机，Follower 都没有 Proposal</li><li>Leader 收到半数 ACK 宕机，没来得及向 Follower 发送 Commit</li></ul><hr><h4 id="崩溃恢复" tabindex="-1"><a class="header-anchor" href="#崩溃恢复" aria-hidden="true">#</a> 崩溃恢复</h4><p>Leader 服务器出现崩溃或者由于网络原因导致 Leader 服务器失去了与<strong>过半 Follower的联系</strong>，那么就会进入崩溃恢复模式，崩溃恢复主要包括两部分：Leader 选举和数据恢复</p><p>Zab 协议崩溃恢复要求满足以下两个要求：</p><ul><li>已经被 Leader 提交的提案 Proposal，必须最终被所有的 Follower 服务器正确提交</li><li>丢弃已经被 Leader 提出的，但是没有被提交的 Proposal</li></ul><p>Zab 协议需要保证选举出来的 Leader 需要满足以下条件：</p><ul><li>新选举的 Leader 不能包含未提交的 Proposal，即新 Leader 必须都是已经提交了 Proposal 的 Follower 节点</li><li>新选举的 Leader 节点含有<strong>最大的 ZXID</strong>，可以避免 Leader 服务器检查 Proposal 的提交和丢弃工作</li></ul><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-Leader选举.png" style="zoom:67%;"><p>数据恢复阶段：</p><ul><li>完成 Leader 选举后，在正式开始工作之前（接收事务请求提出新的 Proposal），Leader 服务器会首先确认事务日志中的所有 Proposal 是否已经被集群中过半的服务器 Commit</li><li>Leader 服务器需要确保所有的 Follower 服务器能够接收到每一条事务的 Proposal，并且能将所有已经提交的事务 Proposal 应用到内存数据中，所以只有当 Follower 将所有尚未同步的事务 Proposal 都<strong>从 Leader 服务器上同步</strong>，并且应用到内存数据后，Leader 才会把该 Follower 加入到真正可用的 Follower 列表中</li></ul><hr><h4 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h4><p>Zab 的事务编号 zxid 设计：</p><ul><li>zxid 是一个 64 位的数字，低 32 位是一个简单的单增计数器，针对客户端每一个事务请求，Leader 在产生新的 Proposal 事务时，都会对该计数器加 1，而高 32 位则代表了 Leader 周期的 epoch 编号</li><li>epoch 为当前集群所处的代或者周期，每次 Leader 变更后都会在 epoch 的基础上加 1，Follower 只服从 epoch 最高的 Leader 命令，所以旧的 Leader 崩溃恢复之后，其他 Follower 就不会继续追随</li><li>每次选举产生一个新的 Leader，就会从新 Leader 服务器上取出本地事务日志中最大编号 Proposal 的 zxid，从 zxid 中解析得到对应的 epoch 编号，然后再对其加 1 后作为新的 epoch 值，并将低 32 位数字归零，由 0 开始重新生成 zxid</li></ul><p>Zab 协议通过 epoch 编号来区分 Leader 变化周期，能够有效避免不同的 Leader 错误的使用了相同的 zxid 编号提出了不一样的 Proposal 的异常情况</p><p>Zab 数据同步过程：<strong>数据同步阶段要以 Leader 服务器为准</strong></p><ul><li>一个包含了上个 Leader 周期中尚未提交过的事务 Proposal 的服务器启动时，这台机器加入集群中会以 Follower 角色连上 Leader</li><li>Leader 会根据自己服务器上最后提交的 Proposal 和 Follower 服务器的 Proposal 进行比对，让 Follower 进行一个<strong>回退或者前进操作</strong>，到一个已经被集群中过半机器 Commit 的最新 Proposal（源码解析部分详解）</li></ul><hr><h3 id="cap" tabindex="-1"><a class="header-anchor" href="#cap" aria-hidden="true">#</a> CAP</h3><p>CAP 理论指的是在一个分布式系统中，Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性）不能同时成立，ZooKeeper 保证的是 CP</p><ul><li>ZooKeeper 不能保证每次服务请求的可用性，在极端环境下可能会丢弃一些请求，消费者程序需要重新请求才能获得结果</li><li>进行 Leader 选举时<strong>集群都是不可用</strong></li></ul><p>CAP 三个基本需求，因为 P 是必须的，因此分布式系统选择就在 CP 或者 AP 中：</p><ul><li>一致性：指数据在多个副本之间是否能够保持数据一致的特性，当一个系统在数据一致的状态下执行更新操作后，也能保证系统的数据仍然处于一致的状态</li><li>可用性：指系统提供的服务必须一直处于可用的状态，即使集群中一部分节点故障，对于用户的每一个操作请求总是能够在有限的时间内返回结果</li><li>分区容错性：分布式系统在遇到任何网络分区故障时，仍然能够保证对外提供服务，不会宕机，除非是整个网络环境都发生了故障</li></ul><hr><h2 id="监听机制" tabindex="-1"><a class="header-anchor" href="#监听机制" aria-hidden="true">#</a> 监听机制</h2><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><p>ZooKeeper 中引入了 Watcher 机制来实现了发布/订阅功能，客户端注册监听目录节点，在特定事件触发时，ZooKeeper 会通知所有关注该事件的客户端，保证 ZooKeeper 保存的任何的数据的任何改变都能快速的响应到监听应用程序</p><p>监听命令：<strong>只能生效一次</strong>，接收一次通知，再次监听需要重新注册</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> –w /path					<span class="token comment"># 监听【子节点数量】的变化</span>
get –w /path				<span class="token comment"># 监听【节点数据】的变化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>工作流程：</p><ul><li>在主线程中创建 Zookeeper 客户端，这时就会创建<strong>两个线程</strong>，一个负责网络连接通信（connet），一个负责监听（listener）</li><li>通过 connect 线程将注册的监听事件发送给 Zookeeper</li><li>在 Zookeeper 的注册监听器列表中将注册的<strong>监听事件添加到列表</strong>中</li><li>Zookeeper 监听到有数据或路径变化，将消息发送给 listener 线程</li><li>listener 线程内部调用 process() 方法</li></ul><p>Curator 框架引入了 Cache 来实现对 ZooKeeper 服务端事件的监听，三种 Watcher：</p><ul><li>NodeCache：只是监听某一个特定的节点</li><li>PathChildrenCache：监控一个 ZNode 的子节点</li><li>TreeCache：可以监控整个树上的所有节点，类似于 PathChildrenCache 和 NodeCache 的组合</li></ul><hr><h3 id="监听案例" tabindex="-1"><a class="header-anchor" href="#监听案例" aria-hidden="true">#</a> 监听案例</h3><h4 id="整体架构" tabindex="-1"><a class="header-anchor" href="#整体架构" aria-hidden="true">#</a> 整体架构</h4><p>客户端实时监听服务器动态上下线</p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-监听服务器状态.png" style="zoom:50%;"><hr><h4 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1" aria-hidden="true">#</a> 代码实现</h4><p>客户端：先启动客户端进行监听</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributeClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> connectString <span class="token operator">=</span> <span class="token string">&quot;192.168.3.128:2181&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> sessionTimeout <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ZooKeeper</span> zk<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DistributeClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistributeClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 1 获取zk连接</span>
        client<span class="token punctuation">.</span><span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2 监听/servers下面子节点的增加和删除</span>
        client<span class="token punctuation">.</span><span class="token function">getServerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3 业务逻辑</span>
        client<span class="token punctuation">.</span><span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getServerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">KeeperException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> servers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取所有子节点，true 代表触发监听操作</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> zk<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">&quot;/servers&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取子节点的数据</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> zk<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&quot;/servers/&quot;</span> <span class="token operator">+</span> child<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            servers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>connectString<span class="token punctuation">,</span> sessionTimeout<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">getServerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端：启动时需要 Program arguments</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributeServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> connectString <span class="token operator">=</span> <span class="token string">&quot;192.168.3.128:2181&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> sessionTimeout <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ZooKeeper</span> zk<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DistributeServer</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistributeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 1 获取 zookeeper 连接</span>
        server<span class="token punctuation">.</span><span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2  注册服务器到 zk 集群，注意参数</span>
        server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3 启动业务逻辑</span>
        server<span class="token punctuation">.</span><span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> hostname<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">KeeperException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// OPEN_ACL_UNSAFE: ACL 开放</span>
        <span class="token comment">// EPHEMERAL_SEQUENTIAL: 临时顺序节点</span>
        <span class="token class-name">String</span> create <span class="token operator">=</span> zk<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;/servers/&quot;</span> <span class="token operator">+</span> hostname<span class="token punctuation">,</span> hostname<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  <span class="token class-name">ZooDefs<span class="token punctuation">.</span>Ids</span><span class="token punctuation">.</span><span class="token constant">OPEN_ACL_UNSAFE</span><span class="token punctuation">,</span> <span class="token class-name">CreateMode</span><span class="token punctuation">.</span><span class="token constant">EPHEMERAL_SEQUENTIAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostname <span class="token operator">+</span> <span class="token string">&quot; is online&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>connectString<span class="token punctuation">,</span> sessionTimeout<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h2><h3 id="实现原理-1" tabindex="-1"><a class="header-anchor" href="#实现原理-1" aria-hidden="true">#</a> 实现原理</h3><p>分布式锁可以实现在分布式系统中多个进程有序的访问该临界资源，多个进程之间不会相互干扰</p><p>核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点</p><ol><li><p>客户端获取锁时，在 /locks 节点下创建<strong>临时顺序</strong>节点</p><ul><li>使用临时节点是为了防止当服务器或客户端宕机以后节点无法删除（持久节点），导致锁无法释放</li><li>使用顺序节点是为了系统自动编号排序，找最小的节点，防止客户端饥饿现象，保证公平</li></ul></li><li><p>获取 /locks 目录的所有子节点，判断自己的<strong>子节点序号是否最小</strong>，成立则客户端获取到锁，使用完锁后将该节点删除</p></li><li><p>反之客户端需要找到比自己小的节点，<strong>对其注册事件监听器，监听删除事件</strong></p></li><li><p>客户端的 Watcher 收到删除事件通知，就会重新判断当前节点是否是子节点中序号最小，如果是则获取到了锁， 如果不是则重复以上步骤继续获取到比自己小的一个节点并注册监听</p></li></ol><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-分布式锁原理.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="curator" tabindex="-1"><a class="header-anchor" href="#curator" aria-hidden="true">#</a> Curator</h3><p>Curator 实现分布式锁 API，在 Curator 中有五种锁方案：</p><ul><li><p>InterProcessSemaphoreMutex：分布式排它锁（非可重入锁）</p></li><li><p>InterProcessMutex：分布式可重入排它锁</p></li><li><p>InterProcessReadWriteLock：分布式读写锁</p></li><li><p>InterProcessMultiLock：将多个锁作为单个实体管理的容器</p></li><li><p>InterProcessSemaphoreV2：共享信号量</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CuratorLock</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CuratorFramework</span> <span class="token function">getCuratorFramework</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 重试策略对象</span>
        <span class="token class-name">ExponentialBackoffRetry</span> policy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 构建客户端</span>
        <span class="token class-name">CuratorFramework</span> client <span class="token operator">=</span> <span class="token class-name">CuratorFrameworkFactory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.3.128:2181&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">connectionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>	<span class="token comment">// 连接超时时间</span>
                <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span>	<span class="token comment">// 会话超时时间 单位ms</span>
                <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span>		<span class="token comment">// 重试策略</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动客户端</span>
        client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;zookeeper 启动成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> client<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建分布式锁1</span>
        <span class="token class-name">InterProcessMutex</span> lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span><span class="token function">getCuratorFramework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/locks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建分布式锁2</span>
        <span class="token class-name">InterProcessMutex</span> lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span><span class="token function">getCuratorFramework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/locks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lock1<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程1 获取到锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                lock1<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程1 释放锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lock2<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程2 获取到锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                lock2<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程2 释放锁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>curator-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析" aria-hidden="true">#</a> 源码解析</h2><h3 id="服务端-1" tabindex="-1"><a class="header-anchor" href="#服务端-1" aria-hidden="true">#</a> 服务端</h3><p>服务端程序的入口 QuorumPeerMain</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">QuorumPeerMain</span> main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPeerMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    main<span class="token punctuation">.</span><span class="token function">initializeAndRun</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>initializeAndRun 的工作：</p><ul><li><p>解析启动参数</p></li><li><p>提交周期任务，定时删除过期的快照</p></li><li><p>初始化通信模型，默认是 NIO 通信</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// QuorumPeerMain#runFromConfig</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runFromConfig</span><span class="token punctuation">(</span><span class="token class-name">QuorumPeerConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通信信组件初始化，默认是 NIO 通信</span>
    <span class="token class-name">ServerCnxnFactory</span> cnxnFactory <span class="token operator">=</span> <span class="token class-name">ServerCnxnFactory</span><span class="token punctuation">.</span><span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化NIO 服务端socket，绑定2181 端口，可以接收客户端请求</span>
    cnxnFactory<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getMaxClientCnxns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动 zk</span>
    quorumPeer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动 zookeeper</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// QuorumPeer#start</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>myid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;My id &quot;</span> <span class="token operator">+</span> myid <span class="token operator">+</span> <span class="token string">&quot; not in the peer list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 冷启动数据恢复，将快照中数据恢复到 DataTree</span>
    <span class="token function">loadDataBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动通信工厂实例对象</span>
    <span class="token function">startServerCnxnFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        adminServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AdminServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Problem starting AdminServer&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 准备选举环境</span>
    <span class="token function">startLeaderElection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行选举</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="选举机制" tabindex="-1"><a class="header-anchor" href="#选举机制" aria-hidden="true">#</a> 选举机制</h3><h4 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h4><p>QuorumPeer#startLeaderElection 初始化选举环境：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startLeaderElection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// Looking 状态，需要选举</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPeerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ServerState</span><span class="token punctuation">.</span><span class="token constant">LOOKING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 选票组件: myid (serverid), zxid, epoch</span>
            <span class="token comment">// 开始选票时，serverid 是自己，【先投自己】</span>
            currentVote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>myid<span class="token punctuation">,</span> <span class="token function">getLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getCurrentEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>electionType <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            udpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token function">getQuorumAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 响应投票结果线程</span>
            responder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponderThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            responder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建选举算法实例</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>electionAlg <span class="token operator">=</span> <span class="token function">createElectionAlgorithm</span><span class="token punctuation">(</span>electionType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// zk总的发送和接收队列准备好</span>
<span class="token keyword">protected</span> <span class="token class-name">Election</span> <span class="token function">createElectionAlgorithm</span><span class="token punctuation">(</span><span class="token keyword">int</span> electionAlgorithm<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 负责选举过程中的所有网络通信，创建各种队列和集合</span>
    <span class="token class-name">QuorumCnxManager</span> qcm <span class="token operator">=</span> <span class="token function">createCnxnManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">QuorumCnxManager<span class="token punctuation">.</span>Listener</span> listener <span class="token operator">=</span> qcm<span class="token punctuation">.</span>listener<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 启动监听线程, 调用 client = ss.accept()阻塞，等待处理请求</span>
        listener<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 准备好发送和接收队列准备</span>
        <span class="token class-name">FastLeaderElection</span> fle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastLeaderElection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> qcm<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 启动选举线程，【WorkerSender 和 WorkerReceiver】</span>
        fle<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        le <span class="token operator">=</span> fle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="选举源码" tabindex="-1"><a class="header-anchor" href="#选举源码" aria-hidden="true">#</a> 选举源码</h4><p>当 Zookeeper 启动后，首先都是 Looking 状态，通过选举让其中一台服务器成为 Leader</p><p>执行 <code>super.start()</code> 相当于执行 <code>QuorumPeer#run()</code> 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">LOOKING</span><span class="token operator">:</span>
        <span class="token comment">// 进行选举，选举结束返回最终成为 Leader 胜选的那张选票</span>
        <span class="token function">setCurrentVote</span><span class="token punctuation">(</span><span class="token function">makeLEStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FastLeaderElection 类：</p><ul><li><p>lookForLeader：选举</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Vote</span> <span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 正常启动中其他服务器都会向我发送一个投票，保存每个服务器的最新合法有效的投票</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Vote</span><span class="token punctuation">&gt;</span></span> recvset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Vote</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 存储合法选举之外的投票结果</span>
    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Vote</span><span class="token punctuation">&gt;</span></span> outofelection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Vote</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 一次选举的最大等待时间，默认值是0.2s</span>
    <span class="token keyword">int</span> notTimeout <span class="token operator">=</span> finalizeWait<span class="token punctuation">;</span>
	<span class="token comment">// 每发起一轮选举，logicalclock++,在没有合法的epoch 数据之前，都使用逻辑时钟代替</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 更新逻辑时钟，每进行一次选举，都需要更新逻辑时钟</span>
        logicalclock<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更新选票(serverid， zxid, epoch）</span>
        <span class="token function">updateProposal</span><span class="token punctuation">(</span><span class="token function">getInitId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getInitLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPeerEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 广播选票，把自己的选票发给其他服务器</span>
    <span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 一轮一轮的选举直到选举成功</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">getPeerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ServerState</span><span class="token punctuation">.</span><span class="token constant">LOOKING</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>sendNotifications：广播选票</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历投票参与者，给每台服务器发送选票</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> sid <span class="token operator">:</span> self<span class="token punctuation">.</span><span class="token function">getCurrentAndNextConfigVoters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建发送选票</span>
        <span class="token class-name">ToSend</span> notmsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToSend</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 把发送选票放入发送队列</span>
        sendqueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>notmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>FastLeaderElection 中有 WorkerSender 线程：</p><ul><li><p><code>ToSend m = sendqueue.poll(3000, TimeUnit.MILLISECONDS)</code>：<strong>阻塞获取要发送的选票</strong></p></li><li><p><code>process(m)</code>：处理要发送的选票</p><p><code>manager.toSend(m.sid, requestBuffer)</code>：发送选票</p><ul><li><p><code>if (this.mySid == sid)</code>：如果<strong>消息的接收者 sid 是自己</strong>，直接进入自己的 RecvQueue（自己投自己）</p></li><li><p><code>else</code>：如果接收者是其他服务器，创建对应的发送队列或者复用已经存在的发送队列，把消息放入该队列</p></li><li><p><code>connectOne(sid)</code>：建立连接</p><ul><li><p><code>sock.connect(electionAddr, cnxTO)</code>：建立与 sid 服务器的连接</p></li><li><p><code>initiateConnection(sock, sid)</code>：初始化连接</p><p><code>startConnection(sock, sid)</code>：创建并启动发送器线程和接收器线程</p><ul><li><code>dout = new DataOutputStream(buf)</code>：<strong>获取 Socket 输出流</strong>，向服务器发送数据</li><li><code>din = new DataInputStream(new BIS(sock.getInputStream())))</code>：通过输入流读取对方发送过来的选票</li><li><code>if (sid &gt; self.getId())</code>：接收者 sid 比我的大，没有资格给对方发送连接请求的，直接关闭自己的客户端</li><li><code>SendWorker sw</code>：初始化发送器，并启动发送器线程，线程 run 方法 <ul><li><code>while (running &amp;&amp; !shutdown &amp;&amp; sock != null)</code>：连接没有断开就一直运行</li><li><code>ByteBuffer b = pollSendQueue()</code>：从发送队列 SendQueue 中获取发送消息</li><li><code>lastMessageSent.put(sid, b)</code>：更新对于 sid 这台服务器的最近一条消息</li><li><code>send(b)</code>：<strong>执行发送</strong></li></ul></li><li><code>RecvWorker rw</code>：初始化接收器，并启动接收器线程 <ul><li><code>din.readFully(msgArray, 0, length)</code>：输入流接收消息</li><li><code>addToRecvQueue(new Message(messagg, sid))</code>：将消息放入接收消息 recvQueue 队列</li></ul></li></ul></li></ul></li></ul></li></ul><p>FastLeaderElection 中有 WorkerReceiver 线程</p><ul><li><code>response = manager.pollRecvQueue()</code>：从 RecvQueue 中<strong>阻塞获取出选举投票消息</strong>（其他服务器发送过来的）</li></ul><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-选举源码.png" style="zoom:50%;"><hr><h4 id="状态同步" tabindex="-1"><a class="header-anchor" href="#状态同步" aria-hidden="true">#</a> 状态同步</h4><p>选举结束后，每个节点都需要根据角色更新自己的状态，Leader 更新状态为 Leader，其他节点更新状态为 Follower，整体流程：</p><ul><li>Follower 需要让 Leader 知道自己的状态 (sid, epoch, zxid)</li><li>Leader 接收到信息，<strong>根据信息构建新的 epoch</strong>，要返回对应的信息给 Follower，Follower 更新自己的 epoch</li><li>Leader 需要根据 Follower 的状态，确定何种方式的数据同步 DIFF、TRUNC、SNAP，就是要<strong>以 Leader 服务器数据为准</strong><ul><li>DIFF：Leader 提交的 zxid 比 Follower 的 zxid 大，发送 Proposal 给 Follower 提交执行</li><li>TRUNC：Follower 的 zxid 比leader 的 zxid 大，Follower 要进行回滚</li><li>SNAP：Follower 没有任何数据，直接全量同步</li></ul></li><li>执行数据同步，当 Leader 接收到超过半数 Follower 的 Ack 之后，进入正常工作状态，集群启动完成</li></ul><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-同步源码.png" style="zoom:50%;"><p>核心函数解析：</p><ul><li>Leader 更新状态入口：<code>Leader.lead()</code><ul><li><code>zk.loadData()</code>：恢复数据到内存</li><li><code>cnxAcceptor = new LearnerCnxAcceptor()</code>：启动通信组件 <ul><li><code>s = ss.accept()</code>：等待其他 Follower 节点向 Leader 节点发送同步状态</li><li><code>LearnerHandler fh </code>：接收到 Follower 的请求，就创建 LearnerHandler 对象</li><li><code>fh.start()</code>：启动线程，通过 switch-case 语法判断接收的命令，执行相应的操作</li></ul></li></ul></li><li>Follower 更新状态入口：<code>Follower.followerLeader()</code><ul><li><code>QuorumServer leaderServer = findLeader()</code>：查找 Leader</li><li><code>connectToLeader(addr, hostname) </code>：与 Leader 建立连接</li><li><code>long newEpochZxid = registerWithLeader(Leader.FOLLOWERINFO)</code>：向 Leader 注册</li></ul></li></ul><hr><h4 id="主从工作" tabindex="-1"><a class="header-anchor" href="#主从工作" aria-hidden="true">#</a> 主从工作</h4><p>Leader：主服务的工作流程</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-Leader启动.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Follower：从服务的工作流程，核心函数为 <code>Follower#followLeader()</code></p><ul><li><p><code>readPacket(qp)</code>：读取信息</p></li><li><p><code>processPacket(qp)</code>：处理信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processPacket</span><span class="token punctuation">(</span><span class="token class-name">QuorumPacket</span> qp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>qp<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Leader</span><span class="token punctuation">.</span><span class="token constant">PING</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Leader</span><span class="token punctuation">.</span><span class="token constant">PROPOSAL</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Leader</span><span class="token punctuation">.</span><span class="token constant">COMMIT</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Leader</span><span class="token punctuation">.</span><span class="token constant">COMMITANDACTIVATE</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Leader</span><span class="token punctuation">.</span><span class="token constant">UPTODATE</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Leader</span><span class="token punctuation">.</span><span class="token constant">REVALIDATE</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Leader</span><span class="token punctuation">.</span><span class="token constant">SYNC</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="客户端-1" tabindex="-1"><a class="header-anchor" href="#客户端-1" aria-hidden="true">#</a> 客户端</h3><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/Zookeeper-客户端初始化.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,177);function k(v,m){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("参考视频："),n("a",r,[s("https://www.bilibili.com/video/BV1to4y1C7gw"),l(e)])]),d])}const h=t(i,[["render",k],["__file","Zookeeper.html.vue"]]);export{h as default};
