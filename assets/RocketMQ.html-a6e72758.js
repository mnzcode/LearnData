import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as s,b as e,e as t}from"./app-109af9bf.js";const i={},u=t('<h1 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq" aria-hidden="true">#</a> RocketMQ</h1><h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h2><h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列" aria-hidden="true">#</a> 消息队列</h3><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h4><p>消息队列是一种先进先出的数据结构，常见的应用场景：</p><ul><li><p>应用解耦：系统的耦合性越高，容错性就越低</p><p>实例：用户创建订单后，耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障都会造成下单异常，影响用户使用体验。使用消息队列解耦合，比如物流系统发生故障，需要几分钟恢复，将物流系统要处理的数据缓存到消息队列中，用户的下单操作正常完成。等待物流系统正常后处理存在消息队列中的订单消息即可，终端系统感知不到物流系统发生过几分钟故障</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-解耦.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>流量削峰：应用系统如果遇到系统请求流量的瞬间猛增，有可能会将系统压垮，使用消息队列可以将大量请求缓存起来，分散到很长一段时间处理，这样可以提高系统的稳定性和用户体验</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-流量削峰.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>数据分发：让数据在多个系统更加之间进行流通，数据的产生方不需要关心谁来使用数据，只需要将数据发送到消息队列，数据使用方直接在消息队列中直接获取数据</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-数据分发.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul>',6),r={href:"https://www.bilibili.com/video/BV1L4411y7mn",target:"_blank",rel:"noopener noreferrer"},d=t(`<hr><h4 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h4><p>RocketMQ 对比 Kafka 的优点</p><ul><li>支持 Pull和 Push 两种消息模式</li></ul><ul><li>支持延时消息、死信队列、消息重试、消息回溯、消息跟踪、事务消息等高级特性</li><li>对消息可靠性做了改进，<strong>保证消息不丢失并且至少消费一次</strong>，与 Kafka 一样是先写 PageCache 再落盘，并且数据有多副本</li><li>RocketMQ 存储模型是所有的 Topic 都写到同一个 Commitlog 里，是一个 append only 操作，在海量 Topic 下也能将磁盘的性能发挥到极致，并且保持稳定的写入时延。Kafka 的吞吐非常高（零拷贝、操作系统页缓存、磁盘顺序写），但是在多 Topic 下时延不够稳定（顺序写入特性会被破坏从而引入大量的随机 I/O），不适合实时在线业务场景</li><li>经过阿里巴巴多年双 11 验证过、可以支持亿级并发的开源消息队列</li></ul><p>Kafka 比 RocketMQ 吞吐量高：</p><ul><li><p>Kafka 将 Producer 端将多个小消息合并，采用异步批量发送的机制，当发送一条消息时，消息并没有发送到 Broker 而是缓存起来，直接向业务返回成功，当缓存的消息达到一定数量时再批量发送</p></li><li><p>减少了网络 I/O，提高了消息发送的性能，但是如果消息发送者宕机，会导致消息丢失，降低了可靠性</p></li><li><p>RocketMQ 缓存过多消息会导致频繁 GC，并且为了保证可靠性没有采用这种方式</p></li></ul><p>Topic 的 partition 数量过多时，Kafka 的性能不如 RocketMQ：</p><ul><li><p>两者都使用文件存储，但是 Kafka 是一个分区一个文件，Topic 过多时分区的总量也会增加，过多的文件导致对消息刷盘时出现文件竞争磁盘，造成性能的下降。<strong>一个分区只能被一个消费组中的一个消费线程进行消费</strong>，因此可以同时消费的消费端也比较少</p></li><li><p>RocketMQ 所有队列都存储在一个文件中，每个队列存储的消息量也比较小，因此多 Topic 的对 RocketMQ 的性能的影响较小</p></li></ul><hr><h3 id="安装测试" tabindex="-1"><a class="header-anchor" href="#安装测试" aria-hidden="true">#</a> 安装测试</h3><p>安装需要 Java 环境，下载解压后进入安装目录，进行启动：</p><ul><li><p>启动 NameServer</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.启动 NameServer</span>
<span class="token function">nohup</span> <span class="token function">sh</span> bin/mqnamesrv <span class="token operator">&amp;</span>
<span class="token comment"># 2.查看启动日志</span>
<span class="token function">tail</span> <span class="token parameter variable">-f</span> ~/logs/rocketmqlogs/namesrv.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RocketMQ 默认的虚拟机内存较大，需要编辑如下两个配置文件，修改 JVM 内存大小</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编辑runbroker.sh和runserver.sh修改默认JVM大小</span>
<span class="token function">vi</span> runbroker.sh
<span class="token function">vi</span> runserver.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考配置：JAVA_OPT=&quot;\${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</p></li><li><p>启动 Broker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.启动 Broker</span>
<span class="token function">nohup</span> <span class="token function">sh</span> bin/mqbroker <span class="token parameter variable">-n</span> localhost:9876 <span class="token assign-left variable">autoCreateTopicEnable</span><span class="token operator">=</span>true <span class="token operator">&amp;</span>
<span class="token comment"># 2.查看启动日志</span>
<span class="token function">tail</span> <span class="token parameter variable">-f</span> ~/logs/rocketmqlogs/broker.log 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>发送消息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.设置环境变量</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NAMESRV_ADDR</span><span class="token operator">=</span>localhost:9876
<span class="token comment"># 2.使用安装包的 Demo 发送消息</span>
<span class="token function">sh</span> bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接受消息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.设置环境变量</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NAMESRV_ADDR</span><span class="token operator">=</span>localhost:9876
<span class="token comment"># 2.接收消息</span>
<span class="token function">sh</span> bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关闭 RocketMQ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.关闭 NameServer</span>
<span class="token function">sh</span> bin/mqshutdown namesrv
<span class="token comment"># 2.关闭 Broker</span>
<span class="token function">sh</span> bin/mqshutdown broker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念" aria-hidden="true">#</a> 相关概念</h3><p>RocketMQ 主要由 Producer、Broker、Consumer 三部分组成，其中 Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息，NameServer 负责管理 Broker</p><ul><li>代理服务器（Broker Server）：消息中转角色，负责<strong>存储消息、转发消息</strong>。在 RocketMQ 系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备，也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等</li><li>名字服务（Name Server）：充当<strong>路由消息</strong>的提供者。生产者或消费者能够通过名字服务查找各主题相应的 Broker IP 列表</li><li>消息生产者（Producer）：负责<strong>生产消息</strong>，把业务应用系统里产生的消息发送到 Broker 服务器。RocketMQ 提供多种发送方式，同步发送、异步发送、顺序发送、单向发送，同步和异步方式均需要 Broker 返回确认信息，单向发送不需要；可以通过 MQ 的负载均衡模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败并且低延迟</li><li>消息消费者（Consumer）：负责<strong>消费消息</strong>，一般是后台系统负责异步消费，一个消息消费者会从 Broker 服务器拉取消息、并将其提供给应用程序。从用户应用的角度而提供了两种消费形式： <ul><li>拉取式消费（Pull Consumer）：应用通主动调用 Consumer 的拉消息方法从 Broker 服务器拉消息，主动权由应用控制，一旦获取了批量消息，应用就会启动消费过程</li><li>推动式消费（Push Consumer）：该模式下 Broker 收到数据后会主动推送给消费端，实时性较高</li></ul></li><li>生产者组（Producer Group）：同一类 Producer 的集合，发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，<strong>则 Broker 服务器会联系同一生产者组的其他生产者实例以提交或回溯消费</strong></li><li>消费者组（Consumer Group）：同一类 Consumer 的集合，消费者实例必须订阅完全相同的 Topic，消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面更容易的实现负载均衡和容错。RocketMQ 支持两种消息模式： <ul><li>集群消费（Clustering）：相同 Consumer Group 的每个 Consumer 实例平均分摊消息</li><li>广播消费（Broadcasting）：相同 Consumer Group 的每个 Consumer 实例都接收全量的消息</li></ul></li></ul><p>每个 Broker 可以存储多个 Topic 的消息，每个 Topic 的消息也可以分片存储于不同的 Broker，Message Queue（消息队列）是用于存储消息的物理地址，每个 Topic 中的消息地址存储于多个 Message Queue 中</p><ul><li><p>主题（Topic）：表示一类消息的集合，每个主题包含若干条消息，每条消息只属于一个主题，是 RocketMQ 消息订阅的基本单位</p></li><li><p>消息（Message）：消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ 中每个消息拥有唯一的 Message ID，且可以携带具有业务标识的 Key，系统提供了通过 Message ID 和 Key 查询消息的功能</p></li><li><p>标签（Tag）：为消息设置的标志，用于同一主题下区分不同类型的消息。标签能够有效地保持代码的清晰度和连贯性，并优化 RocketMQ 提供的查询系统，消费者可以根据 Tag 实现对不同子主题的不同消费逻辑，实现更好的扩展性</p></li><li><p>普通顺序消息（Normal Ordered Message）：消费者通过同一个消息队列（Topic 分区）收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的</p></li><li><p>严格顺序消息（Strictly Ordered Message）：消费者收到的所有消息均是有顺序的</p></li></ul>`,19),k={href:"https://github.com/apache/rocketmq/tree/master/docs/cn%EF%BC%88%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%83%A8%E5%88%86%E7%9A%84%E7%AC%94%E8%AE%B0%E5%8F%82%E8%80%83%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},m=t(`<hr><h2 id="消息操作" tabindex="-1"><a class="header-anchor" href="#消息操作" aria-hidden="true">#</a> 消息操作</h2><h3 id="基本样例" tabindex="-1"><a class="header-anchor" href="#基本样例" aria-hidden="true">#</a> 基本样例</h3><h4 id="订阅发布" tabindex="-1"><a class="header-anchor" href="#订阅发布" aria-hidden="true">#</a> 订阅发布</h4><p>消息的发布是指某个生产者向某个 Topic 发送消息，消息的订阅是指某个消费者关注了某个 Topic 中带有某些 Tag 的消息，进而从该 Topic 消费数据</p><p>导入 MQ 客户端依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>rocketmq-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消息发送者步骤分析：</p><ol><li>创建消息生产者 Producer，并制定生产者组名</li><li>指定 Nameserver 地址</li><li>启动 Producer</li><li>创建消息对象，指定主题 Topic、Tag 和消息体</li><li>发送消息</li><li>关闭生产者 Producer</li></ol><p>消息消费者步骤分析：</p><ol><li>创建消费者 Consumer，制定消费者组名</li><li>指定 Nameserver 地址</li><li>订阅主题 Topic 和 Tag</li><li>设置回调函数，处理消息</li><li>启动消费者 Consumer</li></ol>`,11),v={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md",target:"_blank",rel:"noopener noreferrer"},g=t(`<hr><h4 id="发送消息" tabindex="-1"><a class="header-anchor" href="#发送消息" aria-hidden="true">#</a> 发送消息</h4><h5 id="同步发送" tabindex="-1"><a class="header-anchor" href="#同步发送" aria-hidden="true">#</a> 同步发送</h5><p>使用 RocketMQ 发送三种类型的消息：同步消息、异步消息和单向消息，其中前两种消息是可靠的，因为会有发送是否成功的应答</p><p>这种可靠性同步地发送方式使用的比较广泛，比如：重要的消息通知，短信通知</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncProducer</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 实例化消息生产者Producer</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 设置NameServer的地址</span>
    	producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 启动Producer实例</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	    <span class="token comment">// 创建消息，并指定Topic，Tag和消息体</span>
    	    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>
                <span class="token string">&quot;TopicTest&quot;</span> <span class="token comment">/* Topic */</span><span class="token punctuation">,</span>
                <span class="token string">&quot;TagA&quot;</span> <span class="token comment">/* Tag */</span><span class="token punctuation">,</span>
        		<span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span> <span class="token comment">/* Message body */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        	<span class="token comment">// 发送消息到一个Broker</span>
            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 通过sendResult返回消息是否成功送达</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
    	<span class="token comment">// 如果不再发送消息，关闭Producer实例。</span>
    	producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="异步发送" tabindex="-1"><a class="header-anchor" href="#异步发送" aria-hidden="true">#</a> 异步发送</h5><p>异步消息通常用在对响应时间敏感的业务场景，即发送端不能容忍长时间地等待 Broker 的响应</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncProducer</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 实例化消息生产者Producer</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 设置NameServer的地址</span>
        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 启动Producer实例</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
        <span class="token keyword">int</span> messageCount <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
		<span class="token comment">// 根据消息数量实例化倒计时计算器</span>
        <span class="token keyword">final</span> <span class="token class-name">CountDownLatch2</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch2</span><span class="token punctuation">(</span>messageCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> messageCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token comment">// 创建消息，并指定Topic，Tag和消息体</span>
            <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OrderID188&quot;</span><span class="token punctuation">,</span>
                                      <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// SendCallback接收异步返回结果的回调</span>
            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 发送成功回调函数</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-10d OK %s %n&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> sendResult<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-10d Exception %s %n&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 等待5s</span>
        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果不再发送消息，关闭Producer实例。</span>
        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="单向发送" tabindex="-1"><a class="header-anchor" href="#单向发送" aria-hidden="true">#</a> 单向发送</h5><p>单向发送主要用在不特别关心发送结果的场景，例如日志发送</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OnewayProducer</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    	<span class="token comment">// 实例化消息生产者Producer</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 设置NameServer的地址</span>
        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 启动Producer实例</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token comment">// 创建消息，并指定Topic，Tag和消息体</span>
        	<span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span>
                          <span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token comment">// 发送单向消息，没有任何返回结果</span>
        	producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
    	<span class="token comment">// 如果不再发送消息，关闭Producer实例。</span>
    	producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="消费消息" tabindex="-1"><a class="header-anchor" href="#消费消息" aria-hidden="true">#</a> 消费消息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 实例化消费者</span>
        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 设置NameServer的地址</span>
        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    	<span class="token comment">// 订阅一个或者多个Topic，以及Tag来过滤需要消费的消息</span>
        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 注册消息监听器，回调实现类来处理从broker拉取回来的消息</span>
        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 接受消息内容</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s Receive New Messages: %s %n&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 标记该消息已经被成功消费</span>
                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 启动消费者实例</span>
        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer Started.%n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="顺序消息" tabindex="-1"><a class="header-anchor" href="#顺序消息" aria-hidden="true">#</a> 顺序消息</h3><h4 id="原理解析" tabindex="-1"><a class="header-anchor" href="#原理解析" aria-hidden="true">#</a> 原理解析</h4><p>消息有序指的是一类消息消费时，能按照发送的顺序来消费。例如：一个订单产生了三条消息分别是订单创建、订单付款、订单完成。消费时要按照这个顺序消费才能有意义，但是同时订单之间是可以并行消费的，RocketMQ 可以严格的保证消息有序。</p><p>顺序消息分为全局顺序消息与分区顺序消息，</p><ul><li>全局顺序：对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序进行发布和消费，适用于性能要求不高，所有的消息严格按照 FIFO 原则进行消息发布和消费的场景</li><li>分区顺序：对于指定的一个 Topic，所有消息根据 Sharding key 进行分区，同一个分组内的消息按照严格的 FIFO 顺序进行发布和消费。Sharding key 是顺序消息中用来区分不同分区的关键字段，和普通消息的 Key 是完全不同的概念，适用于性能要求高的场景</li></ul><p>在默认的情况下消息发送会采取 Round Robin 轮询方式把消息发送到不同的 queue（分区队列），而消费消息是从多个 queue 上拉取消息，这种情况发送和消费是不能保证顺序。但是如果控制发送的顺序消息只依次发送到同一个 queue 中，消费的时候只从这个 queue 上依次拉取，则就保证了顺序。当<strong>发送和消费参与的 queue 只有一个</strong>，则是全局有序；如果多个queue 参与，则为分区有序，即相对每个 queue，消息都是有序的</p><hr><h4 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h4><p>一个订单的顺序流程是：创建、付款、推送、完成，订单号相同的消息会被先后发送到同一个队列中，消费时同一个 OrderId 获取到的肯定是同一个队列</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 标签集合</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagD&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// 订单列表</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStep</span><span class="token punctuation">&gt;</span></span> orderList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> dateStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 加个时间前缀</span>
            <span class="token class-name">String</span> body <span class="token operator">=</span> dateStr <span class="token operator">+</span> <span class="token string">&quot; Hello RocketMQ &quot;</span> <span class="token operator">+</span> orderList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;OrderTopic&quot;</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;KEY&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token doc-comment comment">/**
             * 参数一：消息对象
             * 参数二：消息队列的选择器
             * 参数三：选择队列的业务标识（订单 ID）
             */</span>
            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token doc-comment comment">/**
                 * mqs：队列集合
                 * msg：消息对象
                 * arg：业务标识的参数
                 */</span>
                <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqs<span class="token punctuation">,</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Long</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>
                    <span class="token keyword">long</span> index <span class="token operator">=</span> id <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据订单id选择发送queue</span>
                    <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> orderList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//订单id</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;SendResult status:%s, queueId:%d, body:%s&quot;</span><span class="token punctuation">,</span>
                    sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    sendResult<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 订单的步骤</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OrderStep</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">long</span> orderId<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>
        <span class="token comment">// set + get</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 生成模拟订单数据</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStep</span><span class="token punctuation">&gt;</span></span> <span class="token function">buildOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStep</span><span class="token punctuation">&gt;</span></span> orderList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStep</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">OrderStep</span> orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103111039L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103111065L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103111039L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;付款&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103117235L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103111065L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;付款&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103117235L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;付款&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103111065L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103111039L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;推送&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103117235L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token number">15103111039L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">&quot;完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> orderList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 顺序消息消费，带事务方式（应用可控制Offset什么时候提交）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerInOrder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name_3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费</span>
        <span class="token comment">// 如果非第一次启动，那么按照上次消费的位置继续消费</span>
        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span><span class="token constant">CONSUME_FROM_FIRST_OFFSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 订阅三个tag</span>
        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;OrderTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagA || TagC || TagD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">ConsumeOrderlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeOrderlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 可以看到每个queue有唯一的consume线程来消费, 订单对每个queue(分区)有序</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;consumeThread=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;queueId=&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, content:&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer Started.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="延时消息" tabindex="-1"><a class="header-anchor" href="#延时消息" aria-hidden="true">#</a> 延时消息</h3><h4 id="原理解析-1" tabindex="-1"><a class="header-anchor" href="#原理解析-1" aria-hidden="true">#</a> 原理解析</h4><p>定时消息（延迟队列）是指消息发送到 Broker 后，不会立即被消费，等待特定时间投递给真正的 Topic</p><p>RocketMQ 并不支持任意时间的延时，需要设置几个固定的延时等级，从 1s 到 2h 分别对应着等级 1 到 18，消息消费失败会进入延时消息队列，消息发送时间与设置的延时等级和重试次数有关，详见代码 <code>SendMessageProcessor.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> messageDelayLevel <span class="token operator">=</span> <span class="token string">&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Broker 可以配置 messageDelayLevel，该属性是 Broker 的属性，不属于某个 Topic</p><p>发消息时，可以设置延迟等级 <code>msg.setDelayLevel(level)</code>，level 有以下三种情况：</p><ul><li>level == 0：消息为非延迟消息</li><li>1&lt;=level&lt;=maxLevel：消息延迟特定时间，例如 level==1，延迟 1s</li><li>level &gt; maxLevel：则 level== maxLevel，例如 level==20，延迟 2h</li></ul><p>定时消息会暂存在名为 SCHEDULE_TOPIC_XXXX 的 Topic 中，并根据 delayTimeLevel 存入特定的 queue，队列的标识 <code>queueId = delayTimeLevel – 1</code>，即<strong>一个 queue 只存相同延迟的消息</strong>，保证具有相同发送延迟的消息能够顺序消费。Broker 会为每个延迟级别提交一个定时任务，调度地消费 SCHEDULE_TOPIC_XXXX，将消息写入真实的 Topic</p><p>注意：定时消息在第一次写入和调度写入真实 Topic 时都会计数，因此发送数量、tps 都会变高</p><hr><h4 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1" aria-hidden="true">#</a> 代码实现</h4><p>提交了一个订单就可以发送一个延时消息，1h 后去检查这个订单的状态，如果还是未付款就取消订单释放库存</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledMessageProducer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实例化一个生产者来产生延时消息</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;ExampleProducerGroup&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 启动生产者</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> totalMessagesToSend <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totalMessagesToSend<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;DelayTopic&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;Hello scheduled message &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)</span>
            message<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 发送消息</span>
            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 关闭生产者</span>
        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledMessageConsumer</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
      <span class="token comment">// 实例化消费者</span>
      <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;ExampleConsumer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 订阅Topics</span>
      consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;DelayTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 注册消息监听者</span>
      consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token annotation punctuation">@Override</span>
          <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> message <span class="token operator">:</span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment">// 打印延迟的时间段</span>
                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Receive message[msgId=&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> message<span class="token punctuation">.</span><span class="token function">getBornTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms later&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
              <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 启动消费者</span>
      consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="批量消息" tabindex="-1"><a class="header-anchor" href="#批量消息" aria-hidden="true">#</a> 批量消息</h3><p>批量发送消息能显著提高传递小消息的性能，限制是这些批量消息应该有相同的 topic，相同的 waitStoreMsgOK，而且不能是延时消息，并且这一批消息的总大小不应超过 4MB</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;ExampleProducerGroup&quot;</span><span class="token punctuation">)</span>
        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//启动producer</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> msgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建消息对象，指定主题Topic、Tag和消息体</span>
        <span class="token class-name">Message</span> msg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;BatchTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tag1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> msg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;BatchTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tag1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> msg3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;BatchTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tag1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        msgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        msgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        msgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 发送消息</span>
        <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送结果:&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭生产者producer</span>
        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当发送大批量数据时，可能不确定消息是否超过了大小限制（4MB），所以需要将消息列表分割一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListSplitter</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SIZE_LIMIT</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> currIndex<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ListSplitter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>messages <span class="token operator">=</span> messages<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> currIndex <span class="token operator">&lt;</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> startIndex <span class="token operator">=</span> <span class="token function">getStartIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> nextIndex <span class="token operator">=</span> startIndex<span class="token punctuation">;</span>
        <span class="token keyword">int</span> totalSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> nextIndex <span class="token operator">&lt;</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> nextIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Message</span> message <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nextIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> tmpSize <span class="token operator">=</span> <span class="token function">calcMessageSize</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 单个消息超过了最大的限制</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSize <span class="token operator">+</span> totalSize <span class="token operator">&gt;</span> <span class="token constant">SIZE_LIMIT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                totalSize <span class="token operator">+=</span> tmpSize<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> subList <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> nextIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        currIndex <span class="token operator">=</span> nextIndex<span class="token punctuation">;</span>
        <span class="token keyword">return</span> subList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getStartIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Message</span> currMessage <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tmpSize <span class="token operator">=</span> <span class="token function">calcMessageSize</span><span class="token punctuation">(</span>currMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmpSize <span class="token operator">&gt;</span> <span class="token constant">SIZE_LIMIT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            currIndex <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token class-name">Message</span> message <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmpSize <span class="token operator">=</span> <span class="token function">calcMessageSize</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> currIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calcMessageSize</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmpSize <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmpSize <span class="token operator">+=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        tmpSize <span class="token operator">=</span> tmpSize <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 增加⽇日志的开销20字节</span>
        <span class="token keyword">return</span> tmpSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//把大的消息分裂成若干个小的消息</span>
        <span class="token class-name">ListSplitter</span> splitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListSplitter</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>splitter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> listItem <span class="token operator">=</span> splitter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>listItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//处理error</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="过滤消息" tabindex="-1"><a class="header-anchor" href="#过滤消息" aria-hidden="true">#</a> 过滤消息</h3><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h4><p>RocketMQ 定义了一些基本语法来支持过滤特性，可以很容易地扩展：</p><ul><li>数值比较，比如：&gt;，&gt;=，&lt;，&lt;=，BETWEEN，=</li><li>字符比较，比如：=，&lt;&gt;，IN</li><li>IS NULL 或者 IS NOT NULL</li><li>逻辑符号 AND，OR，NOT</li></ul><p>常量支持类型为：</p><ul><li>数值，比如 123，3.1415</li><li>字符，比如 &#39;abc&#39;，必须用单引号包裹起来</li><li>NULL，特殊的常量</li><li>布尔值，TRUE 或 FALSE</li></ul><p>只有使用 push 模式的消费者才能用使用 SQL92 标准的 sql 语句，接口如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MessageSelector</span> messageSelector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：消费者接收包含 TAGA 或 TAGB 或 TAGC 的消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;CID_EXAMPLE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;TOPIC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TAGA || TAGB || TAGC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="原理解析-2" tabindex="-1"><a class="header-anchor" href="#原理解析-2" aria-hidden="true">#</a> 原理解析</h4><p>RocketMQ 分布式消息队列的消息过滤方式是在 Consumer 端订阅消息时再做消息过滤的，所以是在 Broker 端实现的，优点是减少了对于 Consumer 无用消息的网络传输，缺点是增加了 Broker 的负担，而且实现相对复杂</p><p>RocketMQ 在 Producer 端写入消息和在 Consumer 端订阅消息采用<strong>分离存储</strong>的机制实现，Consumer 端订阅消息是需要通过 ConsumeQueue 这个消息消费的逻辑队列拿到一个索引，然后再从 CommitLog 里面读取真正的消息实体内容</p><p>ConsumeQueue 的存储结构如下，有 8 个字节存储的 Message Tag 的哈希值，基于 Tag 的消息过滤就是基于这个字段</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-消费队列结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>Tag 过滤：Consumer 端订阅消息时指定 Topic 和 TAG，然后将订阅请求构建成一个 SubscriptionData，发送一个 Pull 消息的请求给 Broker 端。Broker 端用这些数据先构建一个 MessageFilter，然后传给文件存储层 Store。Store 从 ConsumeQueue 读取到一条记录后，会用它记录的消息 tag hash 值去做过滤。因为在服务端只是根据 hashcode 进行判断，无法精确对 tag 原始字符串进行过滤，所以消费端拉取到消息后，还需要对消息的原始 tag 字符串进行比对，如果不同，则丢弃该消息，不进行消息消费</p></li><li><p>SQL92 过滤：工作流程和 Tag 过滤大致一样，只是在 Store 层的具体过滤方式不一样。真正的 SQL expression 的构建和执行由 rocketmq-filter 模块负责，每次过滤都去执行 SQL 表达式会影响效率，所以 RocketMQ 使用了 BloomFilter 来避免了每次都去执行</p></li></ul><hr><h4 id="代码实现-2" tabindex="-1"><a class="header-anchor" href="#代码实现-2" aria-hidden="true">#</a> 代码实现</h4><p>发送消息时，通过 putUserProperty 来设置消息的属性，SQL92 的表达式上下文为消息的属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;FilterTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tag&quot;</span><span class="token punctuation">,</span>
               <span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置一些属性</span>
            msg<span class="token punctuation">.</span><span class="token function">putUserProperty</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 SQL 筛选过滤消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 过滤属性大于 5  的消息</span>
        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;FilterTopic&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MessageSelector</span><span class="token punctuation">.</span><span class="token function">bySql</span><span class="token punctuation">(</span><span class="token string">&quot;i&gt;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置回调函数，处理消息</span>
        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//接受消息内容</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;consumeThread=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span><span class="token constant">CONSUME_SUCCESS</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 启动消费者consumer</span>
        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="事务消息" tabindex="-1"><a class="header-anchor" href="#事务消息" aria-hidden="true">#</a> 事务消息</h3><h4 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h4><p>RocketMQ 支持分布式事务消息，采用了 2PC 的思想来实现了提交事务消息，同时增加一个<strong>补偿逻辑</strong>来处理二阶段超时或者失败的消息，如下图所示：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-事务消息.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>事务消息的大致方案分为两个流程：正常事务消息的发送及提交、事务消息的补偿流程</p><ol><li><p>事务消息发送及提交：</p><ul><li><p>发送消息（Half 消息），服务器将消息的主题和队列改为半消息状态，并放入半消息队列</p></li><li><p>服务端响应消息写入结果（如果写入失败，此时 Half 消息对业务不可见）</p></li><li><p>根据发送结果执行本地事务</p></li><li><p>根据本地事务状态执行 Commit 或者 Rollback</p></li></ul></li></ol><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-事务工作流程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li><p>补偿机制：用于解决消息 Commit 或者 Rollback 发生超时或者失败的情况，比如出现网络问题</p><ul><li>Broker 服务端通过<strong>对比 Half 消息和 Op 消息</strong>，对未确定状态的消息推进 CheckPoint</li><li>没有 Commit/Rollback 的事务消息，服务端根据根据半消息的生产者组，到 ProducerManager 中获取生产者（同一个 Group 的 Producer）的会话通道，发起一次回查（<strong>单向请求</strong>）</li><li>Producer 收到回查消息，检查事务消息状态表内对应的本地事务的状态</li><li>根据本地事务状态，重新 Commit 或者 Rollback</li></ul><p>RocketMQ 并不会无休止的进行事务状态回查，最大回查 15 次，如果 15 次回查还是无法得知事务状态，则默认回滚该消息，</p><p>回查服务：<code>TransactionalMessageCheckService#run</code></p></li></ol><hr><h4 id="两阶段" tabindex="-1"><a class="header-anchor" href="#两阶段" aria-hidden="true">#</a> 两阶段</h4><h5 id="一阶段" tabindex="-1"><a class="header-anchor" href="#一阶段" aria-hidden="true">#</a> 一阶段</h5><p>事务消息相对普通消息最大的特点就是<strong>一阶段发送的消息对用户是不可见的</strong>，因为对于 Half 消息，会备份原消息的主题与消息消费队列，然后改变主题为 RMQ_SYS_TRANS_HALF_TOPIC，由于消费组未订阅该主题，故消费端无法消费 Half 类型的消息</p><p>RocketMQ 会开启一个<strong>定时任务</strong>，从 Topic 为 RMQ_SYS_TRANS_HALF_TOPIC 中拉取消息进行消费，根据生产者组获取一个服务提供者发送回查事务状态请求，根据事务状态来决定是提交或回滚消息</p><p>RocketMQ 的具体实现策略：如果写入的是事务消息，对消息的 Topic 和 Queue 等属性进行替换，同时将原来的 Topic 和 Queue 信息存储到<strong>消息的属性</strong>中，因为消息的主题被替换，所以消息不会转发到该原主题的消息消费队列，消费者无法感知消息的存在，不会消费</p><hr><h5 id="二阶段" tabindex="-1"><a class="header-anchor" href="#二阶段" aria-hidden="true">#</a> 二阶段</h5><p>一阶段写入不可见的消息后，二阶段操作：</p><ul><li><p>如果执行 Commit 操作，则需要让消息对用户可见，构建出 Half 消息的索引。一阶段的 Half 消息写到一个特殊的 Topic，构建索引时需要读取出 Half 消息，然后通过一次普通消息的写入操作将 Topic 和 Queue 替换成真正的目标 Topic 和 Queue，生成一条对用户可见的消息。其实就是利用了一阶段存储的消息的内容，在二阶段时恢复出一条完整的普通消息，然后走一遍消息写入流程</p></li><li><p>如果是 Rollback 则需要撤销一阶段的消息，因为消息本就不可见，所以并<strong>不需要真正撤销消息</strong>（实际上 RocketMQ 也无法去删除一条消息，因为是顺序写文件的）。RocketMQ 为了区分这条消息没有确定状态的消息，采用 Op 消息标识已经确定状态的事务消息（Commit 或者 Rollback）</p></li></ul><p><strong>事务消息无论是 Commit 或者 Rollback 都会记录一个 Op 操作</strong>，两者的区别是 Commit 相对于 Rollback 在写入 Op 消息前将原消息的主题和队列恢复。如果一条事务消息没有对应的 Op 消息，说明这个事务的状态还无法确定（可能是二阶段失败了）</p><p>RocketMQ 将 Op 消息写入到全局一个特定的 Topic 中，通过源码中的方法 <code>TransactionalMessageUtil.buildOpTopic()</code>，这个主题是一个内部的 Topic（像 Half 消息的 Topic 一样），不会被用户消费。Op 消息的内容为对应的 Half 消息的存储的 Offset，这样<strong>通过 Op 消息能索引到 Half 消息</strong></p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-OP消息.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h4><h5 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h5><p>事务消息共有三种状态，提交状态、回滚状态、中间状态：</p><ul><li>TransactionStatus.CommitTransaction：提交事务，允许消费者消费此消息。</li><li>TransactionStatus.RollbackTransaction：回滚事务，代表该消息将被删除，不允许被消费</li><li>TransactionStatus.Unknown：中间状态，代表需要检查消息队列来确定状态</li></ul><p>使用限制：</p><ol><li>事务消息不支持延时消息和批量消息</li><li>Broker 配置文件中的参数 <code>transactionTimeout</code> 为特定时间，事务消息将在特定时间长度之后被检查。当发送事务消息时，还可以通过设置用户属性 <code>CHECK_IMMUNITY_TIME_IN_SECONDS</code> 来改变这个限制，该参数优先于 <code>transactionTimeout</code> 参数</li><li>为了避免单个消息被检查太多次而导致半队列消息累积，默认将单个消息的检查次数限制为 15 次，开发者可以通过 Broker 配置文件的 <code>transactionCheckMax</code> 参数来修改此限制。如果已经检查某条消息超过 N 次（N = <code>transactionCheckMax</code>）， 则 Broker 将丢弃此消息，在默认情况下会打印错误日志。可以通过重写 <code>AbstractTransactionalMessageCheckListener</code> 类来修改这个行为</li><li>事务性消息可能不止一次被检查或消费</li><li>提交给用户的目标主题消息可能会失败，可以查看日志的记录。事务的高可用性通过 RocketMQ 本身的高可用性机制来保证，如果希望事务消息不丢失、并且事务完整性得到保证，可以使用同步的双重写入机制</li><li>事务消息的生产者 ID 不能与其他类型消息的生产者 ID 共享。与其他类型的消息不同，事务消息允许反向查询，MQ 服务器能通过消息的生产者 ID 查询到消费者</li></ol><hr><h5 id="代码实现-3" tabindex="-1"><a class="header-anchor" href="#代码实现-3" aria-hidden="true">#</a> 代码实现</h5><p>实现事务的监听接口，当发送半消息成功时：</p><ul><li><code>executeLocalTransaction</code> 方法来执行本地事务，返回三个事务状态之一</li><li><code>checkLocalTransaction</code> 方法检查本地事务状态，响应消息队列的检查请求，返回三个事务状态之一</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> transactionIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> localTrans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">LocalTransactionState</span> <span class="token function">executeLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> value <span class="token operator">=</span> transactionIndex<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> status <span class="token operator">=</span> value <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token comment">// 将事务ID和状态存入 map 集合</span>
        localTrans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTransactionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">UNKNOW</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">LocalTransactionState</span> <span class="token function">checkLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从 map 集合读出当前事务对应的状态</span>
        <span class="token class-name">Integer</span> status <span class="token operator">=</span> localTrans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTransactionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">UNKNOW</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">COMMIT_MESSAGE</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">ROLLBACK_MESSAGE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">COMMIT_MESSAGE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <strong>TransactionMQProducer</strong> 类创建事务性生产者，并指定唯一的 <code>ProducerGroup</code>，就可以设置自定义线程池来处理这些检查请求，执行本地事务后，需要根据执行结果对消息队列进行回复</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建消息生产者</span>
       	<span class="token class-name">TransactionMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;please_rename_unique_group_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       	<span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">setExecutorService</span><span class="token punctuation">(</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 创建事务监听器</span>
		<span class="token class-name">TransactionListener</span> transactionListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionListenerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生产者的监听器</span>
        producer<span class="token punctuation">.</span><span class="token function">setTransactionListener</span><span class="token punctuation">(</span>transactionListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
       	<span class="token comment">// 启动生产者</span>
        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagE&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TransactionTopic&quot;</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;KEY&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>
                                <span class="token punctuation">(</span><span class="token string">&quot;Hello RocketMQ &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 发送消息</span>
                <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%n&quot;</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> <span class="token operator">|</span> <span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
       	<span class="token comment">//Thread.sleep(1000000);</span>
        <span class="token comment">//producer.shutdown();暂时不关闭</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者代码和前面的实例相同的</p><hr><h2 id="系统特性" tabindex="-1"><a class="header-anchor" href="#系统特性" aria-hidden="true">#</a> 系统特性</h2><h3 id="工作流程-1" tabindex="-1"><a class="header-anchor" href="#工作流程-1" aria-hidden="true">#</a> 工作流程</h3><h4 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h4><p>NameServer 是一个简单的 Topic 路由注册中心，支持 Broker 的动态注册与发现，生产者或消费者能够通过名字服务查找各主题相应的 Broker IP 列表</p><p>NameServer 主要包括两个功能：</p><ul><li>Broker 管理，NameServer 接受 Broker 集群的注册信息，保存下来作为路由信息的基本数据，提供<strong>心跳检测机制</strong>检查 Broker 是否还存活，每 10 秒清除一次两小时没有活跃的 Broker</li><li>路由信息管理，每个 NameServer 将保存关于 Broker 集群的整个路由信息和用于客户端查询的队列信息，然后 Producer 和 Conumser 通过 NameServer 就可以知道整个 Broker 集群的路由信息，从而进行消息的投递和消费</li></ul><p>NameServer 特点：</p><ul><li>NameServer 通常是集群的方式部署，<strong>各实例间相互不进行信息通讯</strong></li><li>Broker 向每一台 NameServer（集群）注册自己的路由信息，所以每个 NameServer 实例上面<strong>都保存一份完整的路由信息</strong></li><li>当某个 NameServer 因某种原因下线了，Broker 仍可以向其它 NameServer 同步其路由信息</li></ul><p>BrokerServer 主要负责消息的存储、投递和查询以及服务高可用保证，在 RocketMQ 系统中接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备，也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等</p><p>Broker 包含了以下几个重要子模块：</p><ul><li><p>Remoting Module：整个 Broker 的实体，负责处理来自 Clients 端的请求</p></li><li><p>Client Manager：负责管理客户端（Producer/Consumer）和维护 Consumer 的 Topic 订阅信息</p></li><li><p>Store Service：提供方便简单的 API 接口处理消息存储到物理硬盘和查询功能</p></li><li><p>HA Service：高可用服务，提供 Master Broker 和 Slave Broker 之间的数据同步功能</p></li><li><p>Index Service：根据特定的 Message key 对投递到 Broker 的消息进行索引服务，以提供消息的快速查询</p></li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-Broker工作流程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="总体流程" tabindex="-1"><a class="header-anchor" href="#总体流程" aria-hidden="true">#</a> 总体流程</h4><p>RocketMQ 的工作流程：</p><ul><li>启动 NameServer 监听端口，等待 Broker、Producer、Consumer 连上来，相当于一个路由控制中心</li><li>Broker 启动，跟<strong>所有的 NameServer 保持长连接</strong>，每隔 30s 时间向 NameServer 上报 Topic 路由信息（心跳包）。心跳包中包含当前 Broker 信息（IP、端口等）以及存储所有 Topic 信息。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系</li><li>收发消息前，先创建 Topic，创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上，也可以在发送消息时自动创建 Topic</li><li>Producer 启动时先跟 NameServer 集群中的<strong>其中一台</strong>建立长连接，并从 NameServer 中获取当前发送的 Topic 存在哪些 Broker 上，同时 Producer 会默认每隔 30s 向 NameServer <strong>定时拉取</strong>一次路由信息</li><li>Producer 发送消息时，根据消息的 Topic 从本地缓存的 TopicPublishInfoTable 获取路由信息，如果没有则会从 NameServer 上重新拉取并更新，轮询队列列表并选择一个队列 MessageQueue，然后与队列所在的 Broker 建立长连接，向 Broker 发消息</li><li>Consumer 跟 Producer 类似，跟其中一台 NameServer 建立长连接，<strong>定时获取路由信息</strong>，根据当前订阅 Topic 存在哪些 Broker 上，直接跟 Broker 建立连接通道，在完成客户端的负载均衡后，选择其中的某一个或者某几个 MessageQueue 来拉取消息并进行消费</li></ul><hr><h4 id="生产消费" tabindex="-1"><a class="header-anchor" href="#生产消费" aria-hidden="true">#</a> 生产消费</h4><p>At least Once：至少一次，指每个消息必须投递一次，Consumer 先 Pull 消息到本地，消费完成后才向服务器返回 ACK，如果没有消费一定不会 ACK 消息</p><p>回溯消费：指 Consumer 已经消费成功的消息，由于业务上需求需要重新消费，Broker 在向 Consumer 投递成功消息后，消息仍然需要保留。并且重新消费一般是按照时间维度，例如由于 Consumer 系统故障，恢复后需要重新消费 1 小时前的数据，RocketMQ 支持按照时间回溯消费，时间维度精确到毫秒</p><p>分布式队列因为有高可靠性的要求，所以数据要进行<strong>持久化存储</strong></p><ol><li>消息生产者发送消息</li><li>MQ 收到消息，将消息进行持久化，在存储中新增一条记录</li><li>返回 ACK 给生产者</li><li>MQ push 消息给对应的消费者，然后等待消费者返回 ACK</li><li>如果消息消费者在指定时间内成功返回 ACK，那么 MQ 认为消息消费成功，在存储中删除消息；如果 MQ 在指定时间内没有收到 ACK，则认为消息消费失败，会尝试重新 push 消息，重复执行 4、5、6 步骤</li><li>MQ 删除消息</li></ol><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-消息存取.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="存储机制" tabindex="-1"><a class="header-anchor" href="#存储机制" aria-hidden="true">#</a> 存储机制</h3><h4 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构" aria-hidden="true">#</a> 存储结构</h4><p>RocketMQ 中 Broker 负责存储消息转发消息，所以以下的结构是存储在 Broker Server 上的，生产者和消费者与 Broker 进行消息的收发是通过主题对应的 Message Queue 完成，类似于通道</p><p>RocketMQ 消息的存储是由 ConsumeQueue 和 CommitLog 配合完成 的，CommitLog 是消息真正的<strong>物理存储</strong>文件，ConsumeQueue 是消息的逻辑队列，类似数据库的<strong>索引节点</strong>，存储的是指向物理存储的地址。<strong>每个 Topic 下的每个 Message Queue 都有一个对应的 ConsumeQueue 文件</strong></p><p>每条消息都会有对应的索引信息，Consumer 通过 ConsumeQueue 这个结构来读取消息实体内容</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-消息存储结构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>CommitLog：消息主体以及元数据的存储主体，存储 Producer 端写入的消息内容，消息内容不是定长的。消息主要是<strong>顺序写入</strong>日志文件，单个文件大小默认 1G，偏移量代表下一次写入的位置，当文件写满了就继续写入下一个文件</li><li>ConsumerQueue：消息消费队列，存储消息在 CommitLog 的索引。RocketMQ 消息消费时要遍历 CommitLog 文件，并根据主题 Topic 检索消息，这是非常低效的。引入 ConsumeQueue 作为消费消息的索引，<strong>保存了指定 Topic 下的队列消息在 CommitLog 中的起始物理偏移量 offset</strong>，消息大小 size 和消息 Tag 的 HashCode 值，每个 ConsumeQueue 文件大小约 5.72M</li><li>IndexFile：为了消息查询提供了一种通过 Key 或时间区间来查询消息的方法，通过 IndexFile 来查找消息的方法<strong>不影响发送与消费消息的主流程</strong>。IndexFile 的底层存储为在文件系统中实现的 HashMap 结构，故 RocketMQ 的索引文件其底层实现为 <strong>hash 索引</strong></li></ul><p>RocketMQ 采用的是混合型的存储结构，即为 Broker 单个实例下所有的队列共用一个日志数据文件（CommitLog）来存储，多个 Topic 的消息实体内容都存储于一个 CommitLog 中。混合型存储结构针对 Producer 和 Consumer 分别采用了<strong>数据和索引部分相分离</strong>的存储结构，Producer 发送消息至 Broker 端，然后 Broker 端使用同步或者异步的方式对消息刷盘持久化，保存至 CommitLog 中。只要消息被持久化至磁盘文件 CommitLog 中，Producer 发送的消息就不会丢失，Consumer 也就肯定有机会去消费这条消息</p><p>服务端支持长轮询模式，当消费者无法拉取到消息后，可以等下一次消息拉取，Broker 允许等待 30s 的时间，只要这段时间内有新消息到达，将直接返回给消费端。RocketMQ 的具体做法是，使用 Broker 端的后台服务线程 ReputMessageService 不停地分发请求并异步构建 ConsumeQueue（逻辑消费队列）和 IndexFile（索引文件）数据</p><hr><h4 id="内存映射" tabindex="-1"><a class="header-anchor" href="#内存映射" aria-hidden="true">#</a> 内存映射</h4><p>操作系统分为用户态和内核态，文件操作、网络操作需要涉及这两种形态的切换，需要进行数据复制。一台服务器把本机磁盘文件的内容发送到客户端，分为两个步骤：</p><ul><li><p>read：读取本地文件内容</p></li><li><p>write：将读取的内容通过网络发送出去</p></li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-文件与网络操作.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>补充：Prog → NET → I/O → 零拷贝部分的笔记详解相关内容</p><p>通过使用 mmap 的方式，可以省去向用户态的内存复制，RocketMQ 充分利用<strong>零拷贝技术</strong>，提高消息存盘和网络发送的速度</p><p>RocketMQ 通过 MappedByteBuffer 对文件进行读写操作，利用了 NIO 中的 FileChannel 模型将磁盘上的物理文件直接映射到用户态的内存地址中，将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率</p><p>MappedByteBuffer 内存映射的方式<strong>限制</strong>一次只能映射 1.5~2G 的文件至用户态的虚拟内存，所以 RocketMQ 默认设置单个 CommitLog 日志数据文件为 1G。RocketMQ 的文件存储使用定长结构来存储，方便一次将整个文件映射至内存</p><hr><h4 id="页面缓存" tabindex="-1"><a class="header-anchor" href="#页面缓存" aria-hidden="true">#</a> 页面缓存</h4><p>页缓存（PageCache）是 OS 对文件的缓存，每一页的大小通常是 4K，用于加速对文件的读写。因为 OS 将一部分的内存用作 PageCache，所以程序对文件进行顺序读写的速度几乎接近于内存的读写速度</p><ul><li>对于数据的写入，OS 会先写入至 Cache 内，随后<strong>通过异步的方式由 pdflush 内核线程将 Cache 内的数据刷盘至物理磁盘上</strong></li><li>对于数据的读取，如果一次读取文件时出现未命中 PageCache 的情况，OS 从物理磁盘上访问读取文件的同时，会顺序对其他相邻块的数据文件进行<strong>预读取</strong>（局部性原理，最大 128K）</li></ul><p>在 RocketMQ 中，ConsumeQueue 逻辑消费队列存储的数据较少，并且是顺序读取，在 PageCache 机制的预读取作用下，Consume Queue 文件的读性能几乎接近读内存，即使在有消息堆积情况下也不会影响性能。但是 CommitLog 消息存储的日志数据文件读取内容时会产生较多的随机访问读取，严重影响性能。选择合适的系统 IO 调度算法和固态硬盘，比如设置调度算法为 Deadline，随机读的性能也会有所提升</p><hr><h4 id="刷盘机制" tabindex="-1"><a class="header-anchor" href="#刷盘机制" aria-hidden="true">#</a> 刷盘机制</h4><p>两种持久化的方案：</p><ul><li>关系型数据库 DB：IO 读写性能比较差，如果 DB 出现故障，则 MQ 的消息就无法落盘存储导致线上故障，可靠性不高</li><li>文件系统：消息刷盘至所部署虚拟机/物理机的文件系统来做持久化，分为异步刷盘和同步刷盘两种模式。消息刷盘为消息存储提供了一种高效率、高可靠性和高性能的数据持久化方式，除非部署 MQ 机器本身或是本地磁盘挂了，一般不会出现无法持久化的问题</li></ul><p>RocketMQ 采用文件系统的方式，无论同步还是异步刷盘，都使用<strong>顺序 IO</strong>，因为磁盘的顺序读写要比随机读写快很多</p><ul><li><p>同步刷盘：只有在消息真正持久化至磁盘后 RocketMQ 的 Broker 端才会真正返回给 Producer 端一个成功的 ACK 响应，保障 MQ 消息的可靠性，但是性能上会有较大影响，一般适用于金融业务应用该模式较多</p></li><li><p>异步刷盘：利用 OS 的 PageCache，只要消息写入内存 PageCache 即可将成功的 ACK 返回给 Producer 端，降低了读写延迟，提高了 MQ 的性能和吞吐量。消息刷盘采用<strong>后台异步线程</strong>提交的方式进行，当内存里的消息量积累到一定程度时，触发写磁盘动作</p></li></ul><p>通过 Broker 配置文件里的 flushDiskType 参数设置采用什么方式，可以配置成 SYNC_FLUSH、ASYNC_FLUSH 中的一个</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-刷盘机制.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,168),b={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/design.md",target:"_blank",rel:"noopener noreferrer"},h=t('<hr><h3 id="集群设计" tabindex="-1"><a class="header-anchor" href="#集群设计" aria-hidden="true">#</a> 集群设计</h3><h4 id="集群模式" tabindex="-1"><a class="header-anchor" href="#集群模式" aria-hidden="true">#</a> 集群模式</h4><p>常用的以下几种模式：</p><ul><li><p>单 Master 模式：这种方式风险较大，一旦 Broker 重启或者宕机，会导致整个服务不可用</p></li><li><p>多 Master 模式：一个集群无 Slave，全是 Master</p><ul><li><p>优点：配置简单，单个 Master 宕机或重启维护对应用无影响，在磁盘配置为 RAID10 时，即使机器宕机不可恢复情况下，由于 RAID10 磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高</p></li><li><p>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响</p></li></ul></li><li><p>多 Master 多 Slave 模式（同步）：每个 Master 配置一个 Slave，有多对 Master-Slave，HA 采用<strong>同步双写</strong>方式，即只有主备都写成功，才向应用返回成功</p><ul><li>优点：数据与服务都无单点故障，Master 宕机情况下，消息无延迟，服务可用性与数据可用性都非常高</li><li>缺点：性能比异步复制略低（大约低 10% 左右），发送单个消息的 RT 略高，目前不能实现主节点宕机，备机自动切换为主机</li></ul></li><li><p>多 Master 多 Slave 模式（异步）：HA 采用异步复制的方式，会造成主备有短暂的消息延迟（毫秒级别）</p><ul><li>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，同时 Master 宕机后，消费者仍然可以从 Slave 消费，而且此过程对应用透明，不需要人工干预，性能同多 Master 模式几乎一样</li><li>缺点：Master 宕机，磁盘损坏情况下会丢失少量消息</li></ul></li></ul><hr><h4 id="集群架构" tabindex="-1"><a class="header-anchor" href="#集群架构" aria-hidden="true">#</a> 集群架构</h4><p>RocketMQ 网络部署特点：</p><ul><li><p>NameServer 是一个几乎<strong>无状态节点</strong>，节点之间相互独立，无任何信息同步</p></li><li><p>Broker 部署相对复杂，Broker 分为 Master 与 Slave，Master 可以部署多个，一个 Master 可以对应多个 Slave，但是一个 Slave 只能对应一个 Master，Master 与 Slave 的对应关系通过指定相同 BrokerName、不同 BrokerId 来定义，BrokerId 为 0 是 Master，非 0 表示 Slave。<strong>每个 Broker 与 NameServer 集群中的所有节点建立长连接</strong>，定时注册 Topic 信息到所有 NameServer</p><p>说明：部署架构上也支持一 Master 多 Slave，但只有 BrokerId=1 的从服务器才会参与消息的读负载（读写分离）</p></li><li><p>Producer 与 NameServer 集群中的其中<strong>一个节点（随机选择）建立长连接</strong>，定期从 NameServer 获取 Topic 路由信息，并向提供 Topic 服务的 Master 建立长连接，且定时向 Master <strong>发送心跳</strong>。Producer 完全无状态，可集群部署</p></li><li><p>Consumer 与 NameServer 集群中的其中一个节点（随机选择）建立长连接，定期从 NameServer 获取 Topic 路由信息，并向提供 Topic 服务的 Master、Slave 建立长连接，且定时向 Master、Slave 发送心跳</p><p>Consumer 既可以从 Master 订阅消息，也可以从 Slave 订阅消息，在向 Master 拉取消息时，Master 服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读 I/O），以及从服务器是否可读等因素建议下一次是从 Master 还是 Slave 拉取</p></li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-集群架构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10),f={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/architecture.md",target:"_blank",rel:"noopener noreferrer"},y=t('<hr><h4 id="高可用性" tabindex="-1"><a class="header-anchor" href="#高可用性" aria-hidden="true">#</a> 高可用性</h4><p>NameServer 节点是无状态的，且各个节点直接的数据是一致的，部分 NameServer 不可用也可以保证 MQ 服务正常运行</p><p>BrokerServer 的高可用通过 Master 和 Slave 的配合：</p><ul><li><p>Slave 只负责读，当 Master 不可用，对应的 Slave 仍能保证消息被正常消费</p></li><li><p>配置多组 Master-Slave 组，其他的 Master-Slave 组也会保证消息的正常发送和消费</p></li><li><p><strong>目前不支持把 Slave 自动转成 Master</strong>，需要手动停止 Slave 角色的 Broker，更改配置文件，用新的配置文件启动 Broker</p><p>所以需要配置多个 Master 保证可用性，否则一个 Master 挂了导致整体系统的写操作不可用</p></li></ul><p>生产端的高可用：在创建 Topic 的时候，把 Topic 的<strong>多个 Message Queue 创建在多个 Broker 组</strong>上（相同 Broker 名称，不同 brokerId 的机器），当一个 Broker 组的 Master 不可用后，其他组的 Master 仍然可用，Producer 仍然可以发送消息</p><p>消费端的高可用：在 Consumer 的配置文件中，并不需要设置是从 Master Broker 读还是从 Slave 读，当 Master 不可用或者繁忙的时候，Consumer 会被自动切换到从 Slave 读。有了自动切换的机制，当一个 Master 机器出现故障后，Consumer 仍然可以从 Slave 读取消息，不影响 Consumer 程序，达到了消费端的高可用性</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-高可用.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h4><p>如果一个 Broker 组有 Master 和 Slave，消息需要从 Master 复制到 Slave 上，有同步和异步两种复制方式：</p><ul><li><p>同步复制方式：Master 和 Slave 均写成功后才反馈给客户端写成功状态（写 Page Cache）。在同步复制方式下，如果 Master 出故障， Slave 上有全部的备份数据，容易恢复，但是同步复制会增大数据写入延迟，降低系统吞吐量</p></li><li><p>异步复制方式：只要 Master 写成功，即可反馈给客户端写成功状态，系统拥有较低的延迟和较高的吞吐量，但是如果 Master 出了故障，有些数据因为没有被写入 Slave，有可能会丢失</p></li></ul><p>同步复制和异步复制是通过 Broker 配置文件里的 brokerRole 参数进行设置的，可以设置成 ASYNC_MASTE、RSYNC_MASTER、SLAVE 三个值中的一个</p><p>一般把刷盘机制配置成 ASYNC_FLUSH，主从复制为 SYNC_MASTER，这样即使有一台机器出故障，仍然能保证数据不丢</p><p>RocketMQ 支持消息的高可靠，影响消息可靠性的几种情况：</p><ol><li>Broker 非正常关闭</li><li>Broker 异常 Crash</li><li>OS Crash</li><li>机器掉电，但是能立即恢复供电情况</li><li>机器无法开机（可能是 CPU、主板、内存等关键设备损坏）</li><li>磁盘设备损坏</li></ol><p>前四种情况都属于硬件资源可立即恢复情况，RocketMQ 在这四种情况下能保证消息不丢，或者丢失少量数据（依赖刷盘方式）</p><p>后两种属于单点故障，且无法恢复，一旦发生，在此单点上的消息全部丢失。RocketMQ 在这两种情况下，通过主从异步复制，可保证 99% 的消息不丢，但是仍然会有极少量的消息可能丢失。通过<strong>同步双写技术</strong>可以完全避免单点，但是会影响性能，适合对消息可靠性要求极高的场合，RocketMQ 从 3.0 版本开始支持同步双写</p><p>一般而言，我们会建议采取同步双写 + 异步刷盘的方式，在消息的可靠性和性能间有一个较好的平衡</p><hr><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h3><h4 id="生产端" tabindex="-1"><a class="header-anchor" href="#生产端" aria-hidden="true">#</a> 生产端</h4><p>RocketMQ 中的负载均衡可以分为 Producer 端发送消息时候的负载均衡和 Consumer 端订阅消息的负载均衡</p><p>Producer 端在发送消息时，会先根据 Topic 找到指定的 TopicPublishInfo，在获取了 TopicPublishInfo 路由信息后，RocketMQ 的客户端在默认方式调用 <code>selectOneMessageQueue()</code> 方法从 TopicPublishInfo 中的 messageQueueList 中选择一个队列 MessageQueue 进行发送消息</p><p>默认会<strong>轮询所有的 Message Queue 发送</strong>，以让消息平均落在不同的 queue 上，而由于 queue可以散落在不同的 Broker，所以消息就发送到不同的 Broker 下，图中箭头线条上的标号代表顺序，发布方会把第一条消息发送至 Queue 0，然后第二条消息发送至 Queue 1，以此类推：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-producer负载均衡.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>容错策略均在 MQFaultStrategy 这个类中定义，有一个 sendLatencyFaultEnable 开关变量：</p><ul><li>如果开启，会在<strong>随机（只有初始化索引变量时才随机，正常都是递增）递增取模</strong>的基础上，再过滤掉 not available 的 Broker</li><li>如果关闭，采用随机递增取模的方式选择一个队列（MessageQueue）来发送消息</li></ul><p>LatencyFaultTolerance 机制是实现消息发送高可用的核心关键所在，对之前失败的，按一定的时间做退避。例如上次请求的 latency 超过 550Lms，就退避 3000Lms；超过 1000L，就退避 60000L</p><hr><h4 id="消费端" tabindex="-1"><a class="header-anchor" href="#消费端" aria-hidden="true">#</a> 消费端</h4><p>在 RocketMQ 中，Consumer 端的两种消费模式（Push/Pull）都是基于拉模式来获取消息的，而在 Push 模式只是对 Pull 模式的一种封装，其本质实现为消息拉取线程在从服务器拉取到一批消息，提交到消息消费线程池后，又继续向服务器再次尝试拉取消息，如果未拉取到消息，则延迟一下又继续拉取</p><p>在两种基于拉模式的消费方式（Push/Pull）中，均需要 Consumer 端在知道从 Broker 端的哪一个消息队列中去获取消息，所以在 Consumer 端来做负载均衡，即 Broker 端中多个 MessageQueue 分配给同一个 Consumer Group 中的哪些 Consumer 消费</p><ul><li><p>广播模式下要求一条消息需要投递到一个消费组下面所有的消费者实例，所以不存在负载均衡，在实现上，Consumer 分配 queue 时，所有 Consumer 都分到所有的 queue。</p></li><li><p>在集群消费模式下，每条消息只需要投递到订阅这个 Topic 的 Consumer Group 下的一个实例即可，RocketMQ 采用主动拉取的方式拉取并消费消息，在拉取的时候需要明确指定拉取哪一条 Message Queue</p></li></ul><p>集群模式下，每当消费者实例的数量有变更，都会触发一次所有实例的负载均衡，这时候会按照 queue 的数量和实例的数量平均分配 queue 给每个实例。默认的分配算法是 AllocateMessageQueueAveragely：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-平均队列分配.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还有一种平均的算法是 AllocateMessageQueueAveragelyByCircle，以环状轮流均分 queue 的形式：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-平均队列轮流分配.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>集群模式下，<strong>queue 都是只允许分配一个实例</strong>，如果多个实例同时消费一个 queue 的消息，由于拉取哪些消息是 Consumer 主动控制的，会导致同一个消息在不同的实例下被消费多次</p><p>通过增加 Consumer 实例去分摊 queue 的消费，可以起到水平扩展的消费能力的作用。而当有实例下线时，会重新触发负载均衡，这时候原来分配到的 queue 将分配到其他实例上继续消费。但是如果 Consumer 实例的数量比 Message Queue 的总数量还多的话，多出来的 Consumer 实例将无法分到 queue，也就无法消费到消息，也就无法起到分摊负载的作用了，所以需要<strong>控制让 queue 的总数量大于等于 Consumer 的数量</strong></p><hr><h4 id="原理解析-3" tabindex="-1"><a class="header-anchor" href="#原理解析-3" aria-hidden="true">#</a> 原理解析</h4><p>在 Consumer 启动后，会通过定时任务不断地向 RocketMQ 集群中的所有 Broker 实例发送心跳包。Broker 端在收到 Consumer 的心跳消息后，会将它维护在 ConsumerManager 的本地缓存变量 consumerTable，同时并将封装后的客户端网络通道信息保存在本地缓存变量 channelInfoTable 中，为 Consumer 端的负载均衡提供可以依据的元数据信息</p><p>Consumer 端实现负载均衡的核心类 <strong>RebalanceImpl</strong></p><p>在 Consumer 实例的启动流程中的会启动 MQClientInstance 实例，完成负载均衡服务线程 RebalanceService 的启动（<strong>每隔 20s 执行一次</strong>负载均衡），RebalanceService 线程的 run() 方法最终调用的是 RebalanceImpl 类的 rebalanceByTopic() 方法，该方法是实现 Consumer 端负载均衡的核心。rebalanceByTopic() 方法会根据广播模式还是集群模式做不同的逻辑处理。主要看集群模式：</p><ul><li><p>从 rebalanceImpl 实例的本地缓存变量 topicSubscribeInfoTable 中，获取该 Topic 主题下的消息消费队列集合 mqSet</p></li><li><p>根据 Topic 和 consumerGroup 为参数调用 <code>mQClientFactory.findConsumerIdList()</code> 方法向 Broker 端发送获取该消费组下消费者 ID 列表的 RPC 通信请求（Broker 端基于前面 Consumer 端上报的心跳包数据而构建的 consumerTable 做出响应返回，业务请求码 <code>GET_CONSUMER_LIST_BY_GROUP</code>）</p></li><li><p>先对 Topic 下的消息消费队列、消费者 ID 排序，然后用消息队列分配策略算法（默认是消息队列的平均分配算法），计算出待拉取的消息队列。平均分配算法类似于分页的算法，将所有 MessageQueue 排好序类似于记录，将所有消费端 Consumer 排好序类似页数，并求出每一页需要包含的平均 size 和每个页面记录的范围 range，最后遍历整个 range 而计算出当前 Consumer 端应该分配到的记录（这里即为 MessageQueue）</p></li><li><p>调用 updateProcessQueueTableInRebalance() 方法，先将分配到的消息队列集合 mqSet 与 processQueueTable 做一个过滤比对</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-负载均衡重新平衡算法.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>processQueueTable 标注的红色部分，表示与分配到的消息队列集合 mqSet 互不包含，将这些队列设置 Dropped 属性为 true，然后查看这些队列是否可以移除出 processQueueTable 缓存变量。具体执行 removeUnnecessaryMessageQueue() 方法，即每隔 1s 查看是否可以获取当前消费处理队列的锁，拿到的话返回 true；如果等待 1s 后，仍然拿不到当前消费处理队列的锁则返回 false。如果返回 true，则从 processQueueTable 缓存变量中移除对应的 Entry</p></li><li><p>processQueueTable 的绿色部分，表示与分配到的消息队列集合 mqSet 的交集，判断该 ProcessQueue 是否已经过期了，在 Pull 模式的不用管，如果是 Push 模式的，设置 Dropped 属性为 true，并且调用 removeUnnecessaryMessageQueue() 方法，像上面一样尝试移除 Entry</p></li><li><p>为过滤后的消息队列集合 mqSet 中每个 MessageQueue 创建 ProcessQueue 对象存入 RebalanceImpl 的 processQueueTable 队列中（其中调用 RebalanceImpl 实例的 <code>computePullFromWhere(MessageQueue mq)</code> 方法获取该 MessageQueue 对象的下一个进度消费值 offset，随后填充至接下来要创建的 pullRequest 对象属性中），并<strong>创建拉取请求对象</strong> pullRequest 添加到拉取列表 pullRequestList 中，最后执行 dispatchPullRequest() 方法，将 Pull 消息的请求对象 PullRequest 放入 PullMessageService 服务线程的<strong>阻塞队列</strong> pullRequestQueue 中，待该服务线程取出后向 Broker 端发起 Pull 消息的请求</p><p>对比下 RebalancePushImpl 和 RebalancePullImpl 两个实现类的 dispatchPullRequest() 方法，RebalancePullImpl 类里面的该方法为空</p></li></ul><p>消息消费队列在<strong>同一消费组不同消费者之间的负载均衡</strong>，其核心设计理念是在<strong>一个消息消费队列在同一时间只允许被同一消费组内的一个消费者消费，一个消息消费者能同时消费多个消息队列</strong></p><hr><h3 id="消息查询" tabindex="-1"><a class="header-anchor" href="#消息查询" aria-hidden="true">#</a> 消息查询</h3><h4 id="查询方式" tabindex="-1"><a class="header-anchor" href="#查询方式" aria-hidden="true">#</a> 查询方式</h4><p>RocketMQ 支持按照两种维度进行消息查询：按照 Message ID 查询消息、按照 Message Key 查询消息</p><ul><li><p>RocketMQ 中的 MessageID 的长度总共有 16 字节，其中包含了消息存储主机地址（IP 地址和端口），消息 Commit Log offset</p><p>实现方式：Client 端从 MessageID 中解析出 Broker 的地址（IP 地址和端口）和 Commit Log 的偏移地址，封装成一个 RPC 请求后通过 Remoting 通信层发送（业务请求码 VIEW_MESSAGE_BY_ID）。Broker 端走的是 QueryMessageProcessor，读取消息的过程用其中的 CommitLog 的 offset 和 size 去 CommitLog 中找到真正的记录并解析成一个完整的消息返回</p></li><li><p>按照 Message Key 查询消息，IndexFile 索引文件为提供了通过 Message Key 查询消息的服务</p><p>实现方式：通过 Broker 端的 QueryMessageProcessor 业务处理器来查询，读取消息的过程用 <strong>Topic 和 Key</strong> 找到 IndexFile 索引文件中的一条记录，根据其中的 CommitLog Offset 从 CommitLog 文件中读取消息的实体内容</p></li></ul><hr><h4 id="索引机制" tabindex="-1"><a class="header-anchor" href="#索引机制" aria-hidden="true">#</a> 索引机制</h4><p>RocketMQ 的索引文件逻辑结构，类似 JDK 中 HashMap 的实现，具体结构如下：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-IndexFile索引文件.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>IndexFile 文件的存储在 <code>$HOME\\store\\index${fileName}</code>，文件名 fileName 是以创建时的时间戳命名，文件大小是固定的，等于 <code>40+500W*4+2000W*20= 420000040</code> 个字节大小。如果消息的 properties 中设置了 UNIQ_KEY 这个属性，就用 <code>topic + “#” + UNIQ_KEY</code> 作为 key 来做写入操作；如果消息设置了 KEYS 属性（多个 KEY 以空格分隔），也会用 <code>topic + “#” + KEY</code> 来做索引</p><p>整个 Index File 的结构如图，40 Byte 的 Header 用于保存一些总的统计信息，<code>4*500W</code> 的 Slot Table 并不保存真正的索引数据，而是保存每个槽位对应的单向链表的<strong>头指针</strong>，即一个 Index File 可以保存 2000W 个索引，<code>20*2000W</code> 是<strong>真正的索引数据</strong></p><p>索引数据包含了 Key Hash/CommitLog Offset/Timestamp/NextIndex offset 这四个字段，一共 20 Byte</p><ul><li>NextIndex offset 即前面读出来的 slotValue，如果有 hash 冲突，就可以用这个字段将所有冲突的索引用链表的方式串起来</li><li>Timestamp 记录的是消息 storeTimestamp 之间的差，并不是一个绝对的时间</li></ul>',60),w={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/design.md",target:"_blank",rel:"noopener noreferrer"},S=t(`<hr><h3 id="消息重试" tabindex="-1"><a class="header-anchor" href="#消息重试" aria-hidden="true">#</a> 消息重试</h3><h4 id="消息重投" tabindex="-1"><a class="header-anchor" href="#消息重投" aria-hidden="true">#</a> 消息重投</h4><p>生产者在发送消息时，同步消息和异步消息失败会重投，oneway 没有任何保证。消息重投保证消息尽可能发送成功、不丢失，但当出现消息量大、网络抖动时，可能会造成消息重复；生产者主动重发、Consumer 负载变化也会导致重复消息</p><p>如下方法可以设置消息重投策略：</p><ul><li>retryTimesWhenSendFailed：同步发送失败重投次数，默认为 2，因此生产者会最多尝试发送 retryTimesWhenSendFailed + 1 次。不会选择上次失败的 Broker，尝试向其他 Broker 发送，<strong>最大程度保证消息不丢</strong>。超过重投次数抛出异常，由客户端保证消息不丢。当出现 RemotingException、MQClientException 和部分 MQBrokerException 时会重投</li><li>retryTimesWhenSendAsyncFailed：异步发送失败重试次数，异步重试不会选择其他 Broker，仅在同一个 Broker 上做重试，<strong>不保证消息不丢</strong></li><li>retryAnotherBrokerWhenNotStoreOK：消息刷盘（主或备）超时或 slave 不可用（返回状态非 SEND_OK），是否尝试发送到其他 Broker，默认 false，十分重要消息可以开启</li></ul><p>注意点：</p><ul><li>如果同步模式发送失败，则选择到下一个 Broker，如果异步模式发送失败，则<strong>只会在当前 Broker 进行重试</strong></li><li>发送消息超时时间默认 3000 毫秒，就不会再尝试重试</li></ul><hr><h4 id="消息重试-1" tabindex="-1"><a class="header-anchor" href="#消息重试-1" aria-hidden="true">#</a> 消息重试</h4><p>Consumer 消费消息失败后，提供了一种重试机制，令消息再消费一次。Consumer 消费消息失败可以认为有以下几种情况：</p><ul><li>由于消息本身的原因，例如反序列化失败，消息数据本身无法处理等。这种错误通常需要跳过这条消息，再消费其它消息，而这条失败的消息即使立刻重试消费，99% 也不成功，所以需要提供一种定时重试机制，即过 10 秒后再重试</li><li>由于依赖的下游应用服务不可用，例如 DB 连接不可用，外系统网络不可达等。这种情况即使跳过当前失败的消息，消费其他消息同样也会报错，这种情况建议应用 sleep 30s，再消费下一条消息，这样可以减轻 Broker 重试消息的压力</li></ul><p>RocketMQ 会为每个消费组都设置一个 Topic 名称为 <code>%RETRY%+consumerGroup</code> 的重试队列（这个 Topic 的重试队列是<strong>针对消费组</strong>，而不是针对每个 Topic 设置的），用于暂时保存因为各种异常而导致 Consumer 端无法消费的消息</p><ul><li><p>顺序消息的重试，当消费者消费消息失败后，消息队列 RocketMQ 会自动不断进行消息重试（每次间隔时间为 1 秒），这时应用会出现消息消费被阻塞的情况。所以在使用顺序消息时，必须保证应用能够及时监控并处理消费失败的情况，避免阻塞现象的发生</p></li><li><p>无序消息（普通、定时、延时、事务消息）的重试，可以通过设置返回状态达到消息重试的结果。无序消息的重试只针对集群消费方式生效，广播方式不提供失败重试特性，即消费失败后，失败消息不再重试，继续消费新的消息</p></li></ul><p><strong>无序消息情况下</strong>，因为异常恢复需要一些时间，会为重试队列设置多个重试级别，每个重试级别都有对应的重新投递延时，重试次数越多投递延时就越大。RocketMQ 对于重试消息的处理是先保存至 Topic 名称为 <code>SCHEDULE_TOPIC_XXXX</code> 的延迟队列中，后台定时任务<strong>按照对应的时间进行 Delay 后</strong>重新保存至 <code>%RETRY%+consumerGroup</code> 的重试队列中</p><p>消息队列 RocketMQ 默认允许每条消息最多重试 16 次，每次重试的间隔时间如下表示：</p><table><thead><tr><th style="text-align:center;">第几次重试</th><th style="text-align:center;">与上次重试的间隔时间</th><th style="text-align:center;">第几次重试</th><th style="text-align:center;">与上次重试的间隔时间</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">10 秒</td><td style="text-align:center;">9</td><td style="text-align:center;">7 分钟</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">30 秒</td><td style="text-align:center;">10</td><td style="text-align:center;">8 分钟</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">1 分钟</td><td style="text-align:center;">11</td><td style="text-align:center;">9 分钟</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">2 分钟</td><td style="text-align:center;">12</td><td style="text-align:center;">10 分钟</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">3 分钟</td><td style="text-align:center;">13</td><td style="text-align:center;">20 分钟</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">4 分钟</td><td style="text-align:center;">14</td><td style="text-align:center;">30 分钟</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">5 分钟</td><td style="text-align:center;">15</td><td style="text-align:center;">1 小时</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">6 分钟</td><td style="text-align:center;">16</td><td style="text-align:center;">2 小时</td></tr></tbody></table><p>如果消息重试 16 次后仍然失败，消息将<strong>不再投递</strong>，如果严格按照上述重试时间间隔计算，某条消息在一直消费失败的前提下，将会在接下来的 4 小时 46 分钟之内进行 16 次重试，超过这个时间范围消息将不再重试投递</p><p>时间间隔不支持自定义配置，最大重试次数可通过自定义参数 <code>MaxReconsumeTimes</code> 取值进行配置，若配置超过 16 次，则超过的间隔时间均为 2 小时</p><p>说明：一条消息无论重试多少次，<strong>消息的 Message ID 是不会改变的</strong></p><hr><h4 id="重试操作" tabindex="-1"><a class="header-anchor" href="#重试操作" aria-hidden="true">#</a> 重试操作</h4><p>集群消费方式下，消息消费失败后期望消息重试，需要在消息监听器接口的实现中明确进行配置（三种方式任选一种）：</p><ul><li>返回 Action.ReconsumeLater （推荐）</li><li>返回 null</li><li>抛出异常</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Action</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">ConsumeContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理消息</span>
        <span class="token function">doConsumeMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//方式1：返回 Action.ReconsumeLater，消息将重试</span>
        <span class="token keyword">return</span> <span class="token class-name">Action<span class="token punctuation">.</span>ReconsumeLater</span><span class="token punctuation">;</span>
        <span class="token comment">//方式2：返回 null，消息将重试</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//方式3：直接抛出异常， 消息将重试</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer Message exceotion&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>集群消费方式下，消息失败后期望消息不重试，需要捕获消费逻辑中可能抛出的异常，最终返回 Action.CommitMessage，此后这条消息将不会再重试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Action</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">ConsumeContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">doConsumeMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 捕获消费逻辑中的所有异常，并返回 Action.CommitMessage;</span>
            <span class="token keyword">return</span> <span class="token class-name">Action<span class="token punctuation">.</span>CommitMessage</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//消息处理正常，直接返回 Action.CommitMessage;</span>
        <span class="token keyword">return</span> <span class="token class-name">Action<span class="token punctuation">.</span>CommitMessage</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义消息最大重试次数，RocketMQ 允许 Consumer 启动的时候设置最大重试次数，重试时间间隔将按照如下策略：</p><ul><li>最大重试次数小于等于 16 次，则重试时间间隔同上表描述</li><li>最大重试次数大于 16 次，超过 16 次的重试时间间隔均为每次 2 小时</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 配置对应 Group ID 的最大消息重试次数为 20 次</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst<span class="token punctuation">.</span>MaxReconsumeTimes</span><span class="token punctuation">,</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Consumer</span> consumer <span class="token operator">=</span> <span class="token class-name">ONSFactory</span><span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>消息最大重试次数的设置对相同 Group ID 下的所有 Consumer 实例有效。例如只对相同 Group ID 下两个 Consumer 实例中的其中一个设置了 MaxReconsumeTimes，那么该配置对两个 Consumer 实例均生效</li><li>配置采用覆盖的方式生效，即最后启动的 Consumer 实例会覆盖之前的启动实例的配置</li></ul><p>消费者收到消息后，可按照如下方式获取消息的重试次数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Action</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">ConsumeContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取消息的重试次数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getReconsumeTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Action<span class="token punctuation">.</span>CommitMessage</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列" aria-hidden="true">#</a> 死信队列</h3><p>正常情况下无法被消费的消息称为死信消息（Dead-Letter Message），存储死信消息的特殊队列称为死信队列（Dead-Letter Queue）</p><p>当一条消息初次消费失败，消息队列 RocketMQ 会自动进行消息重试，达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时 RocketMQ 不会立刻将消息丢弃，而是将其发送到该消费者对应的死信队列中</p><p>死信消息具有以下特性：</p><ul><li>不会再被消费者正常消费</li><li>有效期与正常消息相同，均为 3 天，3 天后会被自动删除，所以请在死信消息产生后的 3 天内及时处理</li></ul><p>死信队列具有以下特性：</p><ul><li><strong>一个死信队列对应一个 Group ID， 而不是对应单个消费者实例</strong></li><li>如果一个 Group ID 未产生死信消息，消息队列 RocketMQ 不会为其创建相应的死信队列</li><li>一个死信队列包含了对应 Group ID 产生的所有死信消息，不论该消息属于哪个 Topic</li></ul><p>一条消息进入死信队列，需要排查可疑因素并解决问题后，可以在消息队列 RocketMQ 控制台重新发送该消息，让消费者重新消费一次</p><hr><h3 id="高可靠性" tabindex="-1"><a class="header-anchor" href="#高可靠性" aria-hidden="true">#</a> 高可靠性</h3><p>RocketMQ 消息丢失可能发生在以下三个阶段：</p><ul><li>生产阶段：消息在 Producer 发送端创建出来，经过网络传输发送到 Broker 存储端 <ul><li>生产者得到一个成功的响应，就可以认为消息的存储和消息的消费都是可靠的</li><li>消息重投机制</li></ul></li><li>存储阶段：消息在 Broker 端存储，如果是主备或者多副本，消息会在这个阶段被复制到其他的节点或者副本上 <ul><li>单点：刷盘机制（同步或异步）</li><li>主从：消息同步机制（异步复制或同步双写，主从复制章节详解）</li><li>过期删除：操作 CommitLog、ConsumeQueue 文件是基于文件内存映射机制，并且在启动的时候会将所有的文件加载，为了避免内存与磁盘的浪费，让磁盘能够循环利用，防止磁盘不足导致消息无法写入等引入了文件过期删除机制。最终使得磁盘水位保持在一定水平，最终保证新写入消息的可靠存储</li></ul></li><li>消费阶段：Consumer 消费端从 Broker存储端拉取消息，经过网络传输发送到 Consumer 消费端上 <ul><li>消息重试机制来最大限度的保证消息的消费</li><li>消费失败的进行消息回退，重试次数过多的消息放入死信队列</li></ul></li></ul>`,47),C={href:"https://cdn.modb.pro/db/394751",target:"_blank",rel:"noopener noreferrer"},M=t(`<hr><h3 id="幂等消费" tabindex="-1"><a class="header-anchor" href="#幂等消费" aria-hidden="true">#</a> 幂等消费</h3><p>消息队列 RocketMQ 消费者在接收到消息以后，需要根据业务上的唯一 Key 对消息做幂等处理</p><p>At least Once 机制保证消息不丢失，但是可能会造成消息重复，RocketMQ 中无法避免消息重复（Exactly-Once），在互联网应用中，尤其在网络不稳定的情况下，几种情况：</p><ul><li><p>发送时消息重复：当一条消息已被成功发送到服务端并完成持久化，此时出现了网络闪断或客户端宕机，导致服务端对客户端应答失败。此时生产者意识到消息发送失败并尝试再次发送消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息</p></li><li><p>投递时消息重复：消息消费的场景下，消息已投递到消费者并完成业务处理，当客户端给服务端反馈应答的时候网络闪断。为了保证消息至少被消费一次，消息队列 RocketMQ 的服务端将在网络恢复后再次尝试投递之前已被处理过的消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息</p></li><li><p>负载均衡时消息重复：当消息队列 RocketMQ 的 Broker 或客户端重启、扩容或缩容时，会触发 Rebalance，此时消费者可能会收到重复消息</p></li></ul><p>处理方式：</p><ul><li><p>因为 Message ID 有可能出现冲突（重复）的情况，所以真正安全的幂等处理，不建议以 Message ID 作为处理依据，最好的方式是以业务唯一标识作为幂等处理的关键依据，而业务的唯一标识可以通过消息 Key 进行设置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span><span class="token string">&quot;ORDERID_100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>订阅方收到消息时可以根据消息的 Key 进行幂等处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;ons_test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Action</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">ConsumeContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 根据业务唯一标识的 key 做幂等处理</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h3><p>生产者流控，因为 Broker 处理能力达到瓶颈；消费者流控，因为消费能力达到瓶颈</p><p>生产者流控：</p><ul><li>CommitLog 文件被锁时间超过 osPageCacheBusyTimeOutMills 时，参数默认为 1000ms，返回流控</li><li>如果开启 transientStorePoolEnable == true，且 Broker 为异步刷盘的主机，且 transientStorePool 中资源不足，拒绝当前 send 请求，返回流控</li><li>Broker 每隔 10ms 检查 send 请求队列头部请求的等待时间，如果超过 waitTimeMillsInSendQueue，默认 200ms，拒绝当前 send 请求，返回流控。</li><li>Broker 通过拒绝 send 请求方式实现流量控制</li></ul><p>注意：生产者流控，不会尝试消息重投</p><p>消费者流控：</p><ul><li>消费者本地缓存消息数超过 pullThresholdForQueue 时，默认 1000</li><li>消费者本地缓存消息大小超过 pullThresholdSizeForQueue 时，默认 100MB</li><li>消费者本地缓存消息跨度超过 consumeConcurrentlyMaxSpan 时，默认 2000</li></ul><p>消费者流控的结果是降低拉取频率</p><hr><h2 id="原理解析-4" tabindex="-1"><a class="header-anchor" href="#原理解析-4" aria-hidden="true">#</a> 原理解析</h2><h3 id="namesrv" tabindex="-1"><a class="header-anchor" href="#namesrv" aria-hidden="true">#</a> Namesrv</h3><h4 id="服务启动" tabindex="-1"><a class="header-anchor" href="#服务启动" aria-hidden="true">#</a> 服务启动</h4><h5 id="启动方法" tabindex="-1"><a class="header-anchor" href="#启动方法" aria-hidden="true">#</a> 启动方法</h5><p>NamesrvStartup 类中有 Namesrv 服务的启动方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果启动时 使用 -c  -p  设置参数了，这些参数存储在 args 中</span>
    <span class="token function">main0</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">NamesrvController</span> <span class="token function">main0</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 namesrv 控制器，用来初始化 namesrv 启动 namesrv 关闭 namesrv</span>
        <span class="token class-name">NamesrvController</span> controller <span class="token operator">=</span> <span class="token function">createNamesrvController</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 启动 controller</span>
        <span class="token function">start</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> controller<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 出现异常，停止系统</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NamesrvStartup#createNamesrvController：读取配置信息，初始化 Namesrv 控制器</p><ul><li><p><code>ServerUtil.parseCmdLine(&quot;mqnamesrv&quot;, args, buildCommandlineOptions(options)，..)</code>：解析启动时的参数信息</p></li><li><p><code>namesrvConfig = new NamesrvConfig()</code>：创建 Namesrv 配置对象</p><ul><li><code>private String rocketmqHome</code>：获取 ROCKETMQ_HOME 值</li><li><code>private boolean orderMessageEnable = false</code>：<strong>顺序消息</strong>功能是否开启</li></ul></li><li><p><code>nettyServerConfig = new NettyServerConfig()</code>：Netty 的服务器配置对象</p></li><li><p><code>nettyServerConfig.setListenPort(9876)</code>：Namesrv 服务器的<strong>监听端口设置为 9876</strong></p></li><li><p><code>if (commandLine.hasOption(&#39;c&#39;))</code>：读取命令行 -c 的参数值</p><p><code>in = new BufferedInputStream(new FileInputStream(file))</code>：读取指定目录的配置文件</p><p><code>properties.load(in)</code>：将配置文件信息加载到 properties 对象，相关属性会复写到 Namesrv 配置和 Netty 配置对象</p><p><code>namesrvConfig.setConfigStorePath(file)</code>：将配置文件的路径保存到配置保存字段</p></li><li><p><code>if (null == namesrvConfig.getRocketmqHome())</code>：检查 ROCKETMQ_HOME 配置是否是空，是空就报错</p></li><li><p><code>lc = (LoggerContext) LoggerFactory.getILoggerFactory()</code>：创建日志对象</p></li><li><p><code>controller = new NamesrvController(namesrvConfig, nettyServerConfig)</code>：<strong>创建 Namesrv 控制器</strong></p></li></ul><p>NamesrvStartup#start：启动 Namesrv 控制器</p><ul><li><p><code>boolean initResult = controller.initialize()</code>：初始化方法</p></li><li><p><code> Runtime.getRuntime().addShutdownHook(new ShutdownHookThread())</code>：JVM HOOK 平滑关闭的逻辑， 当 JVM 被关闭时，主动调用 controller.shutdown() 方法，让服务器平滑关机</p></li><li><p><code>controller.start()</code>：启动服务器</p></li></ul>`,27),x={href:"https://space.bilibili.com/457326371",target:"_blank",rel:"noopener noreferrer"},j=t(`<hr><h5 id="控制器类" tabindex="-1"><a class="header-anchor" href="#控制器类" aria-hidden="true">#</a> 控制器类</h5><p>NamesrvController 用来初始化和启动 Namesrv 服务器</p><ul><li><p>成员变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService<span class="token punctuation">;</span>	<span class="token comment">// 调度线程池，用来执行定时任务</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RouteInfoManager</span> routeInfoManager<span class="token punctuation">;</span>					<span class="token comment">// 管理【路由信息】的对象</span>
<span class="token keyword">private</span> <span class="token class-name">RemotingServer</span> remotingServer<span class="token punctuation">;</span>								<span class="token comment">// 【网络层】封装对象</span>
<span class="token keyword">private</span> <span class="token class-name">BrokerHousekeepingService</span> brokerHousekeepingService<span class="token punctuation">;</span>		<span class="token comment">// 用于监听 channel 状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>private ExecutorService remotingExecutor</code>：业务线程池，<strong>netty 线程解析报文成 RemotingCommand 对象，然后将该对象交给业务线程池再继续处理</strong></p></li><li><p>初始化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加载本地kv配置（我还不明白 kv 配置是啥）</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>kvConfigManager<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建网络服务器对象，【将 netty 的配置和监听器传入】</span>
    <span class="token comment">// 监听器监听 channel 状态的改变，会向事件队列发起事件，最后交由 service 处理</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerHousekeepingService<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 【创建业务线程池，默认线程数 8】</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerWorkerThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 注册协议处理器（缺省协议处理器），【处理器是 DefaultRequestProcessor】，线程使用的是刚创建的业务的线程池</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定时任务1：每 10 秒钟检查 broker 存活状态，将 IDLE 状态的 broker 移除【扫描机制，心跳检测】</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 扫描 brokerLiveTable 表，将两小时没有活动的 broker 关闭，</span>
            <span class="token comment">// 通过 next.getKey() 获取 broker 的地址，然后【关闭服务器与broker物理节点的 channel】</span>
            <span class="token class-name">NamesrvController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>routeInfoManager<span class="token punctuation">.</span><span class="token function">scanNotActiveBroker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定时任务2：每 10 分钟打印一遍 kv 配置。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">NamesrvController</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>kvConfigManager<span class="token punctuation">.</span><span class="token function">printAllPeriodically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务器网络层启动。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fileWatchService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="网络通信" tabindex="-1"><a class="header-anchor" href="#网络通信" aria-hidden="true">#</a> 网络通信</h4><h5 id="通信原理" tabindex="-1"><a class="header-anchor" href="#通信原理" aria-hidden="true">#</a> 通信原理</h5><p>RocketMQ 的 RPC 通信采用 Netty 组件作为底层通信库，同样也遵循了 Reactor 多线程模型，NettyRemotingServer 类负责框架的通信服务，同时又在这之上做了一些扩展和优化</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-Reactor设计.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>RocketMQ 基于 NettyRemotingServer 的 Reactor 多线程模型：</p><ul><li><p>一个 Reactor 主线程（eventLoopGroupBoss）负责监听 TCP 网络连接请求，建立好连接创建 SocketChannel（RocketMQ 会自动根据 OS 的类型选择 NIO 和 Epoll，也可以通过参数配置），并注册到 Selector 上，然后监听真正的网络数据</p></li><li><p>拿到网络数据交给 Worker 线程池（eventLoopGroupSelector，默认设置为 3），在真正执行业务逻辑之前需要进行 SSL 验证、编解码、空闲检查、网络连接管理，这些工作交给 defaultEventExecutorGroup（默认设置为 8）去做</p></li><li><p>处理业务操作放在业务线程池中执行，根据 RomotingCommand 的<strong>业务请求码 code</strong> 去 processorTable 这个本地缓存变量中找到对应的 processor，封装成 task 任务提交给对应的 processor 处理线程池来执行（sendMessageExecutor，以发送消息为例）</p></li><li><p>从入口到业务逻辑的几个步骤中线程池一直再增加，这跟每一步逻辑复杂性相关，越复杂，需要的并发通道越宽</p></li></ul><table><thead><tr><th>线程数</th><th>线程名</th><th>线程具体说明</th></tr></thead><tbody><tr><td>1</td><td>NettyBoss_%d</td><td>Reactor 主线程</td></tr><tr><td>N</td><td>NettyServerEPOLLSelector_%d_%d</td><td>Reactor 线程池</td></tr><tr><td>M1</td><td>NettyServerCodecThread_%d</td><td>Worker 线程池</td></tr><tr><td>M2</td><td>RemotingExecutorThread_%d</td><td>业务 processor 处理线程池</td></tr></tbody></table><p>RocketMQ 的异步通信流程：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-异步通信流程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><mark>todo：后期对 Netty 有了更深的认知后会进行扩充，现在暂时 copy 官方文档</mark></p>`,15),R={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/design.md#2-%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},T=t(`<hr><h5 id="成员属性" tabindex="-1"><a class="header-anchor" href="#成员属性" aria-hidden="true">#</a> 成员属性</h5><p>NettyRemotingServer 类成员变量：</p><ul><li><p>服务器相关属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerBootstrap</span> serverBootstrap<span class="token punctuation">;</span>				<span class="token comment">// netty 服务端启动对象</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventLoopGroup</span> eventLoopGroupSelector<span class="token punctuation">;</span>		<span class="token comment">// netty worker 组线程池，【默认 3 个线程】</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventLoopGroup</span> eventLoopGroupBoss<span class="token punctuation">;</span>			<span class="token comment">// netty boss 组线程池，【一般是 1 个线程】</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">NettyServerConfig</span> nettyServerConfig<span class="token punctuation">;</span>			<span class="token comment">// netty 服务端网络配置</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>										<span class="token comment">// 服务器绑定的端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>公共线程池：注册处理器时如果未指定线程池，则业务处理使用公共线程池，线程数量默认是 4</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> publicExecutor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>事件监听器：Nameserver 使用 BrokerHouseKeepingService，Broker 使用 ClientHouseKeepingService</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChannelEventListener</span> channelEventListener<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>事件处理线程池：默认是 8</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">DefaultEventExecutorGroup</span> defaultEventExecutorGroup<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>定时器：执行循环任务，并且将定时器线程设置为守护线程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token string">&quot;ServerHouseKeepingService&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>处理器：多个 Channel 共享的处理器 Handler，多个通道使用同一个对象</p></li><li><p>Netty 配置对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerConfig</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务端启动时监听的端口号</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> listenPort <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>
    <span class="token comment">// 【业务线程池】 线程数量</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverWorkerThreads <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据该值创建 remotingServer 内部的一个 publicExecutor</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverCallbackExecutorThreads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// netty 【worker】线程数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverSelectorThreads <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token comment">// 【单向访问】时的并发限制</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverOnewaySemaphoreValue <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>
    <span class="token comment">// 【异步访问】时的并发限制</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverAsyncSemaphoreValue <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
    <span class="token comment">// channel 最大的空闲存活时间 默认是 2min</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverChannelMaxIdleTimeSeconds <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送缓冲区大小 65535</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverSocketSndBufSize <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>socketSndbufSize<span class="token punctuation">;</span>
    <span class="token comment">// 接收缓冲区大小 65535</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverSocketRcvBufSize <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>socketRcvbufSize<span class="token punctuation">;</span>
    <span class="token comment">// 是否启用 netty 内存池 默认开启</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> serverPooledByteBufAllocatorEnable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">// 默认 linux 会启用 【epoll】</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useEpollNativeSelector <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>构造方法：</p><ul><li><p>无监听器构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NettyServerConfig</span> nettyServerConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>有参构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NettyRemotingServer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NettyServerConfig</span> nettyServerConfig<span class="token punctuation">,</span>
                           <span class="token keyword">final</span> <span class="token class-name">ChannelEventListener</span> channelEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务器对客户端主动发起请求时并发限制。【单向请求和异步请求】的并发限制</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerOnewaySemaphoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerAsyncSemaphoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Netty 的启动器，负责组装 netty 组件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 成员变量的赋值</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig <span class="token operator">=</span> nettyServerConfig<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>channelEventListener <span class="token operator">=</span> channelEventListener<span class="token punctuation">;</span>

    <span class="token comment">// 公共线程池的线程数量，默认给的0，这里最终修改为4.</span>
    <span class="token keyword">int</span> publicThreadNums <span class="token operator">=</span> nettyServerConfig<span class="token punctuation">.</span><span class="token function">getServerCallbackExecutorThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>publicThreadNums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        publicThreadNums <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建公共线程池，指定线程工厂，设置线程名称前缀：NettyServerPublicExecutor_[数字]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>publicExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>publicThreadNums<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建两个 netty 的线程组，一个是boss组，一个是worker组，【linux 系统默认启用 epoll】</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useEpoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
	<span class="token comment">// SSL 相关</span>
    <span class="token function">loadSslContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="启动方法-1" tabindex="-1"><a class="header-anchor" href="#启动方法-1" aria-hidden="true">#</a> 启动方法</h5><p>核心方法的解析：</p><ul><li><p>start()：启动方法，<strong>创建 BootStrap，并添加 NettyServerHandler 处理器</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Channel Pipeline 内的 handler 使用的线程资源，【线程分配给 handler 处理事件】</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultEventExecutorGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventExecutorGroup</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建通用共享的处理器 handler，【非常重要的 NettyServerHandler】</span>
    <span class="token function">prepareSharableHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ServerBootstrap</span> childHandler <span class="token operator">=</span>
        <span class="token comment">// 配置工作组 boss（数量1） 和 worker（数量3） 组</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupBoss<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupSelector<span class="token punctuation">)</span>
        <span class="token comment">// 设置服务端 ServerSocketChannel 类型， Linux 用 epoll</span>
        <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token function">useEpoll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">EpollServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> <span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token comment">// 设置服务端 channel 选项</span>
        <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token comment">// 客户端 channel 选项</span>
        <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">TCP_NODELAY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token comment">// 设置服务器端口</span>
        <span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">getListenPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 向 channel pipeline 添加了很多 handler，【包括 NettyServerHandler】</span>
        <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
	<span class="token comment">// 客户端开启 内存池，使用的内存池是  PooledByteBufAllocator.DEFAULT</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nettyServerConfig<span class="token punctuation">.</span><span class="token function">isServerPooledByteBufAllocatorEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        childHandler<span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">ALLOCATOR</span><span class="token punctuation">,</span> <span class="token class-name">PooledByteBufAllocator</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 同步等待建立连接，并绑定端口。</span>
        <span class="token class-name">ChannelFuture</span> sync <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InetSocketAddress</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">)</span> sync<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将服务器成功绑定的端口号赋值给字段 port。</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// housekeepingService 不为空，则创建【网络异常事件处理器】</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>channelEventListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 线程一直轮询 nettyEvent 状态，根据 CONNECT,CLOSE,IDLE,EXCEPTION 四种事件类型</span>
        <span class="token comment">// CONNECT 不做操作，其余都是回调 onChannelDestroy 【关闭服务器与 Broker 物理节点的 Channel】</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nettyEventExecutor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 提交定时任务，每一秒 执行一次。扫描 responseTable 表，将过期的数据移除</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       		<span class="token class-name">NettyRemotingServer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scanResponseTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>registerProcessor()：注册业务处理器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token class-name">NettyRequestProcessor</span> processor<span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ExecutorService</span> executorThis <span class="token operator">=</span> executor<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 未指定线程池资源，将公共线程池赋值</span>
        executorThis <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>publicExecutor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// pair 对象，第一个参数代表的是处理器， 第二个参数是线程池，默认是公共的线程池</span>
    <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>processor<span class="token punctuation">,</span> executorThis<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// key 是请求码，value 是 Pair 对象</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>processorTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> pair<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>getProcessorPair()：<strong>根据请求码获取对应的处理器和线程池资源</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NettyRequestProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProcessorPair</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> processorTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h5><p>在 RocketMQ 消息队列中支持通信的方式主要有同步（sync）、异步（async）、单向（oneway）三种，其中单向通信模式相对简单，一般用在发送心跳包场景下，无需关注其 Response</p><p>服务器主动向客户端发起请求时，使用三种方法</p><ul><li><p>invokeSync()： 同步调用，<strong>服务器需要阻塞等待调用的返回结果</strong></p><ul><li><code>int opaque = request.getOpaque()</code>：获取请求 ID（与请求码不同）</li><li><code>responseFuture = new ResponseFuture(...)</code>：<strong>创建响应对象</strong>，没有回调函数和 Once</li><li><code>this.responseTable.put(opaque, responseFuture)</code>：<strong>加入到响应映射表中</strong>，key 为请求 ID</li><li><code>SocketAddress addr = channel.remoteAddress()</code>：获取客户端的地址信息</li><li><code>channel.writeAndFlush(request).addListener(...)</code>：将<strong>业务 Command 信息</strong>写入通道，业务线程将数据交给 Netty ，Netty 的 IO 线程接管写刷数据的操作，<strong>监听器由 IO 线程在写刷后回调</strong><ul><li><code>if (f.isSuccess())</code>：写入成功会将响应对象设置为成功状态直接 return，写入失败设置为失败状态</li><li><code>responseTable.remove(opaque)</code>：将当前请求的 responseFuture <strong>从映射表移除</strong></li><li><code>responseFuture.setCause(f.cause())</code>：设置错误的信息</li><li><code>responseFuture.putResponse(null)</code>：响应 Command 设置为 null</li></ul></li><li><code>responseCommand = responseFuture.waitResponse(timeoutMillis)</code>：当前线程设置超时时间挂起，<strong>同步等待响应</strong></li><li><code>if (null == responseCommand)</code>：超时或者出现异常，直接报错</li><li><code>return responseCommand</code>：返回响应 Command 信息</li></ul></li><li><p>invokeAsync()：异步调用，有回调对象，无返回值</p><ul><li><code>boolean acquired = this.semaphoreAsync.tryAcquire(timeoutMillis, TimeUnit.MILLISECONDS)</code>：获取信号量的许可证，信号量用来<strong>限制异步请求</strong>的数量</li><li><code>if (acquired)</code>：许可证获取失败说明并发较高，会抛出异常</li><li><code>once = new SemaphoreReleaseOnlyOnce(this.semaphoreAsync)</code>：Once 对象封装了释放信号量的操作</li><li><code>costTime = System.currentTimeMillis() - beginStartTime</code>：计算一下耗费的时间，超时不再发起请求</li><li><code>responseFuture = new ResponseFuture()</code>：<strong>创建响应对象，包装了回调函数和 Once 对象</strong></li><li><code>this.responseTable.put(opaque, responseFuture)</code>：加入到响应映射表中，key 为请求 ID</li><li><code>channel.writeAndFlush(request).addListener(...)</code>：写刷数据 <ul><li><code>if (f.isSuccess())</code>：写刷成功，设置 responseFuture 发生状态为 true</li><li><code>requestFail(opaque)</code>：写入失败，使用 publicExecutor <strong>公共线程池异步执行回调对象的函数</strong></li><li><code>responseFuture.release()</code>：出现异常会释放信号量</li></ul></li></ul></li><li><p>invokeOneway()：单向调用，不关注响应结果</p><ul><li><code>request.markOnewayRPC()</code>：设置单向标记，对端检查标记可知该请是单向请求</li><li><code>boolean acquired = this.semaphoreOneway.tryAcquire(timeoutMillis, TimeUnit.MILLISECONDS)</code>：获取信号量的许可证，信号量用来<strong>限制单向请求</strong>的数量</li></ul></li></ul><hr><h4 id="处理器类" tabindex="-1"><a class="header-anchor" href="#处理器类" aria-hidden="true">#</a> 处理器类</h4><h5 id="协议设计" tabindex="-1"><a class="header-anchor" href="#协议设计" aria-hidden="true">#</a> 协议设计</h5><p>在 Client 和 Server 之间完成一次消息发送时，需要对发送的消息进行一个协议约定，所以自定义 RocketMQ 的消息协议。在 RocketMQ 中，为了高效地在网络中传输消息和对收到的消息读取，就需要对消息进行编解码，RemotingCommand 这个类在消息传输过程中对所有数据内容的封装，不但包含了所有的数据结构，还包含了编码解码操作</p><table><thead><tr><th>Header字段</th><th>类型</th><th>Request 说明</th><th>Response 说明</th></tr></thead><tbody><tr><td>code</td><td>int</td><td>请求操作码，应答方根据不同的请求码进行不同的处理</td><td>应答响应码，0 表示成功，非 0 则表示各种错误</td></tr><tr><td>language</td><td>LanguageCode</td><td>请求方实现的语言</td><td>应答方实现的语言</td></tr><tr><td>version</td><td>int</td><td>请求方程序的版本</td><td>应答方程序的版本</td></tr><tr><td>opaque</td><td>int</td><td>相当于 requestId，在同一个连接上的不同请求标识码，与响应消息中的相对应</td><td>应答不做修改直接返回</td></tr><tr><td>flag</td><td>int</td><td>区分是普通 RPC 还是 onewayRPC 的标志</td><td>区分是普通 RPC 还是 onewayRPC的标志</td></tr><tr><td>remark</td><td>String</td><td>传输自定义文本信息</td><td>传输自定义文本信息</td></tr><tr><td>extFields</td><td>HashMap&lt;String, String&gt;</td><td>请求自定义扩展信息</td><td>响应自定义扩展信息</td></tr></tbody></table><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-消息协议.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>传输内容主要可以分为以下四部分：</p><ul><li><p>消息长度：总长度，四个字节存储，占用一个 int 类型</p></li><li><p>序列化类型&amp;消息头长度：同样占用一个 int 类型，第一个字节表示序列化类型，后面三个字节表示消息头长度</p></li><li><p>消息头数据：经过序列化后的消息头数据</p></li><li><p>消息主体数据：消息主体的二进制字节数据内容</p></li></ul>`,23),q={href:"https://github.com/apache/rocketmq/blob/master/docs/cn/design.md",target:"_blank",rel:"noopener noreferrer"},I=t(`<hr><h5 id="处理方法" tabindex="-1"><a class="header-anchor" href="#处理方法" aria-hidden="true">#</a> 处理方法</h5><p>NettyServerHandler 类用来处理 Channel 上的事件，在 NettyRemotingServer 启动时注册到 Netty 中，可以处理 RemotingCommand 相关的数据，针对某一种类型的<strong>请求处理</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 服务器处理接受到的请求信息</span>
        <span class="token function">processMessageReceived</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processMessageReceived</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> cmd <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 根据请求的类型进行处理</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">REQUEST_COMMAND</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> 客户端发起的请求，走这里
                <span class="token function">processRequestCommand</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">RESPONSE_COMMAND</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> 客户端响应的数据，走这里【当前类本身是服务器类也是客户端类】
                <span class="token function">processResponseCommand</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NettyRemotingAbstract#processRequestCommand：<strong>处理请求的数据</strong></p><ul><li><p><code>matched = this.processorTable.get(cmd.getCode())</code>：根据业务请求码获取 Pair 对象，包含<strong>处理器和线程池资源</strong></p></li><li><p><code>pair = null == matched ? this.defaultRequestProcessor : matched</code>：未找到处理器则使用缺省处理器</p></li><li><p><code>int opaque = cmd.getOpaque()</code>：获取请求 ID</p></li><li><p><code>Runnable run = new Runnable()</code>：创建任务对象，任务在提交到线程池后开始执行</p><ul><li><p><code>doBeforeRpcHooks()</code>：RPC HOOK 前置处理</p></li><li><p><code>callback = new RemotingResponseCallback()</code>：<strong>封装响应客户端的逻辑</strong></p><ul><li><code>doAfterRpcHooks()</code>：RPC HOOK 后置处理</li><li><code>if (!cmd.isOnewayRPC())</code>：条件成立说明不是单向请求，需要结果</li><li><code>response.setOpaque(opaque)</code>：将请求 ID 设置到 response</li><li><code>response.markResponseType()</code>：<strong>设置当前请求是响应</strong></li><li><code>ctx.writeAndFlush(response)</code>： <strong>将响应数据交给 Netty IO 线程，完成数据写和刷</strong></li></ul></li><li><p><code>if (pair.getObject1() instanceof AsyncNettyRequestProcessor)</code>：Nameserver 默认使用 DefaultRequestProcessor 处理器，是一个 AsyncNettyRequestProcessor 子类</p></li><li><p><code>processor = (AsyncNettyRequestProcessor)pair.getObject1()</code>：获取处理器</p></li><li><p><code>processor.asyncProcessRequest(ctx, cmd, callback)</code>：异步调用，首先 processRequest，然后 callback 响应客户端</p><p><code>DefaultRequestProcessor.processRequest</code>：<strong>根据业务码处理请求，执行对应的操作</strong></p><p><code>ClientRemotingProcessor.processRequest</code>：处理事务回查消息，或者回执消息，需要消费者回执一条消息给生产者</p></li></ul></li><li><p><code>requestTask = new RequestTask(run, ctx.channel(), cmd)</code>：将任务对象、通道、请求封装成 RequestTask 对象</p></li><li><p><code>pair.getObject2().submit(requestTask)</code>：<strong>获取处理器对应的线程池，将 task 提交，从 IO 线程切换到业务线程</strong></p></li></ul><p>NettyRemotingAbstract#processResponseCommand：<strong>处理响应的数据</strong></p><ul><li><code>int opaque = cmd.getOpaque()</code>：获取请求 ID</li><li><code>responseFuture = responseTable.get(opaque)</code>：<strong>从响应映射表中获取对应的对象</strong></li><li><code>responseFuture.setResponseCommand(cmd)</code>：设置响应的 Command 对象</li><li><code>responseTable.remove(opaque)</code>：从映射表中移除对象，代表处理完成</li><li><code>if (responseFuture.getInvokeCallback() != null)</code>：包含回调对象，异步执行回调对象</li><li><code>responseFuture.putResponse(cmd)</code>：不包含回调对象，<strong>同步调用时，唤醒等待的业务线程</strong></li></ul><p>流程：客户端 invokeSync → 服务器的 processRequestCommand → 客户端的 processResponseCommand → 结束</p><hr><h4 id="路由信息" tabindex="-1"><a class="header-anchor" href="#路由信息" aria-hidden="true">#</a> 路由信息</h4><h5 id="信息管理" tabindex="-1"><a class="header-anchor" href="#信息管理" aria-hidden="true">#</a> 信息管理</h5><p>RouteInfoManager 类负责管理路由信息，NamesrvController 的构造方法中创建该类的实例对象，管理服务端的路由数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteInfoManager</span> <span class="token punctuation">{</span>
    <span class="token comment">// Broker 两个小时不活跃，视为离线，被定时任务删除</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">BROKER_CHANNEL_EXPIRED_TIME</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// 读写锁，保证线程安全</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReadWriteLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 主题队列数据，一个主题对应多个队列</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> topicQueueTable<span class="token punctuation">;</span>
    <span class="token comment">// Broker 数据列表</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerName */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerData</span><span class="token operator">&gt;</span> brokerAddrTable<span class="token punctuation">;</span>
    <span class="token comment">// 集群</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* clusterName */</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerName */</span><span class="token operator">&gt;&gt;</span> clusterAddrTable<span class="token punctuation">;</span>
    <span class="token comment">// Broker 存活信息</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">BrokerLiveInfo</span><span class="token operator">&gt;</span> brokerLiveTable<span class="token punctuation">;</span>
    <span class="token comment">// 服务过滤</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token comment">/* Filter Server */</span><span class="token operator">&gt;</span> filterServerTable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="路由注册" tabindex="-1"><a class="header-anchor" href="#路由注册" aria-hidden="true">#</a> 路由注册</h5><p>DefaultRequestProcessor REGISTER_BROKER 方法解析：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">registerBroker</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建响应请求的对象，设置为响应类型，【先设置响应的状态码时系统错误码】</span>
    <span class="token comment">// 反射创建 RegisterBrokerResponseHeader 对象设置到 response.customHeader 属性中</span>
    <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token class-name">RemotingCommand</span><span class="token punctuation">.</span><span class="token function">createResponseCommand</span><span class="token punctuation">(</span><span class="token class-name">RegisterBrokerResponseHeader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取出反射创建的 RegisterBrokerResponseHeader 用户自定义header对象。</span>
    <span class="token keyword">final</span> <span class="token class-name">RegisterBrokerResponseHeader</span> responseHeader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RegisterBrokerResponseHeader</span><span class="token punctuation">)</span> response<span class="token punctuation">.</span><span class="token function">readCustomHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 反射创建 RegisterBrokerRequestHeader 对象，并且将 request.extFields 中的数据写入到该对象中</span>
    <span class="token keyword">final</span> <span class="token class-name">RegisterBrokerRequestHeader</span> requestHeader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">decodeCommandCustomHeader</span><span class="token punctuation">(</span><span class="token class-name">RegisterBrokerRequestHeader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// CRC 校验，计算请求中的 CRC 值和请求头中包含的是否一致</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checksum</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span><span class="token string">&quot;crc32 not match&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TopicConfigSerializeWrapper</span> topicConfigWrapper<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 【解析请求体 body】，解码出来的数据就是当前机器的主题信息</span>
        topicConfigWrapper <span class="token operator">=</span> <span class="token class-name">TopicConfigSerializeWrapper</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TopicConfigSerializeWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        topicConfigWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopicConfigSerializeWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        topicConfigWrapper<span class="token punctuation">.</span><span class="token function">getDataVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        topicConfigWrapper<span class="token punctuation">.</span><span class="token function">getDataVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 注册方法</span>
    <span class="token comment">// 参数1 集群、参数2：节点ip地址、参数3：brokerName、参数4：brokerId 注意brokerId=0的节点为主节点</span>
    <span class="token comment">// 参数5：ha节点ip地址、参数6当前节点主题信息、参数7：过滤服务器列表、参数8：当前服务器和客户端通信的channel</span>
    <span class="token class-name">RegisterBrokerResult</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namesrvController<span class="token punctuation">.</span><span class="token function">getRouteInfoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerBroker</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将结果信息 写到 responseHeader 中</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setHaServerAddr</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getHaServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    responseHeader<span class="token punctuation">.</span><span class="token function">setMasterAddr</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getMasterAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 kv配置，写入 response body 中，【kv 配置是顺序消息相关的】</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jsonValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namesrvController<span class="token punctuation">.</span><span class="token function">getKvConfigManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKVListByNamespace</span><span class="token punctuation">(</span><span class="token class-name">NamesrvUtil</span><span class="token punctuation">.</span><span class="token constant">NAMESPACE_ORDER_TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>jsonValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// code 设置为 SUCCESS</span>
    response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 返回 response ，【返回的 response 由 callback 对象处理】</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RouteInfoManager#registerBroker：注册 Broker 的信息</p><ul><li><p><code>RegisterBrokerResult result = new RegisterBrokerResult()</code>：返回结果的封装对象</p></li><li><p><code>this.lock.writeLock().lockInterruptibly()</code>：加写锁后<strong>同步执行</strong></p></li><li><p><code>brokerNames = this.clusterAddrTable.get(clusterName)</code>：获取当前集群上的 Broker 名称列表，是空就新建列表</p></li><li><p><code>brokerNames.add(brokerName)</code>：将当前 Broker 名字加入到集群列表</p></li><li><p><code>brokerData = this.brokerAddrTable.get(brokerName)</code>：获取当前 Broker 的 brokerData，是空就新建放入映射表</p></li><li><p><code>brokerAddrsMap = brokerData.getBrokerAddrs()</code>：获取当前 Broker 的物理节点 map 表，进行遍历，如果物理节点角色发生变化（slave → master），先将旧数据从物理节点 map 中移除，然后重写放入，<strong>保证节点的唯一性</strong></p></li><li><p><code>if (null != topicConfigWrapper &amp;&amp; MixAll.MASTER_ID == brokerId)</code>：Broker 上的 Topic 不为 null，并且当前物理节点是 Broker 上的 master 节点</p><p><code>tcTable = topicConfigWrapper.getTopicConfigTable()</code>：获取当前 Broker 信息中的主题映射表</p><p><code>if (tcTable != null)</code>：映射表不空就加入或者更新到 Namesrv 内</p></li><li><p><code> prevBrokerLiveInfo = this.brokerLiveTable.put(brokerAddr)</code>：添加<strong>当前节点的 BrokerLiveInfo</strong> ，返回上一次心跳时当前 Broker 节点的存活对象数据。<strong>NamesrvController 中的定时任务会扫描映射表 brokerLiveTable</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BrokerLiveInfo</span> prevBrokerLiveInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerLiveTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>brokerAddr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BrokerLiveInfo</span><span class="token punctuation">(</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>topicConfigWrapper<span class="token punctuation">.</span><span class="token function">getDataVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span>haServerAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>if (MixAll.MASTER_ID != brokerId)</code>：当前 Broker 不是 master 节点，<strong>获取主节点的信息</strong>设置到结果对象</p></li><li><p><code>this.lock.writeLock().unlock()</code>：释放写锁</p></li></ul><hr><h3 id="broker" tabindex="-1"><a class="header-anchor" href="#broker" aria-hidden="true">#</a> Broker</h3><h4 id="mappedfile" tabindex="-1"><a class="header-anchor" href="#mappedfile" aria-hidden="true">#</a> MappedFile</h4><h5 id="成员属性-1" tabindex="-1"><a class="header-anchor" href="#成员属性-1" aria-hidden="true">#</a> 成员属性</h5><p>MappedFile 类是最基础的存储类，继承自 ReferenceResource 类，用来<strong>保证线程安全</strong></p><p>MappedFile 类成员变量：</p><ul><li><p>内存相关：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">OS_PAGE_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 内存页大小：默认是 4k</span>
<span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> <span class="token constant">TOTAL_MAPPED_VIRTUAL_MEMORY</span><span class="token punctuation">;</span>	<span class="token comment">// 当前进程下所有的 mappedFile 占用的总虚拟内存大小</span>
<span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> <span class="token constant">TOTAL_MAPPED_FILES</span><span class="token punctuation">;</span>		<span class="token comment">// 当前进程下所有的 mappedFile 个数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据位点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> wrotePosition<span class="token punctuation">;</span>	<span class="token comment">// 当前 mappedFile 的数据写入点</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> committedPosition<span class="token punctuation">;</span><span class="token comment">// 当前 mappedFile 的数据提交点</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> flushedPosition<span class="token punctuation">;</span>	<span class="token comment">// 数据落盘位点，在这之前的数据是持久化的安全数据</span>
												<span class="token comment">// flushedPosition-wrotePosition 之间的数据属于脏页</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>文件相关：CL 是 CommitLog，CQ 是 ConsumeQueue</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> fileName<span class="token punctuation">;</span>	<span class="token comment">// 文件名称，CL和CQ文件名是【第一条消息的物理偏移量】，索引文件是【年月日时分秒】</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> fileFromOffset<span class="token punctuation">;</span><span class="token comment">// 文件名转long，代表该对象的【起始偏移量】	</span>
<span class="token keyword">private</span> <span class="token class-name">File</span> file<span class="token punctuation">;</span>			<span class="token comment">// 文件对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MF 中以物理偏移量作为文件名，可以更好的寻址和进行判断</strong></p></li><li><p>内存映射：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">FileChannel</span> fileChannel<span class="token punctuation">;</span>			<span class="token comment">// 文件通道</span>
<span class="token keyword">private</span> <span class="token class-name">MappedByteBuffer</span> mappedByteBuffer<span class="token punctuation">;</span>	<span class="token comment">// 内存映射缓冲区，访问虚拟内存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>ReferenceResource 类成员变量：</p><ul><li><p>引用数量：当 <code>refCount &lt;= 0</code> 时，表示该资源可以释放了，没有任何其他程序依赖它了，用原子类保证线程安全</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> refCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 初始值为 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>存活状态：表示资源的存活状态</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> available <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>是否清理：默认值 false，当执行完子类对象的 cleanup() 清理方法后，该值置为 true ，表示资源已经全部释放</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> cleanupOver <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>第一次关闭资源的时间：用来记录超时时间</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> firstShutdownTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法" tabindex="-1"><a class="header-anchor" href="#成员方法" aria-hidden="true">#</a> 成员方法</h5><p>MappedFile 类核心方法：</p><ul><li><p>appendMessage()：提供上层向内存映射中追加消息的方法，消息如何追加由 AppendMessageCallback 控制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：消息     参数二：追加消息回调</span>
<span class="token keyword">public</span> <span class="token class-name">AppendMessageResult</span> <span class="token function">appendMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageExtBrokerInner</span> msg<span class="token punctuation">,</span> <span class="token class-name">AppendMessageCallback</span> cb<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 将字节数组写入到文件通道</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">appendMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>flush()：刷盘接口，参数 flushLeastPages 代表刷盘的最小页数 ，等于 0 时属于强制刷盘；&gt; 0 时需要脏页（计算方法在数据位点）达到该值才进行物理刷盘；文件写满时强制刷盘</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> flushLeastPages<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>selectMappedBuffer()：该方法以 pos 为开始位点 ，到有效数据为止，创建一个切片 ByteBuffer 作为数据副本，供业务访问数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SelectMappedBufferResult</span> <span class="token function">selectMappedBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>destroy()：销毁映射文件对象，并删除关联的系统文件，参数是强制关闭资源的时间</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> intervalForcibly<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>cleanup()：<strong>释放堆外内存</strong>，更新总虚拟内存和总内存映射文件数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> currentRef<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>warmMappedFile()：内存预热，当要新建的 MappedFile 对象大于 1g 时执行该方法。mappedByteBuffer 已经通过mmap映射，此时操作系统中只是记录了该文件和该 Buffer 的映射关系，而并没有映射到物理内存中，对该 MappedFile 的每个 Page Cache 进行写入一个字节分配内存，<strong>将映射文件全部加载到内存</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">warmMappedFile</span><span class="token punctuation">(</span><span class="token class-name">FlushDiskType</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> pages<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>mlock()：锁住指定的内存区域避免被操作系统调到 swap 空间，减少了缺页异常的产生</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>swap space 是磁盘上的一块区域，可以是一个分区或者一个文件或者是组合。当系统物理内存不足时，Linux 会将内存中不常访问的数据保存到 swap 区域上，这样系统就可以有更多的物理内存为各个进程服务，而当系统需要访问 swap 上存储的内容时，需要通过<strong>缺页中断</strong>将 swap 上的数据加载到内存中</p></li></ul><p>ReferenceResource 类核心方法：</p><ul><li><p>hold()：增加引用记数 refCount，方法加锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">hold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>shutdown()：关闭资源，参数代表强制关闭资源的时间间隔</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 系统当前时间 - firstShutdownTimestamp 时间  &gt; intervalForcibly 进行【强制关闭】</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> intervalForcibly<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>release()：引用计数减 1，当 refCount 为 0 时，调用子类的 cleanup 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h4 id="mapqueue" tabindex="-1"><a class="header-anchor" href="#mapqueue" aria-hidden="true">#</a> MapQueue</h4><h5 id="成员属性-2" tabindex="-1"><a class="header-anchor" href="#成员属性-2" aria-hidden="true">#</a> 成员属性</h5><p>MappedFileQueue 用来管理 MappedFile 文件</p><p>成员变量：</p><ul><li><p>管理目录：CommitLog 是 <code>../store/commitlog</code>， ConsumeQueue 是 <code>../store/xxx_topic/0</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> storePath<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>文件属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> mappedFileSize<span class="token punctuation">;</span>	<span class="token comment">// 目录下每个文件大小，CL文件默认 1g，CQ文件 默认 600w字节</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MappedFile</span><span class="token punctuation">&gt;</span></span> mappedFiles<span class="token punctuation">;</span>	<span class="token comment">//目录下的每个 mappedFile 都加入该集合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据位点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> flushedWhere <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>		<span class="token comment">// 目录的刷盘位点，值为 mf.fileName + mf.wrotePosition</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> committedWhere <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">// 目录的提交位点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>消息存储：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> storeTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">// 当前目录下最后一条 msg 的存储时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建服务：新建 MappedFile 实例，继承自 ServiceThread 是一个任务对象，run 方法用来创建实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AllocateMappedFileService</span> allocateMappedFileService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-1" tabindex="-1"><a class="header-anchor" href="#成员方法-1" aria-hidden="true">#</a> 成员方法</h5><p>核心方法：</p><ul><li><p>load()：Broker 启动时，加载本地磁盘数据，该方法读取 storePath 目录下的文件，创建 MappedFile 对象放入集合内</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>getLastMappedFile()：获取当前正在顺序写入的 MappedFile 对象，如果最后一个 MappedFile 写满了，或者不存在 MappedFile 对象，则创建新的 MappedFile</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：文件起始偏移量；参数二：当list为空时，是否新建 MappedFile</span>
<span class="token keyword">public</span> <span class="token class-name">MappedFile</span> <span class="token function">getLastMappedFile</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> startOffset<span class="token punctuation">,</span> <span class="token keyword">boolean</span> needCreate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>flush()：根据 flushedWhere 属性查找合适的 MappedFile，调用该 MappedFile 的落盘方法，并更新全局的 flushedWhere</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//参数：0 表示强制刷新， &gt; 0 脏页数据必须达到 flushLeastPages 才刷新</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> flushLeastPages<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>findMappedFileByOffset()：根据偏移量查询对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MappedFile</span> <span class="token function">findMappedFileByOffset</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> returnFirstOnNotFound<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>deleteExpiredFileByTime()：CL 删除过期文件，根据文件的保留时长决定是否删除</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：过期时间； 参数二：删除两个文件之间的时间间隔； 参数三：mf.destory传递的参数； 参数四：true 强制删除</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteExpiredFileByTime</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> expiredTime<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token keyword">int</span> deleteFilesInterval<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> intervalForcibly<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> cleanImmediately<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>deleteExpiredFileByOffset()：CQ 删除过期文件，遍历每个 MF 文件，获取当前文件最后一个数据单元的物理偏移量，小于 offset 说明当前 MF 文件内都是过期数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：consumeLog 目录下最小物理偏移量，就是第一条消息的 offset； </span>
<span class="token comment">// 参数二：ConsumerQueue 文件内每个数据单元固定大小</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteExpiredFileByOffset</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> unitSize<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="commitlog" tabindex="-1"><a class="header-anchor" href="#commitlog" aria-hidden="true">#</a> CommitLog</h4><h5 id="成员属性-3" tabindex="-1"><a class="header-anchor" href="#成员属性-3" aria-hidden="true">#</a> 成员属性</h5><p>成员变量：</p><ul><li><p>魔数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MESSAGE_MAGIC_CODE</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">626843481</span><span class="token punctuation">;</span>	<span class="token comment">// 消息的第一个字段是大小，第二个字段就是魔数	</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">BLANK_MAGIC_CODE</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">875286124</span><span class="token punctuation">;</span>	<span class="token comment">// 文件尾消息的魔法值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>MappedFileQueue：用于管理 <code>../store/commitlog</code> 目录下的文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">MappedFileQueue</span> mappedFileQueue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>存储服务：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMessageStore</span> defaultMessageStore<span class="token punctuation">;</span>	<span class="token comment">// 存储模块对象，上层服务</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">FlushCommitLogService</span> flushCommitLogService<span class="token punctuation">;</span>	<span class="token comment">// 刷盘服务，默认实现是异步刷盘</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>回调器：控制消息的哪些字段添加到 MappedFile</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AppendMessageCallback</span> appendMessageCallback<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>队列偏移量字典表：key 是主题队列 id，value 是偏移量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> topicQueueTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>锁相关：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> beginTimeInLock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>		 	<span class="token comment">// 写数据时加锁的开始时间</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">PutMessageLock</span> putMessageLock<span class="token punctuation">;</span>		<span class="token comment">// 写锁，两个实现类：自旋锁和重入锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为发送消息是需要持久化的，在 Broker 端持久化时会获取该锁，<strong>保证发送的消息的线程安全</strong></p></li></ul><p>构造方法：</p><ul><li><p>有参构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CommitLog</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DefaultMessageStore</span> defaultMessageStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建 MappedFileQueue 对象</span>
    <span class="token comment">// 参数1：../store/commitlog； 参数2：【1g】； 参数3：allocateMappedFileService</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedFileQueue</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 默认 异步刷盘，创建这个对象</span>
   	<span class="token keyword">this</span><span class="token punctuation">.</span>flushCommitLogService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlushRealTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 控制消息哪些字段追加到 mappedFile，【消息最大是 4M】</span>
   	<span class="token keyword">this</span><span class="token punctuation">.</span>appendMessageCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAppendMessageCallback</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 默认使用自旋锁</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>putMessageLock <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-2" tabindex="-1"><a class="header-anchor" href="#成员方法-2" aria-hidden="true">#</a> 成员方法</h5><p>CommitLog 类核心方法：</p><ul><li><p>start()：会启动刷盘服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>shutdown()：关闭刷盘服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>load()：加载 CommitLog 目录下的文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>getMessage()：根据 offset 查询单条信息，返回的结果对象内部封装了一个 ByteBuffer，该 Buffer 表示 <code>[offset, offset + size]</code> 区间的 MappedFile 的数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SelectMappedBufferResult</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>deleteExpiredFile()：删除过期文件，方法由 DefaultMessageStore 的定时任务调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteExpiredFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>asyncPutMessage()：<strong>存储消息</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncPutMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageExtBrokerInner</span> msg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>msg.setStoreTimestamp(System.currentTimeMillis())</code>：设置存储时间，后面获取到写锁后这个事件会重写</li><li><code>msg.setBodyCRC(UtilAll.crc32(msg.getBody()))</code>：获取消息的 CRC 值</li><li><code>topic、queueId</code>：获取主题和队列 ID</li><li><code>if (msg.getDelayTimeLevel() &gt; 0) </code>：<strong>获取消息的延迟级别，这里是延迟消息实现的关键</strong></li><li><code>topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC</code>：<strong>修改消息的主题为 <code>SCHEDULE_TOPIC_XXXX</code></strong></li><li><code>queueId = ScheduleMessageService.delayLevel2QueueId()</code>：<strong>队列 ID 为延迟级别 -1</strong></li><li><code>MessageAccessor.putProperty</code>：<strong>将原来的消息主题和 ID 存入消息的属性 <code>REAL_TOPIC</code> 中</strong></li><li><code>mappedFile = this.mappedFileQueue.getLastMappedFile()</code>：获取当前顺序写的 MappedFile 对象</li><li><code>putMessageLock.lock()</code>：<strong>获取写锁</strong></li><li><code>msg.setStoreTimestamp(beginLockTimestamp)</code>：设置消息的存储时间为获取锁的时间</li><li><code>if (null == mappedFile || mappedFile.isFull())</code>：文件写满了创建新的 MF 对象</li><li><code>result = mappedFile.appendMessage(msg, this.appendMessageCallback)</code>：<strong>消息追加</strong>，核心逻辑在回调器类</li><li><code>putMessageLock.unlock()</code>：释放写锁</li><li><code>this.defaultMessageStore.unlockMappedFile(..)</code>：将 MappedByteBuffer 从 lock 切换为 unlock 状态</li><li><code>putMessageResult = new PutMessageResult(PutMessageStatus.PUT_OK, result)</code>：结果封装</li><li><code>flushResultFuture = submitFlushRequest(result, msg)</code>：<strong>唤醒刷盘线程</strong></li><li><code>replicaResultFuture = submitReplicaRequest(result, msg)</code>：HA 消息同步</li></ul></li><li><p>recoverNormally()：正常关机时的恢复方法，存储模块启动时<strong>先恢复所有的 ConsumeQueue 数据，再恢复 CommitLog 数据</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数表示恢复阶段 ConsumeQueue 中已知的最大的消息 offset</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recoverNormally</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxPhyOffsetOfConsumeQueue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>int index = mappedFiles.size() - 3</code>：从倒数第三个 file 开始向后恢复</p></li><li><p><code>dispatchRequest = this.checkMessageAndReturnSize()</code>：每次从切片内解析出一条 msg 封装成 DispatchRequest 对象</p></li><li><p><code>size = dispatchRequest.getMsgSize()</code>：获取消息的大小，检查 DispatchRequest 对象的状态</p><p>情况 1：正常数据，则 <code>mappedFileOffset += size</code></p><p>情况 2：文件尾数据，处理下一个文件，mappedFileOffset 置为 0，magic_code 表示文件尾</p></li><li><p><code>processOffset += mappedFileOffset</code>：计算出正确的数据存储位点，并设置 MappedFileQueue 的目录刷盘位点</p></li><li><p><code>this.mappedFileQueue.truncateDirtyFiles(processOffset)</code>：调整 MFQ 中文件的刷盘位点</p></li><li><p><code>if (maxPhyOffsetOfConsumeQueue &gt;= processOffset)</code>：删除冗余数据，将超过全局位点的 CQ 下的文件删除，将包含全局位点的 CQ 下的文件重新定位</p></li></ul></li><li><p>recoverAbnormally()：异常关机时的恢复方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recoverAbnormally</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxPhyOffsetOfConsumeQueue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>int index = mappedFiles.size() - 1</code>：从尾部开始遍历 MFQ，验证 MF 的第一条消息，找到第一个验证通过的文件对象</li><li><code>dispatchRequest = this.checkMessageAndReturnSize()</code>：每次解析出一条 msg 封装成 DispatchRequest 对象</li><li><code>this.defaultMessageStore.doDispatch(dispatchRequest)</code>：<strong>重建 ConsumerQueue 和 Index，避免上次异常停机导致 CQ 和 Index 与 CommitLog 不对齐</strong></li><li>剩余逻辑与正常关机的恢复方法相似</li></ul></li></ul><hr><h5 id="服务线程" tabindex="-1"><a class="header-anchor" href="#服务线程" aria-hidden="true">#</a> 服务线程</h5><p>AppendMessageCallback 消息追加服务实现类为 DefaultAppendMessageCallback</p><ul><li><p>doAppend()：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AppendMessageResult</span> <span class="token function">doAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>long wroteOffset = fileFromOffset + byteBuffer.position()</code>：消息写入的位置，物理偏移量 phyOffset</li><li><code>String msgId</code>：<strong>消息 ID，规则是客户端 IP + 消息偏移量 phyOffset</strong></li><li><code>byte[] topicData</code>：序列化消息，将消息的字段压入到 msgStoreItemMemory 这个 Buffer 中</li><li><code>byteBuffer.put(this.msgStoreItemMemory.array(), 0, msgLen)</code>：将 msgStoreItemMemory 中的数据写入 MF 对象的内存映射的 Buffer 中，数据还没落盘</li><li><code>AppendMessageResult result</code>：构造结果对象，包括存储位点、是否成功、队列偏移量等信息</li><li><code>CommitLog.this.topicQueueTable.put(key, ++queueOffset)</code>：更新队列偏移量</li></ul></li></ul><p>FlushRealTimeService 刷盘 CL 数据，默认是异步刷盘类 FlushRealTimeService</p><ul><li><p>run()：运行方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>while (!this.isStopped())</code>：stopped为 true 才跳出循环</p></li><li><p><code>boolean flushCommitLogTimed</code>：控制线程的休眠方式，默认是 false，使用 <code>CountDownLatch.await()</code> 休眠，设置为 true 时使用 <code>Thread.sleep()</code> 休眠</p></li><li><p><code>int interval</code>：获取配置中的刷盘时间间隔</p></li><li><p><code>int flushPhysicQueueLeastPages</code>：<strong>获取最小刷盘页数，默认是 4 页</strong>，脏页达到指定页数才刷盘</p></li><li><p><code>int flushPhysicQueueThoroughInterval</code>：获取强制刷盘周期，默认是 10 秒，达到周期后强制刷盘，不考虑脏页</p></li><li><p><code>if (flushCommitLogTimed)</code>：<strong>休眠逻辑</strong>，避免 CPU 占用太长时间，导致无法执行其他更紧急的任务</p></li><li><p><code>CommitLog.this.mappedFileQueue.flush(flushPhysicQueueLeastPages)</code>：<strong>刷盘</strong></p></li><li><p><code>for (int i = 0; i &lt; RETRY_TIMES_OVER &amp;&amp; !result; i++)</code>：stopped 停止标记为 true 时，需要确保所有的数据都已经刷盘，所以此处尝试 10 次强制刷盘，</p><p><code>result = CommitLog.this.mappedFileQueue.flush(0)</code>：<strong>强制刷盘</strong></p></li></ul></li></ul><p>同步刷盘类 GroupCommitService</p><ul><li><p>run()：运行方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>while (!this.isStopped())</code>：stopped为 true 才跳出循环</p><p><code>this.waitForRunning(10)</code>：线程休眠 10 毫秒，最后调用 <code>onWaitEnd()</code> 进行<strong>请求的交换</strong> <code>swapRequests()</code></p><p><code>this.doCommit()</code>：做提交逻辑</p><ul><li><p><code>if (!this.requestsRead.isEmpty()) </code>：读请求集合不为空</p><p><code>for (GroupCommitRequest req : this.requestsRead)</code>：遍历所有的读请求，请求中的属性：</p><ul><li><code>private final long nextOffset</code>：本条消息存储之后，下一条消息开始的 offset</li><li><code>private CompletableFuture&lt;PutMessageStatus&gt; flushOKFuture</code>：Future 对象</li></ul><p><code>boolean flushOK = ...</code>：当前请求关注的数据是否全部落盘，<strong>落盘成功唤醒消费者线程</strong></p><p><code>for (int i = 0; i &lt; 2 &amp;&amp; !flushOK; i++)</code>：尝试进行两次强制刷盘，保证刷盘成功</p><p><code>CommitLog.this.mappedFileQueue.flush(0)</code>：强制刷盘</p><p><code>req.wakeupCustomer(flushOK ? ...)</code>：设置 Future 结果，在 Future 阻塞的线程在这里会被唤醒</p><p><code>this.requestsRead.clear()</code>：清理 reqeustsRead 列表，方便交换时成为 requestsWrite 使用</p></li><li><p><code>else</code>：读请求集合为空</p><p><code>CommitLog.this.mappedFileQueue.flush(0)</code>：强制刷盘</p></li></ul></li><li><p><code>this.swapRequests()</code>：交换读写请求</p></li><li><p><code>this.doCommit()</code>：交换后做一次提交</p></li></ul></li></ul><hr><h4 id="consqueue" tabindex="-1"><a class="header-anchor" href="#consqueue" aria-hidden="true">#</a> ConsQueue</h4><h5 id="成员属性-4" tabindex="-1"><a class="header-anchor" href="#成员属性-4" aria-hidden="true">#</a> 成员属性</h5><p>ConsumerQueue 是消息消费队列，存储消息在 CommitLog 的索引，便于快速定位消息</p><p>成员变量：</p><ul><li><p>数据单元：ConsumerQueueData 数据单元的固定大小是 20 字节，默认申请 20 字节的缓冲区</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CQ_STORE_UNIT_SIZE</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>文件管理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MappedFileQueue</span> mappedFileQueue<span class="token punctuation">;</span>	<span class="token comment">// 文件管理器，管理 CQ 目录下的文件</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> storePath<span class="token punctuation">;</span>					<span class="token comment">// 目录，比如../store/consumequeue/xxx_topic/0</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> mappedFileSize<span class="token punctuation">;</span>				<span class="token comment">// 每一个 CQ 存储文件大小，默认 20 * 30w = 600w byte</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>存储主模块：上层的对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMessageStore</span> defaultMessageStore<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消息属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">;</span>					<span class="token comment">// CQ 主题</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueId<span class="token punctuation">;</span>					<span class="token comment">// CQ 队列，每一个队列都有一个 ConsumeQueue 对象进行管理</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> byteBufferIndex<span class="token punctuation">;</span>	<span class="token comment">// 临时缓冲区，插新的 CQData 时使用</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> maxPhysicOffset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>			<span class="token comment">// 当前ConsumeQueue内存储的最大消息物理偏移量</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> minLogicOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">// 当前ConsumeQueue内存储的最小消息物理偏移量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>构造方法：</p><ul><li><p>有参构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 申请了一个 20 字节大小的 临时缓冲区</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>byteBufferIndex <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-3" tabindex="-1"><a class="header-anchor" href="#成员方法-3" aria-hidden="true">#</a> 成员方法</h5><p>ConsumeQueue 启动阶段方法：</p><ul><li>load()：第一步，加载 storePath 目录下的文件，初始化 MappedFileQueue</li><li>recover()：第二步，恢复 ConsumeQueue 数据 <ul><li>从倒数第三个 MF 文件开始向后遍历，依次读取 MF 中 20 个字节的 CQData 数据，检查 offset 和 size 是否是有效数据</li><li>找到无效的 CQData 的位点，该位点就是 CQ 的刷盘点和数据顺序写入点</li><li>删除无效的 MF 文件，调整当前顺序写的 MF 文件的数据位点</li></ul></li></ul><p>其他方法：</p><ul><li><p>truncateDirtyLogicFiles()：CommitLog 恢复阶段调用，将 ConsumeQueue 有效数据文件与 CommitLog 对齐，将超出部分的数据文删除掉，并调整当前文件的数据位点。Broker 启动阶段先恢复 CQ 的数据，再恢复 CL 数据，但是<strong>数据要以 CL 为基准</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数是最大消息物理偏移量</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">truncateDirtyLogicFiles</span><span class="token punctuation">(</span><span class="token keyword">long</span> phyOffet<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>flush()：刷盘，调用 MFQ 的刷盘方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> flushLeastPages<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>deleteExpiredFile()：删除过期文件，将小于 offset 的所有 MF 文件删除，offset 是 CommitLog 目录下最小的物理偏移量，小于该值的 CL 文件已经没有了，所以 CQ 也没有存在的必要</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteExpiredFile</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>putMessagePositionInfoWrapper()：<strong>向 CQ 中追加 CQData 数据</strong>，由存储主模块 DefaultMessageStore 内部的异步线程调用，负责构建 ConsumeQueue 文件和 Index 文件的，该线程会持续关注 CommitLog 文件，当 CommitLog 文件内有新数据写入，就读出来封装成 DispatchRequest 对象，转发给 ConsumeQueue 或者 IndexService</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putMessagePositionInfoWrapper</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>getIndexBuffer()：转换 startIndex 为 offset，获取包含该 offset 的 MappedFile 文件，读取 <code>[offset%maxSize, mfPos]</code> 范围的数据，包装成结果对象返回</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">SelectMappedBufferResult</span> <span class="token function">getIndexBuffer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> startIndex<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h4 id="indexfile" tabindex="-1"><a class="header-anchor" href="#indexfile" aria-hidden="true">#</a> IndexFile</h4><h5 id="成员属性-5" tabindex="-1"><a class="header-anchor" href="#成员属性-5" aria-hidden="true">#</a> 成员属性</h5><p>IndexFile 类成员属性</p><ul><li><p>哈希：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> hashSlotSize <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>	<span class="token comment">// 每个 hash 桶的大小是 4 字节，【用来存放索引的编号】</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> hashSlotNum<span class="token punctuation">;</span>			<span class="token comment">// hash 桶的个数，默认 500 万</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>索引：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> indexSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>		<span class="token comment">// 每个 index 条目的大小是 20 字节</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> invalidIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">// 无效索引编号：0 特殊值</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> indexNum<span class="token punctuation">;</span>				<span class="token comment">// 默认值：2000w</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IndexHeader</span> indexHeader<span class="token punctuation">;</span>	<span class="token comment">// 索引头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>映射：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MappedFile</span> mappedFile<span class="token punctuation">;</span>			<span class="token comment">// 【索引文件使用的 MF 文件】</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">FileChannel</span> fileChannel<span class="token punctuation">;</span>			<span class="token comment">// 文件通道</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MappedByteBuffer</span> mappedByteBuffer<span class="token punctuation">;</span><span class="token comment">// 从 MF 中获取的内存映射缓冲区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>构造方法：</p><ul><li><p>有参构造</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// endPhyOffset 上个索引文件 最后一条消息的 物理偏移量</span>
<span class="token comment">// endTimestamp 上个索引文件 最后一条消息的 存储时间</span>
<span class="token keyword">public</span> <span class="token class-name">IndexFile</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> hashSlotNum<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> indexNum<span class="token punctuation">,</span>
                 <span class="token keyword">final</span> <span class="token keyword">long</span> endPhyOffset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> endTimestamp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 文件大小 40 + 500w * 4 + 2000w * 20</span>
    <span class="token keyword">int</span> fileTotalSize <span class="token operator">=</span>
        <span class="token class-name">IndexHeader</span><span class="token punctuation">.</span><span class="token constant">INDEX_HEADER_SIZE</span> <span class="token operator">+</span> <span class="token punctuation">(</span>hashSlotNum <span class="token operator">*</span> hashSlotSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>indexNum <span class="token operator">*</span> indexSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建 mf 对象，会在disk上创建文件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> fileTotalSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建 索引头对象，传递 索引文件mf 的切片数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>indexHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexHeader</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-4" tabindex="-1"><a class="header-anchor" href="#成员方法-4" aria-hidden="true">#</a> 成员方法</h5><p>IndexFile 类方法</p><ul><li><p>load()：加载 IndexHeader</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>flush()：MappedByteBuffer 内的数据强制落盘</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>isWriteFull()：检查当前的 IndexFile 已写索引数是否 &gt;= indexNum，达到该值则当前 IndexFile 不能继续追加 IndexData 了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isWriteFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>destroy()：删除文件时使用的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> intervalForcibly<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>putKey()：添加索引数据，解决哈希冲突使用<strong>头插法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：消息的 key，uniq_key 或者 keys=&quot;aaa bbb ccc&quot; 会分别为 aaa bbb ccc 创建索引</span>
<span class="token comment">// 参数二：消息的物理偏移量；  参数三：消息存储时间</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">putKey</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> phyOffset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> storeTimestamp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>int slotPos = keyHash % this.hashSlotNum</code>：对 key 计算哈希后，取模得到对应的哈希槽 slot 下标，然后计算出哈希槽的存储位置 absSlotPos</li><li><code>int slotValue = this.mappedByteBuffer.getInt(absSlotPos)</code>：获取槽中的值，如果是无效值说明没有哈希冲突</li><li><code>timeDiff = timeDiff / 1000</code>：计算当前 msg 存储时间减去索引文件内第一条消息存储时间的差值，转化为秒进行存储</li><li><code>int absIndexPos</code>：计算当前索引数据存储的位置，开始填充索引数据到对应的位置</li><li><code>this.mappedByteBuffer.putInt(absIndexPos + 4 + 8 + 4, slotValue)</code>：<strong>hash 桶的原值，头插法</strong></li><li><code>this.mappedByteBuffer.putInt(absSlotPos, this.indexHeader...)</code>：在 slot 放入当前索引的索引编号</li><li><code>if (this.indexHeader.getIndexCount() &lt;= 1)</code>：索引文件插入的第一条数据，需要设置起始偏移量和存储时间</li><li><code>if (invalidIndex == slotValue)</code>：没有哈希冲突，说明占用了一个新的 hash slot</li><li><code>this.indexHeader</code>：设置索引头的相关属性</li></ul></li><li><p>selectPhyOffset()：从索引文件查询消息的物理偏移量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：查询结果全部放到该list内； 参数二：查询key； 参数三：结果最大数限制； 参数四五：时间范围</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectPhyOffset</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> phyOffsets<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxNum<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token keyword">long</span> begin<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> end<span class="token punctuation">,</span> <span class="token keyword">boolean</span> lock<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>if (this.mappedFile.hold())</code>： MF 的引用记数 +1，查询期间 MF 资源<strong>不能被释放</strong></li><li><code>int slotValue = this.mappedByteBuffer.getInt(absSlotPos)</code>：获取槽中的值，可能是无效值或者索引编号，如果是无效值说明查询未命中</li><li><code>int absIndexPos</code>：计算出索引编号对应索引数据的开始位点</li><li><code>this.mappedByteBuffer</code>：读取索引数据</li><li><code>long timeRead = this.indexHeader.getBeginTimestamp() + timeDiff</code>：计算出准确的存储时间</li><li><code>boolean timeMatched = (timeRead &gt;= begin) &amp;&amp; (timeRead &lt;= end)</code>：时间范围的匹配</li><li><code>phyOffsets.add(phyOffsetRead)</code>：将命中的消息索引的消息偏移量加入到 list 集合中</li><li><code>nextIndexToRead = prevIndexRead</code>：遍历前驱节点</li></ul></li></ul><hr><h4 id="indexserv" tabindex="-1"><a class="header-anchor" href="#indexserv" aria-hidden="true">#</a> IndexServ</h4><h5 id="成员属性-6" tabindex="-1"><a class="header-anchor" href="#成员属性-6" aria-hidden="true">#</a> 成员属性</h5><p>IndexService 类用来管理 IndexFile 文件</p><p>成员变量：</p><ul><li><p>存储主模块：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMessageStore</span> defaultMessageStore<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>索引文件存储目录：<code>../store/index</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> storePath<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>索引对象集合：目录下的每个文件都有一个 IndexFile 对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexFile</span><span class="token punctuation">&gt;</span></span> indexFileList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IndexFile</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>索引文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> hashSlotNum<span class="token punctuation">;</span>		<span class="token comment">// 每个索引文件包含的 哈希桶数量 ：500w</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> indexNum<span class="token punctuation">;</span>			<span class="token comment">// 每个索引文件包含的 索引条目数量 ：2000w</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-5" tabindex="-1"><a class="header-anchor" href="#成员方法-5" aria-hidden="true">#</a> 成员方法</h5><ul><li><p>load()：加载 storePath 目录下的文件，为每个文件创建一个 IndexFile 实例对象，并加载 IndexHeader 信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> lastExitOK<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>deleteExpiredFile()：删除过期索引文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数 offset 表示 CommitLog 内最早的消息的 phyOffset</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteExpiredFile</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>this.readWriteLock.readLock().lock()</code>：加锁判断</li><li><code>long endPhyOffset = this.indexFileList.get(0).getEndPhyOffset()</code>：获取目录中第一个文件的结束偏移量</li><li><code>if (endPhyOffset &lt; offset)</code>：索引目录内存在过期的索引文件，并且当前的 IndexFile 都是过期的数据</li><li><code>for (int i = 0; i &lt; (files.length - 1); i++)</code>：遍历文件列表，删除过期的文件</li></ul></li><li><p>buildIndex()：存储主模块 DefaultMessageStore 内部的异步线程调用，构建 Index 数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildIndex</span><span class="token punctuation">(</span><span class="token class-name">DispatchRequest</span> req<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>indexFile = retryGetAndCreateIndexFile()</code>：获取或者创建顺序写的索引文件对象</p></li><li><p><code>buildKey(topic, req.getUniqKey())</code>：<strong>构建索引 key，<code>topic + # + uniqKey</code></strong></p></li><li><p><code>indexFile = putKey()</code>：插入索引文件</p></li><li><p><code>if (keys != null &amp;&amp; keys.length() &gt; 0)</code>：消息存在自定义索引 keys</p><p><code>for (int i = 0; i &lt; keyset.length; i++)</code>：遍历每个索引，为每个 key 调用一次 putKey</p></li></ul></li><li><p>getAndCreateLastIndexFile()：获取当前顺序写的 IndexFile，没有就创建</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">IndexFile</span> <span class="token function">getAndCreateLastIndexFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h4 id="haservice" tabindex="-1"><a class="header-anchor" href="#haservice" aria-hidden="true">#</a> HAService</h4><h5 id="haservice-1" tabindex="-1"><a class="header-anchor" href="#haservice-1" aria-hidden="true">#</a> HAService</h5><h6 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h6><p>HAService 类成员变量：</p><ul><li><p>主节点属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// master 节点当前有多少个 slave 节点与其进行数据同步</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> connectionCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// master 节点会给每个发起连接的 slave 节点的通道创建一个 HAConnection，【控制 master 端向 slave 端传输数据】</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HAConnection</span><span class="token punctuation">&gt;</span></span> connectionList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// master 向 slave 节点推送的最大的 offset，表示数据同步的进度</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> push2SlaveMaxOffset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内部类属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 封装了绑定服务器指定端口，监听 slave 的连接的逻辑，没有使用 Netty，使用了原生态的 NIO 去做</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AcceptSocketService</span> acceptSocketService<span class="token punctuation">;</span>
<span class="token comment">// 控制生产者线程阻塞等待的逻辑</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GroupTransferService</span> groupTransferService<span class="token punctuation">;</span>
<span class="token comment">// slave 节点的客户端对象，【slave 端才会正常运行该实例】</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HAClient</span> haClient<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>线程通信对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WaitNotifyObject</span> waitNotifyObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitNotifyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>成员方法：</p><ul><li><p>start()：启动高可用服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 监听从节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>acceptSocketService<span class="token punctuation">.</span><span class="token function">beginAccept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动监听服务</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>acceptSocketService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动转移服务</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>groupTransferService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启动从节点客户端实例</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>haClient<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h6 id="accept" tabindex="-1"><a class="header-anchor" href="#accept" aria-hidden="true">#</a> Accept</h6><p>AcceptSocketService 类用于<strong>监听从节点的连接</strong>，创建 HAConnection 连接对象</p><p>成员变量：</p><ul><li><p>端口信息：Master 绑定监听的端口信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> socketAddressListen<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>服务端通道：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ServerSocketChannel</span> serverSocketChannel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>多路复用器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>成员方法：</p><ul><li><p>beginAccept()：开始监听连接，<strong>NIO</strong> 标准模板</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beginAccept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>run()：服务启动</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.selector.select(1000)</code>：多路复用器阻塞获取就绪的通道，最多等待 1 秒钟</li><li><code>Set&lt;SelectionKey&gt; selected = this.selector.selectedKeys()</code>：获取选择器中所有注册的通道中已经就绪好的事件</li><li><code>for (SelectionKey k : selected)</code>：遍历所有就绪的事件</li><li><code>if ((k.readyOps() &amp; SelectionKey.OP_ACCEPT) != 0)</code>：说明 <code>OP_ACCEPT</code> 事件就绪</li><li><code>SocketChannel sc = ((ServerSocketChannel) k.channel()).accept()</code>：<strong>获取到客户端连接的通道</strong></li><li><code>HAConnection conn = new HAConnection(HAService.this, sc)</code>：<strong>为每个连接 master 服务器的 slave 创建连接对象</strong></li><li><code>conn.start()</code>：<strong>启动 HAConnection 对象</strong>，内部启动两个服务为读数据服务、写数据服务</li><li><code>HAService.this.addConnection(conn)</code>：加入到 HAConnection 集合内</li></ul></li></ul><hr><h6 id="group" tabindex="-1"><a class="header-anchor" href="#group" aria-hidden="true">#</a> Group</h6><p>GroupTransferService 用来控制数据同步</p><p>成员方法：</p><ul><li><p>doWaitTransfer()：等待主从数据同步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doWaitTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>if (!this.requestsRead.isEmpty())</code>：读请求不为空</li><li><code>boolean transferOK = HAService.this.push2SlaveMaxOffset... &gt;= req.getNextOffset()</code>：<strong>主从同步是否完成</strong></li><li><code>req.wakeupCustomer(transferOK ? ...)</code>：唤醒消费者</li><li><code>this.requestsRead.clear()</code>：清空读请求</li></ul></li><li><p>swapRequests()：交换读写请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swapRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h5 id="haclient" tabindex="-1"><a class="header-anchor" href="#haclient" aria-hidden="true">#</a> HAClient</h5><h6 id="成员属性-7" tabindex="-1"><a class="header-anchor" href="#成员属性-7" aria-hidden="true">#</a> 成员属性</h6><p>HAClient 是 slave 端运行的代码，用于<strong>和 master 服务器建立长连接</strong>，上报本地同步进度，消费服务器发来的 msg 数据</p><p>成员变量：</p><ul><li><p>缓冲区：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">READ_MAX_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>	<span class="token comment">// 默认大小：4 MB</span>
<span class="token keyword">private</span> <span class="token class-name">ByteBuffer</span> byteBufferRead <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token constant">READ_MAX_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">ByteBuffer</span> byteBufferBackup <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token constant">READ_MAX_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>主节点地址：格式为 <code>ip:port</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> masterAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>NIO 属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> reportOffset<span class="token punctuation">;</span>	<span class="token comment">// 通信使用NIO，所以消息使用块传输，上报 slave offset 使用</span>
<span class="token keyword">private</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">;</span>	<span class="token comment">// 客户端与 master 的会话通道				</span>
<span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>				<span class="token comment">// 多路复用器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通信时间：上次会话通信时间，用于控制 socketChannel 是否关闭的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> lastWriteTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>进度信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> currentReportedOffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">// slave 当前的进度信息</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> dispatchPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>		<span class="token comment">// 控制 byteBufferRead position 指针</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h6 id="成员方法-6" tabindex="-1"><a class="header-anchor" href="#成员方法-6" aria-hidden="true">#</a> 成员方法</h6><ul><li><p>run()：启动方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>if (this.connectMaster())</code>：连接主节点，连接失败会休眠 5 秒</p><ul><li><code>String addr = this.masterAddress.get()</code>：获取 master 暴露的 HA 地址端口信息</li><li><code>this.socketChannel = RemotingUtil.connect(socketAddress)</code>：建立连接</li><li><code>this.socketChannel.register(this.selector, SelectionKey.OP_READ)</code>：注册到多路复用器，<strong>关注读事件</strong></li><li><code>this.currentReportedOffset</code>： 初始化上报进度字段为 slave 的 maxPhyOffset</li></ul></li><li><p><code>if (this.isTimeToReportOffset())</code>：slave 每 5 秒会上报一次 slave 端的同步进度信息给 master</p><p><code>boolean result = this.reportSlaveMaxOffset()</code>：<strong>上报同步信息</strong>，上报失败关闭连接</p></li><li><p><code>this.selector.select(1000)</code>：多路复用器阻塞获取就绪的通道，最多等待 1 秒钟，<strong>获取到就绪事件或者超时后结束</strong></p></li><li><p><code>boolean ok = this.processReadEvent()</code>：处理读事件</p></li><li><p><code>if (!reportSlaveMaxOffsetPlus())</code>：检查是否重新上报同步进度</p></li></ul></li><li><p>reportSlaveMaxOffset()：上报 slave 同步进度</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">reportSlaveMaxOffset</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> maxOffset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>首先向缓冲区写入 slave 端最大偏移量，写完以后切换为指定置为初始状态</p></li><li><p><code>for (int i = 0; i &lt; 3 &amp;&amp; this.reportOffset.hasRemaining(); i++)</code>：尝试三次写数据</p><p><code>this.socketChannel.write(this.reportOffset)</code>：<strong>写数据</strong></p></li><li><p><code>return !this.reportOffset.hasRemaining()</code>：写成功之后 pos = limit</p></li></ul></li><li><p>processReadEvent()：处理 master 发送给 slave 数据，返回 true 表示处理成功 false 表示 Socket 处于半关闭状态，需要上层重建 haClient</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">processReadEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>int readSizeZeroTimes = 0</code>：控制 while 循环的一个条件变量，当值为 3 时跳出循环</p></li><li><p><code>while (this.byteBufferRead.hasRemaining())</code>：byteBufferRead 有空间可以去 Socket 读缓冲区加载数据</p></li><li><p><code>int readSize = this.socketChannel.read(this.byteBufferRead)</code>：<strong>从通道读数据</strong></p></li><li><p><code>if (readSize &gt; 0)</code>：加载成功，有新数据</p><p><code>readSizeZeroTimes = 0</code>：置为 0</p><p><code>boolean result = this.dispatchReadRequest()</code>：处理数据的核心逻辑</p></li><li><p><code>else if (readSize == 0) </code>：连续无新数据 3 次，跳出循环</p></li><li><p><code>else</code>：readSize = -1 就表示 Socket 处于半关闭状态，对端已经关闭了</p></li></ul></li><li><p>dispatchReadRequest()：<strong>处理数据的核心逻辑</strong>，master 与 slave 传输的数据格式 <code>{[phyOffset][size][data...]}</code>，phyOffset 表示数据区间的开始偏移量，data 代表数据块，最大 32kb，可能包含多条消息的数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dispatchReadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>final int msgHeaderSize = 8 + 4</code>：协议头大小 12</p></li><li><p><code>int readSocketPos = this.byteBufferRead.position()</code>：记录缓冲区处理数据前的 pos 位点，用于恢复指针</p></li><li><p><code>int diff = ...</code>：当前 byteBufferRead 还剩多少 byte 未处理，每处理一条帧数据都会更新 dispatchPosition</p></li><li><p><code>if (diff &gt;= msgHeaderSize)</code>：缓冲区还有完整的协议头 header 数据</p></li><li><p><code>if (diff &gt;= (msgHeaderSize + bodySize))</code>：说明<strong>缓冲区内是包含当前帧的全部数据的</strong>，开始处理帧数据</p><p><code>HAService...appendToCommitLog(masterPhyOffset, bodyData)</code>：<strong>存储数据到 CommitLog</strong>，并构建 Index 和 CQ</p><p><code>this.byteBufferRead.position(readSocketPos)</code>：恢复 byteBufferRead 的 pos 指针</p><p><code>this.dispatchPosition += msgHeaderSize + bodySize</code>：加一帧数据长度，处理下一条数据使用</p><p><code>if (!reportSlaveMaxOffsetPlus())</code>：上报 slave 同步信息</p></li><li><p><code>if (!this.byteBufferRead.hasRemaining())</code>：缓冲区写满了，重新分配缓冲区</p></li></ul></li><li><p>reallocateByteBuffer()：重新分配缓冲区</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reallocateByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>int remain = READ_MAX_BUFFER_SIZE - this.dispatchPosition</code>：表示缓冲区尚未处理过的字节数量</p></li><li><p><code>if (remain &gt; 0)</code>：条件成立，说明缓冲区<strong>最后一帧数据是半包数据</strong>，但是不能丢失数据</p><p><code>this.byteBufferBackup.put(this.byteBufferRead)</code>：<strong>将半包数据拷贝到 backup 缓冲区</strong></p></li><li><p><code>this.swapByteBuffer()</code>：交换 backup 成为 read</p></li><li><p><code>this.byteBufferRead.position(remain)</code>：设置 pos 为 remain ，后续加载数据 pos 从remain 开始向后移动</p></li><li><p><code>this.dispatchPosition = 0</code>：当前缓冲区交换之后，相当于是一个全新的 byteBuffer，所以分配指针归零</p></li></ul></li></ul><hr><h5 id="haconn" tabindex="-1"><a class="header-anchor" href="#haconn" aria-hidden="true">#</a> HAConn</h5><h6 id="connection" tabindex="-1"><a class="header-anchor" href="#connection" aria-hidden="true">#</a> Connection</h6><p>HAConnection 类成员变量：</p><ul><li><p>会话通道：master 和 slave 之间通信的 SocketChannel</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>客户端地址：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> clientAddr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>服务类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">WriteSocketService</span> writeSocketService<span class="token punctuation">;</span>	<span class="token comment">// 写数据服务</span>
<span class="token keyword">private</span> <span class="token class-name">ReadSocketService</span> readSocketService<span class="token punctuation">;</span>	<span class="token comment">// 读数据服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>请求位点：在 slave 上报本地的进度之后被赋值，该值大于 0 后同步逻辑才会运行，master 如果不知道 slave 节点当前消息的存储进度，就无法给 slave 推送数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> slaveRequestOffset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>应答位点： 保存最新的 slave 上报的 offset 信息，slaveAckOffset 之前的数据都可以认为 slave 已经同步完成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> slaveAckOffset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>核心方法：</p><ul><li><p>构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">HAConnection</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HAService</span> haService<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化一些东西</span>
    <span class="token comment">// 设置 socket 读写缓冲区为 64kb 大小</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReceiveBufferSize</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSendBufferSize</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建读写服务</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>writeSocketService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriteSocketService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>readSocketService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadSocketService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 自增</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>haService<span class="token punctuation">.</span><span class="token function">getConnectionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>readSocketService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>writeSocketService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h6 id="readsocket" tabindex="-1"><a class="header-anchor" href="#readsocket" aria-hidden="true">#</a> ReadSocket</h6><p>ReadSocketService 类是一个任务对象，slave 向 master 传输的帧格式为 <code>[long][long][long]</code>，上报的是 slave 本地的同步进度，同步进度是一个 long 值</p><p>成员变量：</p><ul><li><p>读缓冲：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">READ_MAX_BUFFER_SIZE</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>	<span class="token comment">// 默认大小 1MB</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> byteBufferRead <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token constant">READ_MAX_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>NIO 属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>			<span class="token comment">// 多路复用器</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">;</span>	<span class="token comment">// master 与 slave 之间的会话 SocketChannel</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>处理位点：缓冲区处理位点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> processPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>上次读操作的时间：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> lastReadTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>核心方法：</p><ul><li><p>构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ReadSocketService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.socketChannel.register(this.selector, SelectionKey.OP_READ)</code>：通道注册到多路复用器，关注读事件</li><li><code>this.setDaemon(true)</code>：设置为守护线程</li></ul></li><li><p>运行方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>this.selector.select(1000)</code>：多路复用器阻塞获取就绪的通道，最多等待 1 秒钟，获取到就绪事件或者超时后结束</p></li><li><p><code>boolean ok = this.processReadEvent()</code>：<strong>读数据的核心方法</strong>，返回 true 表示处理成功 false 表示 Socket 处于半关闭状态，需要上层重建 HAConnection 对象</p><ul><li><p><code>int readSizeZeroTimes = 0</code>：控制 while 循环，当连续从 Socket 读取失败 3 次（未加载到数据）跳出循环</p></li><li><p><code>if (!this.byteBufferRead.hasRemaining())</code>：byteBufferRead 已经全部使用完，需要清理数据并更新位点</p></li><li><p><code>while (this.byteBufferRead.hasRemaining())</code>：byteBufferRead 有空间可以去 Socket 读缓冲区加载数据</p></li><li><p><code>int readSize = this.socketChannel.read(this.byteBufferRead)</code>：<strong>从通道读数据</strong></p></li><li><p><code>if (readSize &gt; 0)</code>：加载成功，有新数据</p><p><code>if ((byteBufferRead.position() - processPosition) &gt;= 8)</code>：缓冲区的可读数据最少包含一个数据帧</p><ul><li><code>int pos = ...</code>：<strong>获取可读帧数据中最后一个完整的帧数据的位点，后面的数据丢弃</strong></li></ul></li><li><p><code>long readOffset = ...byteBufferRead.getLong(pos - 8)</code>：读取最后一帧数据，slave 端当前的同步进度信息</p><ul><li><code>this.processPosition = pos</code>：更新处理位点</li><li><code>HAConnection.this.slaveAckOffset = readOffset</code>：更新应答位点</li><li><code>if (HAConnection.this.slaveRequestOffset &lt; 0)</code>：条件成立<strong>给 slaveRequestOffset 赋值</strong></li><li><code>HAConnection...notifyTransferSome(slaveAckOffset)</code>：<strong>唤醒阻塞的生产者线程</strong></li></ul></li><li><p><code>else if (readSize == 0) </code>：读取 3 次无新数据跳出循环</p></li><li><p><code>else</code>：readSize = -1 就表示 Socket 处于半关闭状态，对端已经关闭了</p></li></ul></li><li><p><code>if (interval &gt; 20)</code>：超过 20 秒未发生通信，直接结束循环</p></li></ul></li></ul><hr><h6 id="writesocket" tabindex="-1"><a class="header-anchor" href="#writesocket" aria-hidden="true">#</a> WriteSocket</h6><p>WriteSocketService 类是一个任务对象，master 向 slave 传输的数据帧格式为 <code>{[phyOffset][size][data...]}{[phyOffset][size][data...]}</code></p><ul><li>phyOffset：数据区间的开始偏移量，并不表示某一条具体的消息，表示的数据块开始的偏移量位置</li><li>size：同步的数据块的大小</li><li>data：数据块，最大 32kb，可能包含多条消息的数据</li></ul><p>成员变量：</p><ul><li><p>协议头：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> headerSize <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>		<span class="token comment">// 协议头大小：12</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> byteBufferHeader<span class="token punctuation">;</span>	<span class="token comment">// 帧头缓冲区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>NIO 属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>			<span class="token comment">// 多路复用器</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">;</span>	<span class="token comment">// master 与 slave 之间的会话 SocketChannel</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>处理位点：下一次传输同步数据的位置信息，master 给当前 slave 同步的位点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> nextTransferFromWhere <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>上次写操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> lastWriteOver <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>							<span class="token comment">// 上一轮数据是否传输完毕</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> lastWriteTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 上次写操作的时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>核心方法：</p><ul><li><p>构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">WriteSocketService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.socketChannel.register(this.selector, SelectionKey.OP_WRITE)</code>：通道注册到多路复用器，关注写事件</li><li><code>this.setDaemon(true)</code>：设置为守护线程</li></ul></li><li><p>运行方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>this.selector.select(1000)</code>：多路复用器阻塞获取就绪的通道，最多等待 1 秒钟，获取到就绪事件或者超时后结束</p></li><li><p><code>if (-1 == HAConnection.this.slaveRequestOffset)</code>：<strong>等待 slave 同步完数据</strong></p></li><li><p><code>if (-1 == this.nextTransferFromWhere)</code>：条件成立，需要初始化该变量</p><p><code>if (0 == HAConnection.this.slaveRequestOffset)</code>：slave 是一个全新节点，从正在顺序写的 MF 开始同步数据</p><p><code>long masterOffset = ...</code>：获取 master 最大的 offset，并计算归属的 mappedFile 文件的开始 offset</p><p><code>this.nextTransferFromWhere = masterOffset</code>：<strong>赋值给下一次传输同步数据的位置信息</strong></p><p><code>this.nextTransferFromWhere = HAConnection.this.slaveRequestOffset</code>：大部分情况走这个赋值逻辑</p></li><li><p><code>if (this.lastWriteOver)</code>：上一次待发送数据全部发送完成</p><p><code>if (interval &gt; 5)</code>：<strong>超过 5 秒未同步数据，发送一个 header 心跳数据包，维持长连接</strong></p></li><li><p><code>else</code>：上一轮的待发送数据未全部发送，需要同步数据到 slave 节点</p></li><li><p><code>SelectMappedBufferResult selectResult</code>：<strong>到 CommitLog 中查询 nextTransferFromWhere 开始位置的数据</strong></p></li><li><p><code>if (size &gt; 32k)</code>：一次最多同步 32k 数据</p></li><li><p><code>this.nextTransferFromWhere += size</code>：增加 size，下一轮传输跳过本帧数据</p></li><li><p><code>selectResult.getByteBuffer().limit(size)</code>：设置 byteBuffer 可访问数据区间为 [pos, size]</p></li><li><p><code>this.selectMappedBufferResult = selectResult</code>：<strong>待发送的数据</strong></p></li><li><p><code>this.byteBufferHeader.put</code>：<strong>构建帧头数据</strong></p></li><li><p><code>this.lastWriteOver = this.transferData()</code>：处理数据，返回是否处理完成</p></li></ul></li><li><p>同步方法：<strong>同步数据到 slave 节点</strong>，返回 true 表示本轮数据全部同步完成，false 表示本轮同步未完成（Header 和 Body 其中一个未同步完成都会返回 false）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">transferData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>int writeSizeZeroTimes= 0</code>：控制 while 循环，当写失败连续 3 次时，跳出循环）跳出循环</p></li><li><p><code>while (this.byteBufferHeader.hasRemaining())</code>：<strong>帧头数据缓冲区有待发送的数据</strong></p></li><li><p><code>int writeSize = this.socketChannel.write(this.byteBufferHeader)</code>：向通道写帧头数据</p></li><li><p><code>if (null == this.selectMappedBufferResult)</code>：说明是心跳数据，返回心跳数据是否发送完成</p></li><li><p><code>if (!this.byteBufferHeader.hasRemaining())</code>：<strong>Header写成功之后，才进行写 Body</strong></p></li><li><p><code>while (this.selectMappedBufferResult.getByteBuffer().hasRemaining())</code>：<strong>数据缓冲区有待发送的数据</strong></p></li><li><p><code>int writeSize = this.socketChannel.write(this.selectMappedBufferResult...)</code>：向通道写帧头数据</p></li><li><p><code>if (writeSize &gt; 0)</code>：写数据成功，但是不代表 SMBR 中的数据全部写完成</p></li><li><p><code>boolean result</code>：判断是否发送完成，返回该值</p></li></ul></li></ul><hr><h4 id="messtore" tabindex="-1"><a class="header-anchor" href="#messtore" aria-hidden="true">#</a> MesStore</h4><h5 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h5><p>DefaultMessageStore 类核心是整个存储服务的调度类</p><ul><li><p>构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.allocateMappedFileService.start()</code>：启动<strong>创建 MappedFile 文件服务</strong></li><li><code>this.indexService.start()</code>：启动索引服务</li></ul></li><li><p>load()：先加载 CommitLog，再加载 ConsumeQueue，最后加载 IndexFile，加载完进入恢复阶段，先恢复 CQ，在恢复 CL</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>start()：核心启动方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>lock = lockFile.getChannel().tryLock(0, 1, false)</code>：获取文件锁，获取失败说明当前目录已经启动过 Broker</p></li><li><p><code>long maxPhysicalPosInLogicQueue = commitLog.getMinOffset()</code>：遍历全部的 CQ 对象，获取 CQ 中消息的最大偏移量</p></li><li><p><code>this.reputMessageService.start()</code>：设置分发服务的分发位点，启动<strong>分发服务</strong>，构建 ConsumerQueue 和 IndexFile</p></li><li><p><code>if (dispatchBehindBytes() &lt;= 0)</code>：线程等待分发服务将分发数据全部处理完毕</p></li><li><p><code>this.recoverTopicQueueTable()</code>：因为修改了 CQ 数据，所以再次构建队列偏移量字段表</p></li><li><p><code>this.haService.start()</code>：启动 <strong>HA 服务</strong></p></li><li><p><code>this.handleScheduleMessageService()</code>：启动<strong>消息调度服务</strong></p></li><li><p><code>this.flushConsumeQueueService.start()</code>：启动 CQ <strong>消费队列刷盘服务</strong></p></li><li><p><code>this.commitLog.start()</code>：启动 <strong>CL 刷盘服务</strong></p></li><li><p><code>this.storeStatsService.start()</code>：启动状态存储服务</p></li><li><p><code>this.createTempFile()</code>：创建 AbortFile，正常关机时 JVM HOOK 会删除该文件，<strong>异常宕机时该文件不会删除</strong>，开机数据恢复阶段根据是否存在该文件，执行不同的恢复策略</p></li><li><p><code>this.addScheduleTask()</code>：添加定时任务</p><ul><li><p><code>DefaultMessageStore.this.cleanFilesPeriodically()</code>：<strong>定时清理过期文件</strong>，周期是 10 秒</p><ul><li><code>this.cleanCommitLogService.run()</code>：启动清理过期的 CL 文件服务</li><li><code>this.cleanConsumeQueueService.run()</code>：启动清理过期的 CQ 文件服务</li></ul></li><li><p><code>DefaultMessageStore.this.checkSelf()</code>：每 10 分种进行健康检查</p></li><li><p><code>DefaultMessageStore.this.cleanCommitLogService.isSpaceFull()</code>：<strong>磁盘预警定时任务</strong>，每 10 秒一次</p><ul><li><p><code>if (physicRatio &gt; this.diskSpaceWarningLevelRatio)</code>：检查磁盘是否到达 waring 阈值，默认 90%</p><p><code>boolean diskok = ...runningFlags.getAndMakeDiskFull()</code>：设置磁盘写满标记</p></li><li><p><code>boolean diskok = ...this.runningFlags.getAndMakeDiskOK()</code>：设置磁盘可写标记</p></li></ul></li></ul></li><li><p><code>this.shutdown = false</code>：刚启动，设置为 false</p></li></ul></li><li><p>shutdown()：关闭各种服务和线程资源，设置存储模块状态为关闭状态</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>destroy()：销毁 Broker 的工作目录</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h5 id="服务线程-1" tabindex="-1"><a class="header-anchor" href="#服务线程-1" aria-hidden="true">#</a> 服务线程</h5><p>ServiceThread 类被很多服务继承，本身是一个 Runnable 任务对象，继承者通过重写 run 方法来实现服务的逻辑</p><ul><li><p>run()：一般实现方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 业务逻辑</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过参数 stopped 控制服务的停止，使用 volatile 修饰保证可见性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stopped <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>shutdown()：停止线程，首先设置 stopped 为 true，然后进行唤醒，默认不直接打断线程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>waitForRunning()：挂起线程，设置唤醒标记 hasNotified 为 false</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token keyword">long</span> interval<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>wakeup()：唤醒线程，设置 hasNotified 为 true</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h5 id="构建服务" tabindex="-1"><a class="header-anchor" href="#构建服务" aria-hidden="true">#</a> 构建服务</h5><p>AllocateMappedFileService <strong>创建 MappedFile 服务</strong></p><ul><li><p>mmapOperation()：核心服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">mmapOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>req = this.requestQueue.take()</code>： <strong>从 requestQueue 阻塞队列（优先级）中获取 AllocateRequest 任务</strong></li><li><code>if (...isTransientStorePoolEnable())</code>：条件成立使用直接内存写入数据， 从直接内存中 commit 到 FileChannel 中</li><li><code>mappedFile = new MappedFile(req.getFilePath(), req.getFileSize())</code>：根据请求的路径和大小创建对象</li><li><code>mappedFile.warmMappedFile()</code>：判断 mappedFile 大小，只有 CommitLog 才进行文件预热</li><li><code>req.setMappedFile(mappedFile)</code>：将创建好的 MF 对象的赋值给请求对象的成员属性</li><li><code>req.getCountDownLatch().countDown()</code>：<strong>唤醒请求的阻塞线程</strong></li></ul></li><li><p>putRequestAndReturnMappedFile()：MappedFileQueue 中用来创建 MF 对象的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MappedFile</span> <span class="token function">putRequestAndReturnMappedFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> nextFilePath<span class="token punctuation">,</span> <span class="token class-name">String</span> nextNextFilePath<span class="token punctuation">,</span> <span class="token keyword">int</span> fileSize<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>AllocateRequest nextReq = new AllocateRequest(...)</code>：创建 nextFilePath 的 AllocateRequest 对象，放入请求列表和阻塞队列，然后创建 nextNextFilePath 的 AllocateRequest 对象，放入请求列表和阻塞队列</li><li><code>AllocateRequest result = this.requestTable.get(nextFilePath)</code>：从请求列表获取 nextFilePath 的请求对象</li><li><code>result.getCountDownLatch().await(...)</code>：<strong>线程挂起</strong>，直到超时或者 nextFilePath 对应的 MF 文件创建完成</li><li><code>return result.getMappedFile()</code>：返回创建好的 MF 文件对象</li></ul></li></ul><p>ReputMessageService 消息分发服务，用于构<strong>建 ConsumerQueue 和 IndexFile 文件</strong></p><ul><li><p>run()：<strong>循环执行 doReput 方法</strong>，<strong>所以发送的消息存储进 CL 就可以产生对应的 CQ</strong>，每执行一次线程休眠 1 毫秒</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>doReput()：实现分发的核心逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>for (boolean doNext = true; this.isCommitLogAvailable() &amp;&amp; doNext; )</code>：循环遍历</li><li><code>SelectMappedBufferResult result</code>： 从 CommitLog 拉取数据，数据范围 <code>[reputFromOffset, 包含该偏移量的 MF 的最大 Pos]</code>，封装成结果对象</li><li><code>DispatchRequest dispatchRequest</code>：从结果对象读取出一条 DispatchRequest 数据</li><li><code>DefaultMessageStore.this.doDispatch(dispatchRequest)</code>：将数据交给分发器进行分发，用于<strong>构建 CQ 和索引文件</strong></li><li><code>this.reputFromOffset += size</code>：更新数据范围</li></ul></li></ul><hr><h5 id="刷盘服务" tabindex="-1"><a class="header-anchor" href="#刷盘服务" aria-hidden="true">#</a> 刷盘服务</h5><p>FlushConsumeQueueService 刷盘 CQ 数据</p><ul><li><p>run()：每隔 1 秒执行一次刷盘服务，跳出循环后还会执行一次强制刷盘</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>doFlush()：刷盘</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doFlush</span><span class="token punctuation">(</span><span class="token keyword">int</span> retryTimes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>int flushConsumeQueueLeastPages</code>：脏页阈值，默认是 2</p></li><li><p><code>if (retryTimes == RETRY_TIMES_OVER)</code>：<strong>重试次数是 3</strong> 时设置强制刷盘，设置脏页阈值为 0</p></li><li><p><code>int flushConsumeQueueThoroughInterval</code>：两次刷新的<strong>时间间隔超过 60 秒</strong>会强制刷盘</p></li><li><p><code>for (ConsumeQueue cq : maps.values())</code>：遍历所有的 CQ，进行刷盘</p></li><li><p><code>DefaultMessageStore.this.getStoreCheckpoint().flush()</code>：强制刷盘时将 StoreCheckpoint 瞬时数据刷盘</p></li></ul></li></ul><p>FlushCommitLogService 刷盘 CL 数据，默认是异步刷盘</p><ul><li><p>run()：运行方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>while (!this.isStopped())</code>：stopped为 true 才跳出循环</p></li><li><p><code>boolean flushCommitLogTimed</code>：控制线程的休眠方式，默认是 false，使用 <code>CountDownLatch.await()</code> 休眠，设置为 true 时使用 <code>Thread.sleep()</code> 休眠</p></li><li><p><code>int interval</code>：获取配置中的刷盘时间间隔</p></li><li><p><code>int flushPhysicQueueLeastPages</code>：获取最小刷盘页数，默认是 4 页，脏页达到指定页数才刷盘</p></li><li><p><code>int flushPhysicQueueThoroughInterval</code>：获取强制刷盘周期，默认是 10 秒，达到周期后强制刷盘，不考虑脏页</p></li><li><p><code>if (flushCommitLogTimed)</code>：休眠逻辑，避免 CPU 占用太长时间，导致无法执行其他更紧急的任务</p></li><li><p><code>CommitLog.this.mappedFileQueue.flush(flushPhysicQueueLeastPages)</code>：<strong>刷盘</strong></p></li><li><p><code>for (int i = 0; i &lt; RETRY_TIMES_OVER &amp;&amp; !result; i++)</code>：stopped 停止标记为 true 时，需要确保所有的数据都已经刷盘，所以此处尝试 10 次强制刷盘，</p><p><code>result = CommitLog.this.mappedFileQueue.flush(0)</code>：<strong>强制刷盘</strong></p></li></ul></li></ul><hr><h5 id="清理服务" tabindex="-1"><a class="header-anchor" href="#清理服务" aria-hidden="true">#</a> 清理服务</h5><p>CleanCommitLogService 清理过期的 CL 数据，定时任务 10 秒调用一次，<strong>先清理 CL，再清理 CQ</strong>，因为 CQ 依赖于 CL 的数据</p><ul><li><p>run()：运行方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>deleteExpiredFiles()：删除过期 CL 文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteExpiredFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>long fileReservedTime</code>：默认 72，代表文件的保留时间</li><li><code>boolean timeup = this.isTimeToDelete()</code>：当前时间是否是凌晨 4 点</li><li><code>boolean spacefull = this.isSpaceToDelete()</code>：CL 或者 CQ 的目录磁盘使用率达到阈值标准 85%</li><li><code>boolean manualDelete = this.manualDeleteFileSeveralTimes &gt; 0</code>：手动删除文件</li><li><code>fileReservedTime *= 60 * 60 * 1000</code>：默认保留 72 小时</li><li><code>deleteCount = DefaultMessageStore.this.commitLog.deleteExpiredFile()</code>：<strong>调用 MFQ 对象的删除方法</strong></li></ul></li></ul><p>CleanConsumeQueueService 清理过期的 CQ 数据</p><ul><li><p>run()：运行方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>deleteExpiredFiles()：删除过期 CQ 文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteExpiredFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>int deleteLogicsFilesInterval</code>：清理 CQ 的时间间隔，默认 100 毫秒</li><li><code>long minOffset = DefaultMessageStore.this.commitLog.getMinOffset()</code>：获取 CL 文件中最小的物理偏移量</li><li><code>if (minOffset &gt; this.lastPhysicalMinOffset)</code>：CL 最小的偏移量大于 CQ 最小的，说明有过期数据</li><li><code>this.lastPhysicalMinOffset = minOffset</code>：更新 CQ 的最小偏移量</li><li><code>for (ConsumeQueue logic : maps.values())</code>：遍历所有的 CQ 文件</li><li><code>logic.deleteExpiredFile(minOffset)</code>：<strong>调用 MFQ 对象的删除方法</strong></li><li><code>DefaultMessageStore.this.indexService.deleteExpiredFile(minOffset)</code>：<strong>删除过期的索引文件</strong></li></ul></li></ul><hr><h5 id="获取消息" tabindex="-1"><a class="header-anchor" href="#获取消息" aria-hidden="true">#</a> 获取消息</h5><p>DefaultMessageStore#getMessage 用于获取消息，在 PullMessageProcessor#processRequest 方法中被调用 （提示：建议学习消费者源码时再阅读）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// offset: 客户端拉消息使用位点；   maxMsgNums: 32；  messageFilter: 一般这里是 tagCode 过滤 </span>
<span class="token keyword">public</span> <span class="token class-name">GetMessageResult</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxMsgNums<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MessageFilter</span> messageFilter<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>if (this.shutdown)</code>：检查运行状态</p></li><li><p><code>GetMessageResult getResult</code>：创建查询结果对象</p></li><li><p><code>final long maxOffsetPy = this.commitLog.getMaxOffset()</code>：<strong>获取 CommitLog 最大物理偏移量</strong></p></li><li><p><code>ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId)</code>：根据主题和队列 ID 获取 ConsumeQueue对象</p></li><li><p><code>minOffset, maxOffset</code>：获取当前 ConsumeQueue 的最小 offset 和 最大 offset，<strong>判断是否满足本次 Pull 的 offset</strong></p><p><code>if (maxOffset == 0)</code>：说明队列内无数据，设置状态为 NO_MESSAGE_IN_QUEUE，外层进行长轮询</p><p><code>else if (offset &lt; minOffset)</code>：说明 offset 太小了，设置状态为 OFFSET_TOO_SMALL</p><p><code>else if (offset == maxOffset)</code>：消费进度持平，设置状态为 OFFSET_OVERFLOW_ONE，外层进行长轮询</p><p><code>else if (offset &gt; maxOffset)</code>：说明 offset 越界了，设置状态为 OFFSET_OVERFLOW_BADLY</p></li><li><p><code>SelectMappedBufferResult bufferConsumeQueue</code>：查询 CQData <strong>获取包含该 offset 的 MappedFile 文件</strong>，如果该文件不是顺序写的文件，就读取 <code>[offset%maxSize, 文件尾]</code> 范围的数据，反之读取 <code>[offset%maxSize, 文件名+wrotePosition尾]</code></p><p>先查 CQ 的原因：因为 CQ 时 CL 的索引，通过 CQ 查询 CL 更加快捷</p></li><li><p><code>if (bufferConsumeQueue != null)</code>：只有再 CQ 删除过期数据的逻辑执行时，条件才不成立，一般都是成立的</p></li><li><p><code>long nextPhyFileStartOffset = Long.MIN_VALUE</code>：下一个 commitLog 物理文件名，初始值为最小值</p></li><li><p><code>long maxPhyOffsetPulling = 0</code>：本次拉消息最后一条消息的物理偏移量</p></li><li><p><code>for ()</code>：<strong>处理数据</strong>，每次处理 20 字节处理字节数大于 16000 时跳出循环</p></li><li><p><code>offsetPy, sizePy, tagsCode</code>：读取 20 个字节后，获取消息物理偏移量、消息大小、消息 tagCode</p></li><li><p><code>boolean isInDisk = checkInDiskByCommitOffset(...)</code>：<strong>检查消息是热数据还是冷数据</strong>，false 为热数据</p><ul><li><code>long memory</code>：Broker 系统 40% 内存的字节数，写数据时内存不够会使用 LRU 算法淘汰数据，将淘汰数据持久化到磁盘</li><li><code>return (maxOffsetPy - offsetPy) &gt; memory</code>：返回 true 说明数据已经持久化到磁盘，为冷数据</li></ul></li><li><p><code>if (this.isTheBatchFull())</code>：<strong>控制是否跳出循环</strong></p><ul><li><p><code>if (0 == bufferTotal || 0 == messageTotal)</code>：本次 pull 消息未拉取到任何东西，需要外层 for 循环继续，返回 false</p></li><li><p><code>if (maxMsgNums &lt;= messageTotal)</code>：结果对象内消息数已经超过了最大消息数量，可以结束循环了</p></li><li><p><code>if (isInDisk)</code>：冷数据</p><p><code>if ((bufferTotal + sizePy) &gt; ...)</code>：冷数据一次 pull 请求最大允许获取 64kb 的消息</p><p><code>if (messageTotal &gt; ...)</code>：冷数据一次 pull 请求最大允许获取8 条消息</p></li><li><p><code>else</code>：热数据</p><p><code>if ((bufferTotal + sizePy) &gt; ...)</code>：热数据一次 pull 请求最大允许获取 256kb 的消息</p><p><code>if (messageTotal &gt; ...)</code>：冷数据一次 pull 请求最大允许获取 32 条消息</p></li></ul></li><li><p><code>if (messageFilter != null)</code>：按照消息 tagCode 进行过滤</p></li><li><p><code>selectResult = this.commitLog.getMessage(offsetPy, sizePy)</code>：根据 CQ 消息物理偏移量和消息大小<strong>到 commitLog 中查询这条 msg</strong></p></li><li><p><code>if (null == selectResult)</code>：条件成立说明 commitLog 执行了删除过期文件的定时任务，因为是先清理的 CL，所以 CQ 还有该索引数据</p></li><li><p><code>nextPhyFileStartOffset = this.commitLog.rollNextFile(offsetPy)</code>：获取包含该 offsetPy 的下一个数据文件的文件名</p></li><li><p><code>getResult.addMessage(selectResult)</code>：<strong>将本次循环查询出来的 msg 加入到 getResult 内</strong></p></li><li><p><code>status = GetMessageStatus.FOUND</code>：查询状态设置为 FOUND</p></li><li><p><code>nextPhyFileStartOffset = Long.MIN_VALUE</code>：设置为最小值，跳过期 CQData 数据的逻辑</p></li><li><p><code>nextBeginOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE)</code>：计算客户端下一次 pull 时使用的位点信息</p></li><li><p><code>getResult.setSuggestPullingFromSlave(diff &gt; memory)</code>：<strong>选择主从节点的建议</strong></p><ul><li><code>diff &gt; memory =&gt; true</code>：表示本轮查询最后一条消息为冷数据，Broker 建议客户端下一次 pull 时到 slave 节点</li><li><code>diff &gt; memory =&gt; false</code>：表示本轮查询最后一条消息为热数据，Broker 建议客户端下一次 pull 时到 master 节点</li></ul></li><li><p><code>getResult.setStatus(status)</code>：设置结果状态</p></li><li><p><code>getResult.setNextBeginOffset(nextBeginOffset)</code>：设置客户端下一次 pull 时的 offset</p></li><li><p><code>getResult.setMaxOffset(maxOffset)</code>：设置 queue 的最大 offset 和最小 offset</p></li><li><p><code>return getResult</code>：返回结果对象</p></li></ul><hr><h4 id="broker-1" tabindex="-1"><a class="header-anchor" href="#broker-1" aria-hidden="true">#</a> Broker</h4><p>BrokerStartup 启动方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token function">createBrokerController</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BrokerController</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">BrokerController</span> controller<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    controller<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 启动</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BrokerStartup#createBrokerController：构造控制器，并初始化</p><ul><li><code>final BrokerController controller()</code>：创建实例对象</li><li><code>boolean initResult = controller.initialize()</code>：控制器初始化 <ul><li><code>this.registerProcessor()</code>：<strong>注册了处理器，包括发送消息、拉取消息、查询消息等核心处理器</strong></li><li><code>initialTransaction()</code>：初始化了事务服务，用于进行<strong>事务回查</strong></li></ul></li></ul><p>BrokerController#start：核心启动方法</p><ul><li><p><code>this.messageStore.start()</code>：<strong>启动存储服务</strong></p></li><li><p><code>this.remotingServer.start()</code>：启动 Netty 通信服务</p></li><li><p><code>this.fileWatchService.start()</code>：启动文件监听服务</p></li><li><p><code>startProcessorByHa(messageStoreConfig.getBrokerRole())</code>：<strong>启动事务回查</strong></p></li><li><p><code>this.scheduledExecutorService.scheduleAtFixedRate()</code>：每隔 30s 向 NameServer 上报 Topic 路由信息，<strong>心跳机制</strong></p><p><code>BrokerController.this.registerBrokerAll(true, false, brokerConfig.isForceRegister())</code></p></li></ul><hr><h3 id="producer" tabindex="-1"><a class="header-anchor" href="#producer" aria-hidden="true">#</a> Producer</h3><h4 id="生产者类" tabindex="-1"><a class="header-anchor" href="#生产者类" aria-hidden="true">#</a> 生产者类</h4><h5 id="生产者类-1" tabindex="-1"><a class="header-anchor" href="#生产者类-1" aria-hidden="true">#</a> 生产者类</h5><p>DefaultMQProducer 是生产者的默认实现类</p><p>成员变量：</p><ul><li><p>生产者实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">DefaultMQProducerImpl</span> defaultMQProducerImpl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>生产者组：发送事务消息，Broker 端进行事务回查（补偿机制）时，选择当前生产者组的下一个生产者进行事务回查</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> producerGroup<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>默认主题：isAutoCreateTopicEnable 开启时，当发送消息指定的 Topic 在 Namesrv 未找到路由信息，使用该值创建 Topic 信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> createTopicKey <span class="token operator">=</span> <span class="token class-name">TopicValidator</span><span class="token punctuation">.</span><span class="token constant">AUTO_CREATE_TOPIC_KEY_TOPIC</span><span class="token punctuation">;</span>
<span class="token comment">// 值为【TBW102】，Just for testing or demo program</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>消息重投：系统特性消息重试部分详解了三个参数的作用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> retryTimesWhenSendFailed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>		<span class="token comment">// 同步发送失败后重试的发送次数，加上第一次发送，一共三次</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> retryTimesWhenSendAsyncFailed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>	<span class="token comment">// 异步</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> retryAnotherBrokerWhenNotStoreOK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>	<span class="token comment">// 消息未存储成功，选择其他 Broker 重试</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>消息队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> defaultTopicQueueNums <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>		<span class="token comment">// 默认 Broker 创建的队列数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消息属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> sendMsgTimeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>					<span class="token comment">// 发送消息的超时限制</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> compressMsgBodyOverHowmuch <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>	<span class="token comment">// 压缩阈值，当 msg body 超过 4k 后使用压缩</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> maxMessageSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>		<span class="token comment">// 消息体的最大限制，默认 4M</span>
<span class="token keyword">private</span> <span class="token class-name">TraceDispatcher</span> traceDispatcher <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>		<span class="token comment">// 消息轨迹</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>构造方法：</p><ul><li><p>构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> namespace<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> producerGroup<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">=</span> namespace<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>producerGroup <span class="token operator">=</span> producerGroup<span class="token punctuation">;</span>
    <span class="token comment">// 创建生产者实现对象</span>
    defaultMQProducerImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducerImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>成员方法：</p><ul><li><p>start()：启动方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重置生产者组名，如果传递了命名空间，则 【namespace%group】</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setProducerGroup</span><span class="token punctuation">(</span><span class="token function">withNamespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>producerGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 生产者实现对象启动</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> traceDispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token comment">// 消息轨迹的逻辑</span>
   		traceDispatcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNamesrvAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>send()：<strong>发送消息</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 校验消息</span>
    <span class="token class-name">Validators</span><span class="token punctuation">.</span><span class="token function">checkMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置消息 Topic</span>
    msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token function">withNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>request()：请求方法，<strong>需要消费者回执消息</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token function">withNamespace</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="实现者类" tabindex="-1"><a class="header-anchor" href="#实现者类" aria-hidden="true">#</a> 实现者类</h5><p>DefaultMQProducerImpl 类是默认的生产者实现类</p><p>成员变量：</p><ul><li><p>实例对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMQProducer</span> defaultMQProducer<span class="token punctuation">;</span>	<span class="token comment">// 持有默认生产者对象，用来获取对象中的配置信息</span>
<span class="token keyword">private</span> <span class="token class-name">MQClientInstance</span> mQClientFactory<span class="token punctuation">;</span>			<span class="token comment">// 客户端实例对象，生产者启动后需要注册到该客户端对象内</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>主题发布信息映射表：key 是 Topic，value 是发布信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">&gt;</span></span> topicPublishInfoTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TopicPublishInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>异步发送消息：相关信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> asyncSenderThreadPoolQueue<span class="token punctuation">;</span><span class="token comment">// 异步发送消息，异步线程池使用的队列</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> defaultAsyncSenderExecutor<span class="token punctuation">;</span>	<span class="token comment">// 异步发送消息默认使用的线程池</span>
<span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> asyncSenderExecutor<span class="token punctuation">;</span>				<span class="token comment">// 异步消息发送线程池，指定后就不使用默认线程池了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定时器：执行定时任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token string">&quot;RequestHouseKeepingService&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 守护线程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>状态信息：服务的状态，默认创建状态</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ServiceState</span> serviceState <span class="token operator">=</span> <span class="token class-name">ServiceState</span><span class="token punctuation">.</span><span class="token constant">CREATE_JUST</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>压缩等级：ZIP 压缩算法的等级，默认是 5，越高压缩效果好，但是压缩的更慢</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> zipCompressLevel <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>getProperty<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>容错策略：选择队列的容错策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">MQFaultStrategy</span> mqFaultStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MQFaultStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>钩子：用来进行前置或者后置处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendMessageHook</span><span class="token punctuation">&gt;</span></span> sendMessageHookList<span class="token punctuation">;</span>			<span class="token comment">// 发送消息的钩子，留给用户扩展使用</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CheckForbiddenHook</span><span class="token punctuation">&gt;</span></span> checkForbiddenHookList<span class="token punctuation">;</span>	<span class="token comment">// 对比上面的钩子，可以抛异常，控制消息是否可以发送</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">;</span>						 	<span class="token comment">// 传递给 NettyRemotingClient</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>构造方法：</p><ul><li><p>默认构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMQProducerImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DefaultMQProducer</span> defaultMQProducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认 RPC HOOK 是空</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>defaultMQProducer<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>有参构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DefaultMQProducerImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DefaultMQProducer</span> defaultMQProducer<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 属性赋值</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer <span class="token operator">=</span> defaultMQProducer<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rpcHook <span class="token operator">=</span> rpcHook<span class="token punctuation">;</span>

    <span class="token comment">// 创建【异步消息线程池任务队列】，长度是 5w</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>asyncSenderThreadPoolQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建默认的异步消息任务线程池</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultAsyncSenderExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
        <span class="token comment">// 核心线程数和最大线程数都是 系统可用的计算资源（8核16线程的系统就是 16）...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="实现方法" tabindex="-1"><a class="header-anchor" href="#实现方法" aria-hidden="true">#</a> 实现方法</h5><ul><li><p>start()：启动方法，参数默认是 true，代表正常的启动路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> startFactory<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>this.serviceState = ServiceState.START_FAILED</code>：先修改为启动失败，成功后再修改，这种思想很常见</p></li><li><p><code>this.checkConfig()</code>：判断生产者组名不能是空，也不能是 default_PRODUCER</p></li><li><p><code>if (!getProducerGroup().equals(MixAll.CLIENT_INNER_PRODUCER_GROUP))</code>：条件成立说明当前生产者不是内部产生者，内部生产者是<strong>处理消息回退</strong>的这种情况使用的生产者</p><p><code>this.defaultMQProducer.changeInstanceNameToPID()</code>：修改生产者实例名称为当前进程的 PID</p></li><li><p><code> this.mQClientFactory = ...</code>：获取当前进程的 MQ 客户端实例对象，从 factoryTable 中获取 key 为 客户端 ID，格式是<code>ip@pid</code>，<strong>一个 JVM 进程只有一个 PID，也只有一个 MQClientInstance</strong></p></li><li><p><code>boolean registerOK = mQClientFactory.registerProducer(...)</code>：将生产者注册到 RocketMQ 客户端实例内</p></li><li><p><code>this.topicPublishInfoTable.put(...)</code>：添加一个主题发布信息，key 是 <strong>TBW102</strong> ，value 是一个空对象</p></li><li><p><code>mQClientFactory.start()</code>：启动 RocketMQ 客户端实例对象</p></li><li><p><code>this.mQClientFactory.sendHeartbeatToAllBrokerWithLock()</code>：RocketMQ <strong>客户端实例向已知的 Broker 节点发送一次心跳</strong>（也是定时任务）</p></li><li><p><code>this.timer.scheduleAtFixedRate()</code>： request 发送的消息需要消费着回执信息，启动定时任务每秒一次删除超时请求</p><ul><li>生产者 msg 添加信息关联 ID 发送到 Broker</li><li>消费者从 Broker 拿到消息后会检查 msg 类型是一个需要回执的消息，处理完消息后会根据 msg 关联 ID 和客户端 ID 生成一条响应结果消息发送到 Broker，Broker 判断为回执消息，会根据客户端ID 找到 channel 推送给生产者</li><li>生产者拿到回执消息后，读取出来关联 ID 找到对应的 RequestFuture，将阻塞线程唤醒</li></ul></li></ul></li><li><p>sendDefaultImpl()：发送消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//参数1：消息；参数2：发送模式（同步异步单向）；参数3：回调函数，异步发送时需要；参数4：发送超时时间, 默认 3 秒</span>
<span class="token keyword">private</span> <span class="token class-name">SendResult</span> <span class="token function">sendDefaultImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>this.makeSureStateOK()</code>：校验生产者状态是运行中，否则抛出异常</p></li><li><p><code>topicPublishInfo = this.tryToFindTopicPublishInfo(msg.getTopic())</code>：<strong>获取当前消息主题的发布信息</strong></p><ul><li><p><code>this.topicPublishInfoTable.get(topic)</code>：先尝试从本地主题发布信息映射表获取信息，获取不到继续执行</p></li><li><p><code>this.mQClientFactory.update...FromNameServer(topic)</code>：然后从 Namesrv 更新该 Topic 的路由数据</p></li><li><p><code>this.mQClientFactory.update...FromNameServer(...)</code>：<strong>路由数据是空，获取默认 TBW102 的数据</strong></p><p><code>return topicPublishInfo</code>：返回 TBW102 主题的发布信息</p></li></ul></li><li><p><code>String[] brokersSent = new String[timesTotal]</code>：下标索引代表第几次发送，值代表这次发送选择 Broker name</p></li><li><p><code>for (; times &lt; timesTotal; times++)</code>：循环发送，<strong>发送成功或者发送尝试次数达到上限，结束循环</strong></p></li><li><p><code>String lastBrokerName = null == mq ? null : mq.getBrokerName()</code>：获取上次发送失败的 BrokerName</p></li><li><p><code>mqSelected = this.selectOneMessageQueue(topicPublishInfo, lastBrokerName)</code>：从发布信息中选择一个队列，生产者的<strong>负载均衡策略</strong>，参考系统特性章节</p></li><li><p><code>brokersSent[times] = mq.getBrokerName()</code>：将本次选择的 BrokerName 存入数组</p></li><li><p><code>msg.setTopic(this.defaultMQProducer.withNamespace(msg.getTopic()))</code>：<strong>产生重投，重投消息需要加上标记</strong></p></li><li><p><code>sendResult = this.sendKernelImpl</code>：核心发送方法</p></li><li><p><code>switch (communicationMode)</code>：异步或者单向消息直接返回 null，异步通过回调函数处理，同步发送进入逻辑判断</p><p><code>if (sendResult.getSendStatus() != SendStatus.SEND_OK)</code>：<strong>服务端 Broker 存储失败，需要重试其他 Broker</strong></p></li><li><p><code>throw new MQClientException()</code>：未找到当前主题的路由数据，无法发送消息，抛出异常</p></li></ul></li><li><p>sendKernelImpl()：<strong>核心发送方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//参数1：消息；参数2：选择的队列；参数3：发送模式（同步异步单向）；参数4：回调函数，异步发送时需要；参数5：主题发布信息；参数6：剩余超时时间限制</span>
<span class="token keyword">private</span> <span class="token class-name">SendResult</span> <span class="token function">sendKernelImpl</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> mq<span class="token punctuation">,</span> communicationMode<span class="token punctuation">,</span> sendCallback<span class="token punctuation">,</span> topicPublishInfo<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>brokerAddr = this.mQClientFactory(...)</code>：<strong>获取指定 BrokerName 对应的 mater 节点的地址</strong>，master 节点的 ID 为 0，集群模式下，<strong>发送消息要发到主节点</strong></p></li><li><p><code>brokerAddr = MixAll.brokerVIPChannel()</code>：Broker 启动时会绑定两个服务器端口，一个是普通端口，一个是 VIP 端口，服务器端根据不同端口创建不同的的 NioSocketChannel</p></li><li><p><code>byte[] prevBody = msg.getBody()</code>：获取消息体</p></li><li><p><code>if (!(msg instanceof MessageBatch))</code>：非批量消息，需要重新设置消息 ID</p><p><code>MessageClientIDSetter.setUniqID(msg)</code>：<strong>msg id 由两部分组成</strong>，一部分是 ip 地址、进程号、Classloader 的 hashcode，另一部分是时间差（当前时间减去当月一号的时间）和计数器的值</p></li><li><p><code>if (this.tryToCompressMessage(msg))</code>：判断消息是否压缩，压缩需要设置压缩标记</p></li><li><p><code>hasCheckForbiddenHook、hasSendMessageHook</code>：执行钩子方法</p></li><li><p><code>requestHeader = new SendMessageRequestHeader()</code>：设置发送消息的消息头</p></li><li><p><code>if (requestHeader.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX))</code>：重投的发送消息</p></li><li><p><code>switch (communicationMode)</code>：异步发送一种处理方式，单向和同步同样的处理逻辑</p><p><code>sendResult = this.mQClientFactory.getMQClientAPIImpl().sendMessage()</code>：<strong>发送消息</strong></p><ul><li><code>request = RemotingCommand.createRequestCommand()</code>：创建一个 RequestCommand 对象</li><li><code>request.setBody(msg.getBody())</code>：<strong>将消息放入请求体</strong></li><li><code>switch (communicationMode)</code>：<strong>根据不同的模式 invoke 不同的方法</strong></li></ul></li></ul></li><li><p>request()：请求方法，消费者回执消息，这种消息是异步消息</p><ul><li><p><code>requestResponseFuture = new RequestResponseFuture(correlationId, timeout, null)</code>：创建请求响应对象</p></li><li><p><code>getRequestFutureTable().put(correlationId, requestResponseFuture)</code>：放入RequestFutureTable 映射表中</p></li><li><p><code>this.sendDefaultImpl(msg, CommunicationMode.ASYNC, new SendCallback())</code>：<strong>发送异步消息，有回调函数</strong></p></li><li><p><code>return waitResponse(msg, timeout, requestResponseFuture, cost)</code>：用来挂起请求的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">waitResponseMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求挂起</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>responseMsg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当消息被消费后，客户端处理响应时通过消息的关联 ID，从映射表中获取消息的 RequestResponseFuture，执行下面的方法唤醒挂起线程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putResponseMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> responseMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>responseMsg <span class="token operator">=</span> responseMsg<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><hr><h4 id="路由信息-1" tabindex="-1"><a class="header-anchor" href="#路由信息-1" aria-hidden="true">#</a> 路由信息</h4><p>TopicPublishInfo 类用来存储路由信息</p><p>成员变量：</p><ul><li><p>顺序消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> orderTopic <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消息队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> messageQueueList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 主题全部的消息队列</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ThreadLocalIndex</span> sendWhichQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 消息队列索引</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 【消息队列类】</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageQueue</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> topic<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> queueId<span class="token punctuation">;</span><span class="token comment">// 队列 ID</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>路由数据：主题对应的路由数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">TopicRouteData</span> topicRouteData<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicRouteData</span> <span class="token keyword">extends</span> <span class="token class-name">RemotingSerializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> orderTopicConf<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span></span> queueDatas<span class="token punctuation">;</span>		<span class="token comment">// 队列数据</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrokerData</span><span class="token punctuation">&gt;</span></span> brokerDatas<span class="token punctuation">;</span>	<span class="token comment">// Broker 数据</span>
    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* brokerAddr */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token comment">/* Filter Server */</span><span class="token operator">&gt;</span> filterServerTable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueData</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">QueueData</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">;</span>	<span class="token comment">// 节点名称</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> readQueueNums<span class="token punctuation">;</span>	<span class="token comment">// 读队列数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> writeQueueNums<span class="token punctuation">;</span>	<span class="token comment">// 写队列数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> perm<span class="token punctuation">;</span>			<span class="token comment">// 权限</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> topicSynFlag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrokerData</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrokerData</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cluster<span class="token punctuation">;</span>		<span class="token comment">// 集群名</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brokerName<span class="token punctuation">;</span>	<span class="token comment">// Broker节点名称</span>
    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Long</span><span class="token comment">/* brokerId */</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token comment">/* broker address */</span><span class="token operator">&gt;</span> brokerAddrs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>核心方法：</p><ul><li><p>selectOneMessageQueue()：<strong>选择消息队列</strong>使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数是上次失败时的 brokerName，可以为 null</span>
<span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastBrokerName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历消息队列</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 【获取队列的索引，+1】</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sendWhichQueue<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取队列的下标位置</span>
            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取消息队列</span>
            <span class="token class-name">MessageQueue</span> mq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageQueueList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 与上次选择的不同就可以返回</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastBrokerName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mq<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="公共配置" tabindex="-1"><a class="header-anchor" href="#公共配置" aria-hidden="true">#</a> 公共配置</h4><p>公共的配置信息类</p><ul><li><p>ClientConfig 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// Namesrv 地址配置</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> namesrvAddr <span class="token operator">=</span> <span class="token class-name">NameServerAddressUtils</span><span class="token punctuation">.</span><span class="token function">getNameServerAddresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端的 IP 地址</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> clientIP <span class="token operator">=</span> <span class="token class-name">RemotingUtil</span><span class="token punctuation">.</span><span class="token function">getLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端实例名称</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> instanceName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;rocketmq.client.name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DEFAULT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端回调线程池的数量，平台核心数，8核16线程的电脑返回16</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> clientCallbackExecutorThreads <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 命名空间</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> namespace<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">AccessChannel</span> accessChannel <span class="token operator">=</span> <span class="token class-name">AccessChannel</span><span class="token punctuation">.</span><span class="token constant">LOCAL</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取路由信息的间隔时间 30s</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> pollNameServerInterval <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端与 broker 之间的心跳周期 30s</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> heartbeatBrokerInterval <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token comment">// 消费者持久化消费的周期 5s</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> persistConsumerOffsetInterval <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> pullTimeDelayMillsWhenException <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> unitMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> unitName<span class="token punctuation">;</span>
    <span class="token comment">// vip 通道，broker 启动时绑定两个端口，其中一个是 vip 通道</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> vipChannelEnabled <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 语言，默认是 Java</span>
    <span class="token keyword">private</span> <span class="token class-name">LanguageCode</span> language <span class="token operator">=</span> <span class="token class-name">LanguageCode</span><span class="token punctuation">.</span><span class="token constant">JAVA</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>NettyClientConfig</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// 客户端工作线程数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> clientWorkerThreads <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">// 回调处理线程池 线程数：平台核心数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> clientCallbackExecutorThreads <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 单向请求并发数，默认 65535</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> clientOnewaySemaphoreValue <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span><span class="token constant">CLIENT_ONEWAY_SEMAPHORE_VALUE</span><span class="token punctuation">;</span>
    <span class="token comment">// 异步请求并发数，默认 65535</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> clientAsyncSemaphoreValue <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span><span class="token constant">CLIENT_ASYNC_SEMAPHORE_VALUE</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端连接服务器的超时时间限制 3秒</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> connectTimeoutMillis <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端未激活周期，60s（指定时间内 ch 未激活，需要关闭）</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> channelNotActiveInterval <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端与服务器 ch 最大空闲时间 2分钟</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> clientChannelMaxIdleTimeSeconds <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>

    <span class="token comment">// 底层 Socket 写和收 缓冲区的大小 65535  64k</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> clientSocketSndBufSize <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>socketSndbufSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> clientSocketRcvBufSize <span class="token operator">=</span> <span class="token class-name">NettySystemConfig</span><span class="token punctuation">.</span>socketRcvbufSize<span class="token punctuation">;</span>
    <span class="token comment">// 客户端 netty 是否启动内存池</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> clientPooledByteBufAllocatorEnable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 客户端是否超时关闭 Socket 连接</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> clientCloseSocketIfTimeout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="客户端类" tabindex="-1"><a class="header-anchor" href="#客户端类" aria-hidden="true">#</a> 客户端类</h4><h5 id="成员属性-8" tabindex="-1"><a class="header-anchor" href="#成员属性-8" aria-hidden="true">#</a> 成员属性</h5><p>MQClientInstance 是 RocketMQ 客户端实例，在一个 JVM 进程中只有一个客户端实例，<strong>既服务于生产者，也服务于消费者</strong></p><p>成员变量：</p><ul><li><p>配置信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> instanceIndex<span class="token punctuation">;</span>			<span class="token comment">// 索引一般是 0，因为客户端实例一般都是一个进程只有一个</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> clientId<span class="token punctuation">;</span>				<span class="token comment">// 客户端 ID ip@pid</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> bootTimestamp<span class="token punctuation">;</span>			<span class="token comment">// 客户端的启动时间</span>
<span class="token keyword">private</span> <span class="token class-name">ServiceState</span> serviceState<span class="token punctuation">;</span>			<span class="token comment">// 客户端状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生产者消费者的映射表：key 是组名</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MQProducerInner</span><span class="token punctuation">&gt;</span></span> producerTable
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MQConsumerInner</span><span class="token punctuation">&gt;</span></span> consumerTable
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MQAdminExtInner</span><span class="token punctuation">&gt;</span></span> adminExtTable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>网络层配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">NettyClientConfig</span> nettyClientConfig<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>核心功能的实现：负责将 MQ 业务层的数据转换为网络层的 RemotingCommand 对象，使用内部持有的 NettyRemotingClient 对象的 invoke 系列方法，完成网络 IO（同步、异步、单向）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MQClientAPIImpl</span> mQClientAPIImpl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>本地路由数据：key 是主题名称，value 路由信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TopicRouteData</span><span class="token punctuation">&gt;</span></span> topicRouteTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>锁信息：两把锁，锁不同的数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lockNamesrv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lockHeartbeat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调度线程池：单线程，执行定时任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Broker 映射表：key 是 BrokerName</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 物理节点映射表，value：Long 是 brokerID，【ID=0 的是主节点，其他是从节点】，String 是地址 ip:port</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> brokerAddrTable<span class="token punctuation">;</span>
<span class="token comment">// 物理节点版本映射表，String 是地址 ip:port，Integer 是版本</span>
<span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> brokerVersionTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>客户端的协议处理器</strong>：用于处理 IO 事件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClientRemotingProcessor</span> clientRemotingProcessor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消息服务：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PullMessageService</span> pullMessageService<span class="token punctuation">;</span>		<span class="token comment">// 拉消息服务</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RebalanceService</span> rebalanceService<span class="token punctuation">;</span>			<span class="token comment">// 消费者负载均衡服务</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConsumerStatsManager</span> consumerStatsManager<span class="token punctuation">;</span>	<span class="token comment">// 消费者状态管理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内部生产者实例：处理消费端<strong>消息回退</strong>，用该生产者发送回退消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMQProducer</span> defaultMQProducer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>心跳次数统计：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> sendHeartbeatTimesTotal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>构造方法：</p><ul><li><p>MQClientInstance 有参构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MQClientInstance</span><span class="token punctuation">(</span><span class="token class-name">ClientConfig</span> clientConfig<span class="token punctuation">,</span> <span class="token keyword">int</span> instanceIndex<span class="token punctuation">,</span> <span class="token class-name">String</span> clientId<span class="token punctuation">,</span> <span class="token class-name">RPCHook</span> rpcHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig <span class="token operator">=</span> clientConfig<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instanceIndex <span class="token operator">=</span> instanceIndex<span class="token punctuation">;</span>
    <span class="token comment">// Netty 相关的配置信息</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nettyClientConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 平台核心数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nettyClientConfig<span class="token punctuation">.</span><span class="token function">setClientCallbackExecutorThreads</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nettyClientConfig<span class="token punctuation">.</span><span class="token function">setUseTLS</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">.</span><span class="token function">isUseTLS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 【创建客户端协议处理器】</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientRemotingProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientRemotingProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建 API 实现对象</span>
    <span class="token comment">// 参数一：客户端网络配置</span>
    <span class="token comment">// 参数二：客户端协议处理器，注册到客户端网络层</span>
    <span class="token comment">// 参数三：rpcHook，注册到客户端网络层</span>
    <span class="token comment">// 参数四：客户端配置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientAPIImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MQClientAPIImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nettyClientConfig<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientRemotingProcessor<span class="token punctuation">,</span> rpcHook<span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//...</span>
    <span class="token comment">// 内部生产者，指定内部生产者的组</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token constant">CLIENT_INNER_PRODUCER_GROUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>MQClientAPIImpl 有参构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MQClientAPIImpl</span><span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">,</span> clientRemotingProcessor<span class="token punctuation">,</span> rpcHook<span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig <span class="token operator">=</span> clientConfig<span class="token punctuation">;</span>
    topAddressing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopAddressing</span><span class="token punctuation">(</span><span class="token class-name">MixAll</span><span class="token punctuation">.</span><span class="token function">getWSAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientConfig<span class="token punctuation">.</span><span class="token function">getUnitName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建网络层对象，参数二为 null 说明客户端并不关心 channel event</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyRemotingClient</span><span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 业务处理器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clientRemotingProcessor <span class="token operator">=</span> clientRemotingProcessor<span class="token punctuation">;</span>
    <span class="token comment">// 注册 RpcHook</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingClient<span class="token punctuation">.</span><span class="token function">registerRPCHook</span><span class="token punctuation">(</span>rpcHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ...</span>
    <span class="token comment">// 注册回退消息的请求码</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>remotingClient<span class="token punctuation">.</span><span class="token function">registerProcessor</span><span class="token punctuation">(</span><span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">PUSH_REPLY_MESSAGE_TO_CLIENT</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientRemotingProcessor<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-7" tabindex="-1"><a class="header-anchor" href="#成员方法-7" aria-hidden="true">#</a> 成员方法</h5><ul><li><p>start()：启动方法</p><ul><li><code>synchronized (this)</code>：加锁保证线程安全，保证只有一个实例对象启动</li><li><code>this.mQClientAPIImpl.start()</code>：启动客户端网络层，底层调用 RemotingClient 类</li><li><code>this.startScheduledTask()</code>：启动定时任务</li><li><code>this.pullMessageService.start()</code>：启动拉取消息服务</li><li><code>this.rebalanceService.start()</code>：启动负载均衡服务</li><li><code>this.defaultMQProducer...start(false)</code>：启动内部生产者，参数为 false 代表不启动实例</li></ul></li><li><p>startScheduledTask()：<strong>启动定时任务</strong>，调度线程池是单线程</p><ul><li><p><code>if (null == this.clientConfig.getNamesrvAddr())</code>：Namesrv 地址是空，需要两分钟拉取一次 Namesrv 地址</p></li><li><p>定时任务 1：<strong>从 Namesrv 更新客户端本地的路由数据</strong>，周期 30 秒一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取生产者和消费者订阅的主题集合，遍历集合，对比从 namesrv 拉取最新的主题路由数据和本地数据，是否需要更新</span>
<span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateTopicRouteInfoFromNameServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定时任务 2：周期 30 秒一次，两个任务</p><ul><li><strong>清理下线的 Broker 节点</strong>，遍历客户端的 Broker 物理节点映射表，将所有主题数据都不包含的 Broker 物理节点清理掉，如果被清理的 Broker 下所有的物理节点都没有了，就将该 Broker 的映射数据删除掉</li><li><strong>向在线的所有的 Broker 发送心跳数据</strong>，同步发送的方式，返回值是 Broker 物理节点的版本号，更新版本映射表</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanOfflineBroker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendHeartbeatToAllBrokerWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 心跳数据</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeartbeatData</span> <span class="token keyword">extends</span> <span class="token class-name">RemotingSerializable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 客户端 ID  ip@pid</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> clientID<span class="token punctuation">;</span>
    <span class="token comment">// 存储客户端所有生产者数据</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProducerData</span><span class="token punctuation">&gt;</span></span> producerDataSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProducerData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 存储客户端所有消费者数据</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConsumerData</span><span class="token punctuation">&gt;</span></span> consumerDataSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConsumerData</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定时任务 3：消费者持久化消费数据，周期 5 秒一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">persistAllConsumerOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>定时任务 4：动态调整消费者线程池，周期 1 分钟一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MQClientInstance</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">adjustThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>updateTopicRouteInfoFromNameServer()：<strong>更新路由数据</strong>，通过加锁保证当前实例只有一个线程去更新</p><ul><li><p><code>if (isDefault &amp;&amp; defaultMQProducer != null)</code>：需要默认数据</p><p><code>topicRouteData = ...getDefaultTopicRouteInfoFromNameServer()</code>：从 Namesrv 获取默认的 TBW102 的路由数据</p></li><li><p><code>topicRouteData = ...getTopicRouteInfoFromNameServer(topic)</code>：需要<strong>从 Namesrv 获取</strong>路由数据（同步）</p></li><li><p><code>old = this.topicRouteTable.get(topic)</code>：获取客户端实例本地的该主题的路由数据</p></li><li><p><code>boolean changed = topicRouteDataIsChange(old, topicRouteData)</code>：对比本地和最新下拉的数据是否一致</p></li><li><p><code>if (changed)</code>：不一致进入更新逻辑</p><p><code>this.brokerAddrTable.put(...)</code>：更新客户端 broker 物理<strong>节点映射表</strong></p><p><code>Update Pub info</code>：更新生产者信息</p><ul><li><code>publishInfo = topicRouteData2TopicPublishInfo(topic, topicRouteData)</code>：将主题路由数据转化为发布数据，会<strong>创建消息队列 MQ</strong>，放入发布数据对象的集合中</li><li><code>impl.updateTopicPublishInfo(topic, publishInfo)</code>：生产者将主题的发布数据保存到它本地，方便发送消息使用</li></ul><p><code>Update sub info</code>：更新消费者信息，创建 MQ 队列，更新订阅信息，用于负载均衡</p><p><code>this.topicRouteTable.put(topic, cloneTopicRouteData)</code>：<strong>将数据放入本地路由表</strong></p></li></ul></li></ul><hr><h4 id="网络通信-1" tabindex="-1"><a class="header-anchor" href="#网络通信-1" aria-hidden="true">#</a> 网络通信</h4><h5 id="成员属性-9" tabindex="-1"><a class="header-anchor" href="#成员属性-9" aria-hidden="true">#</a> 成员属性</h5><p>NettyRemotingClient 类负责客户端的网络通信</p><p>成员变量：</p><ul><li><p>Netty 服务相关属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">NettyClientConfig</span> nettyClientConfig<span class="token punctuation">;</span>			<span class="token comment">// 客户端的网络层配置</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Bootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 客户端网络层启动对象</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EventLoopGroup</span> eventLoopGroupWorker<span class="token punctuation">;</span>			<span class="token comment">// 客户端网络层 Netty IO 线程组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Channel 映射表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ChannelWrapper</span><span class="token punctuation">&gt;</span></span> channelTables<span class="token punctuation">;</span><span class="token comment">// key 是服务器的地址，value 是通道对象</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lockChannelTables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		  <span class="token comment">// 锁，控制并发安全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定时器：启动定时任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token string">&quot;ClientHouseKeepingService&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>线程池：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> publicExecutor<span class="token punctuation">;</span>		<span class="token comment">// 公共线程池</span>
<span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> callbackExecutor<span class="token punctuation">;</span> 	<span class="token comment">// 回调线程池，客户端发起异步请求，服务器的响应数据由回调线程池处理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件监听器：客户端这里是 null</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChannelEventListener</span> channelEventListener<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>构造方法</p><ul><li><p>无参构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NettyRemotingClient</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NettyClientConfig</span> nettyClientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>有参构造：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">NettyRemotingClient</span><span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">,</span> channelEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 父类创建了2个信号量，1、控制单向请求的并发度，2、控制异步请求的并发度</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientOnewaySemaphoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientAsyncSemaphoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nettyClientConfig <span class="token operator">=</span> nettyClientConfig<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>channelEventListener <span class="token operator">=</span> channelEventListener<span class="token punctuation">;</span>

    <span class="token comment">// 创建公共线程池</span>
    <span class="token keyword">int</span> publicThreadNums <span class="token operator">=</span> nettyClientConfig<span class="token punctuation">.</span><span class="token function">getClientCallbackExecutorThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>publicThreadNums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        publicThreadNums <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>publicExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>publicThreadNums<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建 Netty IO 线程，1个线程</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>nettyClientConfig<span class="token punctuation">.</span><span class="token function">isUseTLS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  		sslContext <span class="token operator">=</span> <span class="token class-name">TlsHelper</span><span class="token punctuation">.</span><span class="token function">buildSslContext</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-8" tabindex="-1"><a class="header-anchor" href="#成员方法-8" aria-hidden="true">#</a> 成员方法</h5><ul><li><p>start()：启动方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// channel pipeline 内的 handler 使用的线程资源，默认 4 个</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>defaultEventExecutorGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventExecutorGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 配置 netty 客户端启动类对象</span>
    <span class="token class-name">Bootstrap</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventLoopGroupWorker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token comment">//...</span>
        <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 加几个handler</span>
                pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>
                    <span class="token comment">// 服务端的数据，都会来到这个</span>
                    <span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意 Bootstrap 只是配置好客户端的元数据了，【在这里并没有创建任何 channel 对象】</span>
    <span class="token comment">// 定时任务 扫描 responseTable 中超时的 ResponseFuture，避免客户端线程长时间阻塞</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
     	<span class="token class-name">NettyRemotingClient</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scanResponseTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里是 null，不启动</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>channelEventListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nettyEventExecutor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>单向通信：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">invokeSync</span><span class="token punctuation">(</span><span class="token class-name">String</span> addr<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">long</span> timeoutMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开始时间</span>
    <span class="token keyword">long</span> beginStartTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取或者创建客户端与服务端（addr）的通道 channel</span>
    <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndCreateChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 条件成立说明客户端与服务端 channel 通道正常，可以通信</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> channel<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行 rpcHook 拓展点</span>
            <span class="token function">doBeforeRpcHooks</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 计算耗时，如果当前耗时已经超过 timeoutMillis 限制，则直接抛出异常，不再进行系统通信</span>
            <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginStartTime<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">&lt;</span> costTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingTimeoutException</span><span class="token punctuation">(</span><span class="token string">&quot;invokeSync call timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 参数1：客户端-服务端通道channel</span>
            <span class="token comment">// 参数二：网络层传输对象，封装着请求数据</span>
            <span class="token comment">// 参数三：剩余的超时限制</span>
            <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invokeSyncImpl</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 后置处理</span>
            <span class="token function">doAfterRpcHooks</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span><span class="token function">parseChannelRemoteAddr</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 返回响应数据</span>
            <span class="token keyword">return</span> response<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingSendRequestException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeChannel</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingConnectException</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="延迟消息" tabindex="-1"><a class="header-anchor" href="#延迟消息" aria-hidden="true">#</a> 延迟消息</h4><h5 id="消息处理" tabindex="-1"><a class="header-anchor" href="#消息处理" aria-hidden="true">#</a> 消息处理</h5><p>BrokerStartup 初始化 BrokerController 调用 <code>registerProcessor()</code> 方法将 SendMessageProcessor 注册到 NettyRemotingServer 中，对应的请求 ID 为 <code>SEND_MESSAGE = 10</code>，NettyServerHandler 在处理请求时通过 CMD 会获取处理器执行 processRequest</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：处理通道的事件；   参数二：客户端</span>
<span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token class-name">RemotingCommand</span> response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   	response <span class="token operator">=</span> <span class="token function">asyncProcessRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SendMessageProcessor#asyncConsumerSendMsgBack：异步发送消费者的回调消息</p><ul><li><p><code>final RemotingCommand response</code>：创建一个服务器响应对象</p></li><li><p><code>final ConsumerSendMsgBackRequestHeader requestHeader</code>：解析出客户端请求头信息，几个<strong>核心字段</strong>：</p><ul><li><code>private Long offset</code>：回退消息的 CommitLog offset</li><li><code>private Integer delayLevel</code>：延迟级别，一般是 0</li><li><code>private String originMsgId, originTopic</code>：原始的消息 ID，主题</li><li><code>private Integer maxReconsumeTimes</code>：最大重试次数，默认是 16 次</li></ul></li><li><p><code>if ()</code>：鉴权，是否找到订阅组配置、Broker 是否支持写请求、订阅组是否支持消息重试</p></li><li><p><code>String newTopic = MixAll.getRetryTopic(...)</code>：<strong>获取消费者组的重试主题</strong>，规则是 <code>%RETRY%GroupName</code></p></li><li><p><code>int queueIdInt = Math.abs()</code>：<strong>重试主题下的队列 ID 是 0</strong></p></li><li><p><code>TopicConfig topicConfig</code>：获取重试主题的配置信息</p></li><li><p><code>MessageExt msgExt</code>：根据消息的物理 offset 到存储模块查询，内部先查询出这条消息的 size，然后再根据 offset 和 size 查询出整条 msg</p></li><li><p><code>final String retryTopic</code>：获取消息的原始主题</p></li><li><p><code>if (null == retryTopic)</code>：条件成立说明<strong>当前消息是第一次被回退</strong>， 添加 <code>RETRY_TOPIC</code> 属性</p></li><li><p><code>msgExt.setWaitStoreMsgOK(false)</code>：异步刷盘</p></li><li><p><code>if (msgExt...() &gt;= maxReconsumeTimes || delayLevel &lt; 0)</code>：消息重试次数超过最大次数，不支持重试</p><p><code>newTopic = MixAll.getDLQTopic()</code>：<strong>获取消费者的死信队列</strong>，规则是 <code>%DLQ%GroupName</code></p><p><code>queueIdInt, topicConfig</code>：死信队列 ID 为 0，创建死信队列的配置</p></li><li><p><code>if (0 == delayLevel)</code>：说明延迟级别由 Broker 控制</p><p><code>delayLevel = 3 + msgExt.getReconsumeTimes()</code>：<strong>延迟级别默认从 3 级开始</strong>，每重试一次，延迟级别 +1</p></li><li><p><code>msgExt.setDelayTimeLevel(delayLevel)</code>：<strong>将延迟级别设置进消息属性</strong>，存储时会检查该属性，该属性值 &gt; 0 会<strong>将消息的主题和队列修改为调度主题和调度队列 ID</strong></p></li><li><p><code>MessageExtBrokerInner msgInner</code>：创建一条空消息，消息属性从 offset 查询出来的 msg 中拷贝</p></li><li><p><code>msgInner.setReconsumeTimes)</code>：重试次数设置为原 msg 的次数 +1</p></li><li><p><code>UtilAll.isBlank(originMsgId)</code>：判断消息是否是初次返回到服务器</p><ul><li>true：说明 msgExt 消息是第一次被返回到服务器，此时使用该 msg 的 id 作为 originMessageId</li><li>false：说明原始消息已经被重试不止 1 次，此时使用 offset 查询出来的 msg 中的 originMessageId</li></ul></li><li><p><code>CompletableFuture putMessageResult = ..asyncPutMessage(msgInner)</code>：调用存储模块存储消息</p><p><code>DefaultMessageStore#asyncPutMessage</code>：</p><ul><li><code>PutMessageResult result = this.commitLog.asyncPutMessage(msg)</code>：<strong>将新消息存储到 CommitLog 中</strong></li></ul></li></ul><hr><h5 id="调度服务" tabindex="-1"><a class="header-anchor" href="#调度服务" aria-hidden="true">#</a> 调度服务</h5><p>DefaultMessageStore 中有成员属性 ScheduleMessageService，在 start 方法中会启动该调度服务</p><p>成员变量：</p><ul><li><p>延迟级别属性表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 存储延迟级别对应的 延迟时间长度 （单位：毫秒）</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span> <span class="token comment">/* level */</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token comment">/* delay timeMillis */</span><span class="token operator">&gt;</span> delayLevelTable<span class="token punctuation">;</span>
<span class="token comment">// 存储延迟级别 queue 的消费进度 offset，该 table 每 10 秒钟，会持久化一次，持久化到本地磁盘</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span> <span class="token comment">/* level */</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token comment">/* offset */</span><span class="token operator">&gt;</span> offsetTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最大延迟级别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> maxDelayLevel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>模块启动状态：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> started <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>定时器：内部有线程资源，可执行调度任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Timer</span> timer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>成员方法：</p><ul><li><p>load()：加载调度消息，<strong>初始化 delayLevelTable 和 offsetTable</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>start()：启动消息调度服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>if (started.compareAndSet(false, true))</code>：将启动状态设为 true</p></li><li><p><code>this.timer</code>：创建定时器对象</p></li><li><p><code>for (... : this.delayLevelTable.entrySet())</code>：为<strong>每个延迟级别创建一个延迟任务</strong>提交到 timer ，周期执行，这样就可以<strong>将延迟消息得到及时的消费</strong></p></li><li><p><code>this.timer.scheduleAtFixedRate()</code>：提交周期型任务，延迟 10 秒执行，周期为 10 秒，持久化延迟队列消费进度任务</p><p><code>ScheduleMessageService.this.persist()</code>：持久化消费进度</p></li></ul></li></ul><hr><h5 id="调度任务" tabindex="-1"><a class="header-anchor" href="#调度任务" aria-hidden="true">#</a> 调度任务</h5><p>DeliverDelayedMessageTimerTask 是一个任务类</p><p>成员变量：</p><ul><li><p>延迟级别：延迟队列任务处理的延迟级别</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> delayLevel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费进度：延迟队列任务处理的延迟队列的消费进度</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> offset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>成员方法：</p><ul><li><p>run()：执行任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeOnTimeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>executeOnTimeup()：执行任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeOnTimeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>ConsumeQueue cq</code>：获取出该延迟队列任务处理的<strong>延迟队列 ConsumeQueue</strong></p></li><li><p><code>SelectMappedBufferResult bufferCQ</code>：根据消费进度查询出 SMBR 对象</p></li><li><p><code>for (; i &lt; bufferCQ.getSize(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE)</code>：每次读取 20 各字节的数据</p></li><li><p><code>offsetPy, sizePy</code>：延迟消息的物理偏移量和消息大小</p></li><li><p><code>long tagsCode</code>：延迟消息的交付时间，在 ReputMessageService 转发时根据消息的 DELAY 属性是否 &gt;0 ，会在 tagsCode 字段存储交付时间</p></li><li><p><code>long deliver... = this.correctDeliverTimestamp(..)</code>：<strong>校准交付时间</strong>，延迟时间过长会调整为当前时间立刻执行</p></li><li><p><code>long countdown = deliverTimestamp - now</code>：计算差值</p></li><li><p><code>if (countdown &lt;= 0)</code>：<strong>消息已经到达交付时间了</strong></p><p><code>MessageExt msgExt</code>：根据物理偏移量和消息大小获取这条消息</p><p><code>MessageExtBrokerInner msgInner</code>：<strong>构建一条新消息</strong>，将原消息的属性拷贝过来</p><ul><li><code>long tagsCodeValue</code>：不再是交付时间了</li><li><code>MessageAccessor.clearProperty(msgInner, DELAY..)</code>：清理新消息的 DELAY 属性，避免存储时重定向到延迟队列</li><li><code>msgInner.setTopic()</code>：<strong>修改主题为原始的主题 <code>%RETRY%GroupName</code></strong></li><li><code>String queueIdStr</code>：修改队列 ID 为原始的 ID</li></ul><p><code>PutMessageResult putMessageResult</code>：<strong>将新消息存储到 CommitLog</strong>，消费者订阅的是目标主题，会再次消费该消息</p></li><li><p><code>else</code>：消息还未到达交付时间</p><p><code>ScheduleMessageService.this.timer.schedule()</code>：创建该延迟级别的任务，延迟 countDown 毫秒之后再执行</p><p><code>ScheduleMessageService.this.updateOffset()</code>：更新延迟级别队列的消费进度</p></li><li><p><code>PutMessageResult putMessageResult</code></p></li><li><p><code>bufferCQ == null</code>：说明通过消费进度没有获取到数据</p><p><code>if (offset &lt; cqMinOffset)</code>：如果消费进度比最小位点都小，说明是过期数据，重置为最小位点</p></li><li><p><code>ScheduleMessageService.this.timer.schedule()</code>：重新提交该延迟级别对应的延迟队列任务，延迟 100 毫秒后执行</p></li></ul></li></ul><hr><h4 id="事务消息-1" tabindex="-1"><a class="header-anchor" href="#事务消息-1" aria-hidden="true">#</a> 事务消息</h4><h5 id="生产者类-2" tabindex="-1"><a class="header-anchor" href="#生产者类-2" aria-hidden="true">#</a> 生产者类</h5><p>TransactionMQProducer 类发送事务消息时使用</p><p>成员变量：</p><ul><li><p>事务回查线程池资源：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> executorService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>事务监听器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">TransactionListener</span> transactionListener<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>核心方法：</p><ul><li><p>start()：启动方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.defaultMQProducerImpl.initTransactionEnv()</code>：初始化生产者实例和回查线程池资源</li><li><code>super.start()</code>：启动生产者实例</li></ul></li><li><p>sendMessageInTransaction()：发送事务消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TransactionSendResult</span> <span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    msg<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token class-name">NamespaceUtil</span><span class="token punctuation">.</span><span class="token function">wrapNamespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用实现类的发送方法</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultMQProducerImpl<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>TransactionListener transactionListener = getCheckListener()</code>：获取监听器</p></li><li><p><code>if (null == localTransactionExecuter &amp;&amp; null == transactionListener)</code>：两者都为 null 抛出异常</p></li><li><p><code>MessageAccessor.putProperty(msg, MessageConst.PROPERTY_TRANSACTION_PREPARED, &quot;true&quot;)</code>：<strong>设置事务标志</strong></p></li><li><p><code>sendResult = this.send(msg)</code>：发送消息，同步发送</p></li><li><p><code>switch (sendResult.getSendStatus())</code>：<strong>判断发送消息的结果状态</strong></p></li><li><p><code>case SEND_OK</code>：消息发送成功</p><p><code>msg.setTransactionId(transactionId)</code>：<strong>设置事务 ID 为消息的 UNIQ_KEY 属性</strong></p><p><code>localTransactionState = ...executeLocalTransactionBranch(msg, arg)</code>：<strong>执行本地事务</strong></p></li><li><p><code>case SLAVE_NOT_AVAILABLE</code>：其他情况都需要回滚事务</p><p><code>localTransactionState = LocalTransactionState.ROLLBACK_MESSAGE</code>：<strong>事务状态设置为回滚</strong></p></li><li><p><code>this.endTransaction(sendResult, ...)</code>：结束事务</p><ul><li><code>EndTransactionRequestHeader requestHeader</code>：构建事务结束头对象</li><li><code>this.mQClientFactory.getMQClientAPIImpl().endTransactionOneway()</code>：向 Broker 发起事务结束的单向请求</li></ul></li></ul></li></ul><hr><h5 id="接受消息" tabindex="-1"><a class="header-anchor" href="#接受消息" aria-hidden="true">#</a> 接受消息</h5><p>SendMessageProcessor 是服务端处理客户端发送来的消息的处理器，<code>processRequest()</code> 方法处理请求</p><p>核心方法：</p><ul><li><p><code>asyncProcessRequest()</code>：处理请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncProcessRequest</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span>
                                                              <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">SendMessageContext</span> mqtraceContext<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 回调消息回退</span>
        <span class="token keyword">case</span> <span class="token class-name">RequestCode</span><span class="token punctuation">.</span><span class="token constant">CONSUMER_SEND_MSG_BACK</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncConsumerSendMsgBack</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token comment">// 解析出请求头对象</span>
            <span class="token class-name">SendMessageRequestHeader</span> requestHeader <span class="token operator">=</span> <span class="token function">parseRequestHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestHeader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 创建上下文对象</span>
            mqtraceContext <span class="token operator">=</span> <span class="token function">buildMsgContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 前置处理器</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">executeSendMessageHookBefore</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> mqtraceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断是否是批量消息</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">isBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncSendBatchMessage</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> mqtraceContext<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncSendMessage</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> mqtraceContext<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>asyncSendMessage()：异步处理发送消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RemotingCommand</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncSendMessage</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token class-name">SendMessageContext</span> mqtraceContext<span class="token punctuation">,</span> <span class="token class-name">SendMessageRequestHeader</span> requestHeader<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>RemotingCommand response</code>：创建响应对象</p></li><li><p><code>MessageExtBrokerInner msgInner = new MessageExtBrokerInner()</code>：创建 msgInner 对象，并赋值相关的属性，主题和队列 ID 都是请求头中的</p></li><li><p><code>String transFlag</code>：<strong>获取事务属性</strong></p></li><li><p><code>if (transFlag != null &amp;&amp; Boolean.parseBoolean(transFlag))</code>：判断事务属性是否是 true，走事务消息的存储流程</p><ul><li><p><code>putMessageResult = ...asyncPrepareMessage(msgInner)</code>：<strong>事务消息处理流程</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncPutHalfMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageExtBrokerInner</span> messageInner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用存储模块，将修改后的 msg 存储进 Broker(CommitLog)</span>
    <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">asyncPutMessage</span><span class="token punctuation">(</span><span class="token function">parseHalfMessageInner</span><span class="token punctuation">(</span>messageInner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TransactionalMessageBridge#parseHalfMessageInner：</p><ul><li><code>MessageAccessor.putProperty(...)</code>：<strong>将消息的原主题和队列 ID 放入消息的属性中</strong></li><li><code>msgInner.setSysFlag(...)</code>：消息设置为非事务状态</li><li><code>msgInner.setTopic(TransactionalMessageUtil.buildHalfTopic())</code>：<strong>消息主题设置为半消息主题</strong></li><li><code>msgInner.setQueueId(0)</code>：<strong>队列 ID 设置为 0</strong></li></ul></li></ul></li><li><p><code>else</code>：普通消息存储</p></li></ul></li></ul><hr><h5 id="回查处理" tabindex="-1"><a class="header-anchor" href="#回查处理" aria-hidden="true">#</a> 回查处理</h5><p>ClientRemotingProcessor 是客户端用于处理请求，创建 MQClientAPIImpl 时将该处理器注册到 Netty 中，<code>processRequest()</code> 方法根据请求的命令码，进行不同的处理，事务回查的处理命令码为 <code>CHECK_TRANSACTION_STATE</code></p><p>Broker 端有定时任务发送回查请求</p><p>成员方法：</p><ul><li><p>checkTransactionState()：检查事务状态</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">checkTransactionState</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>final CheckTransactionStateRequestHeader requestHeader</code>：解析出请求头对象</li><li><code>final MessageExt messageExt</code>：从请求 body 中解析出服务器回查的事务消息</li><li><code>String transactionId</code>：提取 UNIQ_KEY 字段属性值赋值给事务 ID</li><li><code>final String group</code>：提取生产者组名</li><li><code>MQProducerInner producer = this...selectProducer(group)</code>：根据生产者组获取生产者对象</li><li><code>String addr = RemotingHelper.parseChannelRemoteAddr()</code>：解析出要回查的 Broker 服务器的地址</li><li><code>producer.checkTransactionState(addr, messageExt, requestHeader)</code>：生产者的事务回查 <ul><li><code>Runnable request = new Runnable()</code>：<strong>创建回查事务状态任务对象</strong><ul><li>获取生产者的 TransactionCheckListener 和 TransactionListener，选择一个不为 null 的监听器进行事务状态回查</li><li><code>this.processTransactionState()</code>：处理回查状态 <ul><li><code>EndTransactionRequestHeader thisHeader</code>：构建 EndTransactionRequestHeader 对象</li><li><code>DefaultMQProducerImpl...endTransactionOneway()</code>：向 Broker 发起结束事务单向请求，<strong>二阶段提交</strong></li></ul></li></ul></li><li><code>this.checkExecutor.submit(request)</code>：提交到线程池运行</li></ul></li></ul></li></ul>`,283),Q={href:"https://www.processon.com/view/link/61c8257e0e3e7474fb9dcbc0",target:"_blank",rel:"noopener noreferrer"},P={href:"https://space.bilibili.com/457326371",target:"_blank",rel:"noopener noreferrer"},L=t(`<hr><h5 id="事务提交" tabindex="-1"><a class="header-anchor" href="#事务提交" aria-hidden="true">#</a> 事务提交</h5><p>EndTransactionProcessor 类是服务端用来处理客户端发来的提交或者回滚请求</p><ul><li><p>processRequest()：处理请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RemotingCommand</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>EndTransactionRequestHeader requestHeader</code>：从请求中解析出 EndTransactionRequestHeader</p></li><li><p><code>if (MessageSysFlag.TRANSACTION_COMMIT_TYPE)</code>：<strong>事务提交</strong></p><p><code>result = this.brokerController...commitMessage(requestHeader)</code>：根据 commitLogOffset 提取出 halfMsg 消息</p><p><code>MessageExtBrokerInner msgInner</code>：根据 result 克隆出一条新消息</p><ul><li><p><code>msgInner.setTopic(msgExt.getUserProperty(...))</code>：<strong>设置回原主题</strong></p></li><li><p><code>msgInner.setQueueId(Integer.parseInt(msgExt.getUserProperty(..)))</code>：<strong>设置回原队列 ID</strong></p></li><li><p><code>MessageAccessor.clearProperty()</code>：清理上面的两个属性</p></li></ul><p><code>MessageAccessor.clearProperty(msgInner, ...)</code>：<strong>清理事务属性</strong></p><p><code>RemotingCommand sendResult = sendFinalMessage(msgInner)</code>：调用存储模块存储至 Broker</p><p><code>this.brokerController...deletePrepareMessage(result.getPrepareMessage())</code>：<strong>向删除（OP）队列添加消息</strong>，消息体的数据是 halfMsg 的 queueOffset，<strong>表示半消息队列指定的 offset 的消息已被删除</strong></p><ul><li><code>if (this...putOpMessage(msgExt, TransactionalMessageUtil.REMOVETAG))</code>：添加一条 OP 数据 <ul><li><code>MessageQueue messageQueue</code>：新建一个消息队列，OP 队列</li><li><code>return addRemoveTagInTransactionOp(messageExt, messageQueue)</code>：添加数据 <ul><li><code>Message message</code>：创建 OP 消息</li><li><code>writeOp(message, messageQueue)</code>：写入 OP 消息</li></ul></li></ul></li></ul></li><li><p><code>else if (MessageSysFlag.TRANSACTION_ROLLBACK_TYPE)</code>：<strong>事务回滚</strong></p><p><code>this.brokerController...deletePrepareMessage(result.getPrepareMessage())</code>：<strong>也需要向 OP 队列添加消息</strong></p></li></ul></li></ul><hr><h3 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer" aria-hidden="true">#</a> Consumer</h3><h4 id="消费者类" tabindex="-1"><a class="header-anchor" href="#消费者类" aria-hidden="true">#</a> 消费者类</h4><h5 id="默认消费" tabindex="-1"><a class="header-anchor" href="#默认消费" aria-hidden="true">#</a> 默认消费</h5><p>DefaultMQPushConsumer 类是默认的消费者类</p><p>成员变量：</p><ul><li><p>消费者实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">DefaultMQPushConsumerImpl</span> defaultMQPushConsumerImpl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">;</span>									<span class="token comment">// 消费者组</span>
<span class="token keyword">private</span> <span class="token class-name">MessageModel</span> messageModel <span class="token operator">=</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">CLUSTERING</span><span class="token punctuation">;</span>	<span class="token comment">// 消费模式，默认集群模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>订阅信息：key 是主题，value 是过滤表达式，一般是 tag</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">&gt;</span></span> subscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消息监听器：<strong>消息处理逻辑</strong>，并发消费 MessageListenerConcurrently，顺序（分区）消费 MessageListenerOrderly</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">MessageListener</span> messageListener<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费位点：当从 Broker 获取当前组内该 queue 的 offset 不存在时，consumeFromWhere 才有效，默认值代表从队列的最后 offset 开始消费，当队列内再有一条新的 msg 加入时，消费者才会去消费</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ConsumeFromWhere</span> consumeFromWhere <span class="token operator">=</span> <span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span><span class="token constant">CONSUME_FROM_LAST_OFFSET</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费时间戳：当消费位点配置的是 CONSUME_FROM_TIMESTAMP 时，并且服务器 Group 内不存在该 queue 的 offset 时，会使用该时间戳进行消费</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> consumeTimestamp <span class="token operator">=</span> <span class="token class-name">UtilAll</span><span class="token punctuation">.</span><span class="token function">timeMillisToHumanString3</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 消费者创建时间 - 30秒，转换成 格式： 年月日小时分钟秒，比如 20220203171201</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>队列分配策略：主题下的队列分配策略，RebalanceImpl 对象依赖该算法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">AllocateMessageQueueStrategy</span> allocateMessageQueueStrategy<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费进度存储器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">OffsetStore</span> offsetStore<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>核心方法：</p><ul><li><p>start()：启动消费者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>shutdown()：关闭消费者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>registerMessageListener()：注册消息监听器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token class-name">MessageListener</span> messageListener<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>subscribe()：添加订阅信息，<strong>将订阅信息放入负载均衡对象的 subscriptionInner 中</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">String</span> subExpression<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>unsubscribe()：删除订阅指定主题的信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>suspend()：停止消费</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>resume()：恢复消费</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h5 id="默认实现" tabindex="-1"><a class="header-anchor" href="#默认实现" aria-hidden="true">#</a> 默认实现</h5><p>DefaultMQPushConsumerImpl 是默认消费者的实现类</p><p>成员变量：</p><ul><li><p>客户端实例：整个进程内只有一个客户端实例对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">MQClientInstance</span> mQClientFactory<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费者实例：门面对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DefaultMQPushConsumer</span> defaultMQPushConsumer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>负载均衡</strong>：分配订阅主题的队列给当前消费者，20 秒钟一个周期执行 Rebalance 算法（客户端实例触发）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RebalanceImpl</span> rebalanceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RebalancePushImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费者信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> consumerStartTimestamp<span class="token punctuation">;</span>	<span class="token comment">// 消费者启动时间</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">ServiceState</span> serviceState<span class="token punctuation">;</span>	<span class="token comment">// 消费者状态</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> pause <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// 是否暂停</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> consumeOrderly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// 是否顺序消费</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>拉取消息</strong>：封装拉消息的 API，服务器 Broker 返回结果中包含下次 Pull 时推荐的 BrokerId，根据本次请求数据的冷热程度进行推荐</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">PullAPIWrapper</span> pullAPIWrapper<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>消息消费</strong>服务：并发消费和顺序消费</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ConsumeMessageService</span> consumeMessageService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>流控：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> queueFlowControlTimes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>			<span class="token comment">// 队列流控次数，默认每1000次流控，进行一次日志打印</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> queueMaxSpanFlowControlTimes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">// 流控使用，控制打印日志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>HOOK：钩子方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 过滤消息 hook</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FilterMessageHook</span><span class="token punctuation">&gt;</span></span> filterMessageHookList<span class="token punctuation">;</span>
<span class="token comment">// 消息执行hook，在消息处理前和处理后分别执行 hook.before  hook.after 系列方法</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConsumeMessageHook</span><span class="token punctuation">&gt;</span></span> consumeMessageHookList<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>核心方法：</p><ul><li><p>start()：加锁保证线程安全</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.checkConfig()</code>：检查配置，包括组名、消费模式、订阅信息、消息监听器等</li><li><code>this.copySubscription()</code>：拷贝订阅信息到 RebalanceImpl 对象 <ul><li><code>this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData)</code>：将订阅信息加入 rbl 的 map 中</li><li><code>this.messageListenerInner = ...getMessageListener()</code>：将消息监听器保存到实例对象</li><li><code>switch (this.defaultMQPushConsumer.getMessageModel())</code>：判断消费模式，广播模式下直接返回</li><li><code>final String retryTopic</code>：创建当前<strong>消费者组重试的主题名</strong>，规则 <code>%RETRY%ConsumerGroup</code></li><li><code>SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData()</code>：创建重试主题的订阅数据对象</li><li><code>this.rebalanceImpl.getSubscriptionInner().put(retryTopic, subscriptionData)</code>：将创建的重试主题加入到 rbl 对象的 map 中，<strong>消息重试时会加入到该主题，消费者订阅这个主题之后，就有机会再次拿到该消息进行消费处理</strong></li></ul></li><li><code>this.mQClientFactory = ...getOrCreateMQClientInstance()</code>：获取客户端实例对象</li><li><code>this.rebalanceImpl.</code>：初始化负载均衡对象，设置<strong>队列分配策略对象</strong>到属性中</li><li><code>this.pullAPIWrapper = new PullAPIWrapper()</code>：创建拉消息 API 对象，内部封装了查询推荐主机算法</li><li><code>this.pullAPIWrapper.registerFilterMessageHook(filterMessageHookList)</code>：将过滤 Hook 列表注册到该对象内，消息拉取下来之后会执行该 Hook，<strong>再进行一次自定义的消息过滤</strong></li><li><code>this.offsetStore = new RemoteBrokerOffsetStore()</code>：默认集群模式下创建消息进度存储器</li><li><code>this.consumeMessageService = ...</code>：根据消息监听器的类型创建消费服务</li><li><code>this.consumeMessageService.start()</code>：启动消费服务</li><li><code>boolean registerOK = mQClientFactory.registerConsumer()</code>：<strong>将消费者注册到客户端实例中</strong>，客户端提供的服务： <ul><li>心跳服务：把订阅数据同步到订阅主题的 Broker</li><li>拉消息服务：内部 PullMessageService 启动线程，基于 PullRequestQueue 工作，消费者负载均衡分配到队列后会向该队列提交 PullRequest</li><li>队列负载服务：每 20 秒调用一次 <code>consumer.doRebalance()</code> 接口</li><li>消息进度持久化</li><li>动态调整消费者、消费服务线程池</li></ul></li><li><code>mQClientFactory.start()</code>：启动客户端实例</li><li><code> this.updateTopic</code>：从 nameserver 获取主题路由数据，生成主题集合放入 rbl 对象的 table</li><li><code>this.mQClientFactory.checkClientInBroker()</code>：检查服务器是否支持消息过滤模式，一般使用 tag 过滤，服务器默认支持</li><li><code>this.mQClientFactory.sendHeartbeatToAllBrokerWithLock()</code>：向所有已知的 Broker 节点，<strong>发送心跳数据</strong></li><li><code>this.mQClientFactory.rebalanceImmediately()</code>：唤醒 rbl 线程，触发负载均衡执行</li></ul></li></ul><hr><h4 id="负载均衡-1" tabindex="-1"><a class="header-anchor" href="#负载均衡-1" aria-hidden="true">#</a> 负载均衡</h4><h5 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式" aria-hidden="true">#</a> 实现方式</h5><p>MQClientInstance#start 中会启动负载均衡服务 RebalanceService：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 检查停止标记</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 休眠 20 秒，防止其他线程饥饿，所以【每 20 秒负载均衡一次】</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span>waitInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用客户端实例的负载均衡方法，底层【会遍历所有消费者，调用消费者的负载均衡】</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mqClientFactory<span class="token punctuation">.</span><span class="token function">doRebalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RebalanceImpl 类成员变量：</p><ul><li><p>分配给当前消费者的处理队列：处理消息队列集合，<strong>ProcessQueue 是 MQ 队列在消费者端的快照</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">&gt;</span></span> processQueueTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费者订阅主题的队列信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span> topicSubscribeInfoTable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>订阅数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token comment">/* topic */</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token operator">&gt;</span> subscriptionInner<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>队列分配策略：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">AllocateMessageQueueStrategy</span> allocateMessageQueueStrategy<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>成员方法：</p><ul><li><p>doRebalance()：负载均衡方法，以每个消费者实例为粒度进行负载均衡</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRebalance</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前消费者的订阅数据</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span> subTable <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSubscriptionInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subTable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历所有的订阅主题</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SubscriptionData</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> subTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取订阅的主题</span>
            <span class="token keyword">final</span> <span class="token class-name">String</span> topic <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 按照主题进行负载均衡</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rebalanceByTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将分配到当前消费者的队列进行过滤，不属于当前消费者订阅主题的直接移除</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">truncateMessageQueueNotMyTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>集群模式下：</p><ul><li><p><code>Set&lt;MessageQueue&gt; mqSet = this.topicSubscribeInfoTable.get(topic)</code>：订阅的主题下的全部队列信息</p></li><li><p><code>cidAll = this...findConsumerIdList(topic, consumerGroup)</code>：从服务器获取消费者组下的全部消费者 ID</p></li><li><p><code>Collections.sort(mqAll)</code>：主题 MQ 队列和消费者 ID 都进行排序，<strong>保证每个消费者的视图一致性</strong></p></li><li><p><code>allocateResult = strategy.allocate()</code>： <strong>调用队列分配策略</strong>，给当前消费者进行分配 MessageQueue（下一节）</p></li><li><p><code>boolean changed = this.updateProcessQueueTableInRebalance(...)</code>：<strong>更新队列处理集合</strong>，mqSet 是 rbl 算法分配到当前消费者的 MQ 集合</p><ul><li><p><code>while (it.hasNext())</code>：遍历当前消费者的所有处理队列</p></li><li><p><code>if (mq.getTopic().equals(topic))</code>：该 MQ 是 本次 rbl 分配算法计算的主题</p></li><li><p><code>if (!mqSet.contains(mq))</code>：该 MQ 经过 rbl 计算之后，<strong>被分配到其它 Consumer 节点</strong></p><p><code>pq.setDropped(true)</code>：将删除状态设置为 true</p><p><code>if (this.removeUnnecessaryMessageQueue(mq, pq))</code>：删除不需要的 MQ 队列</p><ul><li><p><code>this...getOffsetStore().persist(mq)</code>：在 MQ 归属的 Broker 节点持久化消费进度</p></li><li><p><code>this...getOffsetStore().removeOffset(mq)</code>：删除该 MQ 在本地的消费进度</p></li><li><p><code>if (this.defaultMQPushConsumerImpl.isConsumeOrderly() &amp;&amp;)</code>：是否是<strong>顺序消费</strong>和集群模式</p><p><code>if (pq.getLockConsume().tryLock(1000, ..))</code>： 获取锁成功，说明顺序消费任务已经停止消费工作</p><p><code>return this.unlockDelay(mq, pq)</code>：<strong>释放锁 Broker 端的队列锁，向服务器发起 oneway 的解锁请求</strong></p><ul><li><code>if (pq.hasTempMessage())</code>：队列中有消息，延迟 20 秒释放队列分布式锁，确保全局范围内只有一个消费任务 运行中</li><li><code>else</code>：当前消费者本地该消费任务已经退出，直接释放锁</li></ul><p><code>else</code>：顺序消费任务正在消费一批消息，不可打断，增加尝试获取锁的次数</p></li></ul><p><code>it.remove()</code>：从 processQueueTable 移除该 MQ</p></li><li><p><code>else if (pq.isPullExpired())</code>：说明当前 MQ 还是被当前 Consumer 消费，此时判断一下是否超过 2 分钟未到服务器 拉消息，如果条件成立进行上述相同的逻辑</p></li><li><p><code>for (MessageQueue mq : mqSet)</code>：开始处理当前主题<strong>新分配到当前节点的队列</strong></p><p><code>if (isOrder &amp;&amp; !this.lock(mq))</code>：<strong>顺序消息为了保证有序性，需要获取队列锁</strong></p><p><code>ProcessQueue pq = new ProcessQueue()</code>：为每个新分配的消息队列创建快照队列</p><p><code>long nextOffset = this.computePullFromWhere(mq)</code>：<strong>从服务端获取新分配的 MQ 的消费进度</strong></p><p><code>ProcessQueue pre = this.processQueueTable.putIfAbsent(mq, pq)</code>：保存到处理队列集合</p><p><code>PullRequest pullRequest = new PullRequest()</code>：<strong>创建拉取请求对象</strong></p></li><li><p><code>this.dispatchPullRequest(pullRequestList)</code>：放入 PullMessageService 的<strong>本地阻塞队列</strong>内，用于拉取消息工作</p></li></ul></li></ul></li><li><p>lockAll()：续约锁，对消费者的所有队列进行续约</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>HashMap&lt;String, Set&lt;MessageQueue&gt;&gt; brokerMqs</code>：将分配给当前消费者的全部 MQ 按照 BrokerName 分组</p></li><li><p><code>while (it.hasNext())</code>：遍历所有的分组</p></li><li><p><code>final Set&lt;MessageQueue&gt; mqs</code>：获取该 Broker 上分配给当前消费者的 queue 集合</p></li><li><p><code>FindBrokerResult findBrokerResult</code>：查询 Broker 主节点信息</p></li><li><p><code>LockBatchRequestBody requestBody</code>：创建请求对象，填充属性</p></li><li><p><code>Set&lt;MessageQueue&gt; lockOKMQSet</code>：<strong>以组为单位向 Broker 发起批量续约锁的同步请求</strong>，返回成功的队列集合</p></li><li><p><code>for (MessageQueue mq : lockOKMQSet)</code>：遍历续约锁成功的 MQ</p><p><code>processQueue.setLocked(true)</code>：<strong>分布式锁状态设置为 true，表示允许顺序消费</strong></p><p><code>processQueue.setLastLockTimestamp(System.currentTimeMillis())</code>：设置上次获取锁的时间为当前时间</p></li><li><p><code>for (MessageQueue mq : mqs)</code>：遍历当前 Broker 上的所有队列集合</p><p><code>if (!lockOKMQSet.contains(mq))</code>：条件成立说明续约锁失败</p><p><code>processQueue.setLocked(false)</code>：<strong>分布式锁状态设置为 false，表示不允许顺序消费</strong></p></li></ul></li></ul><hr><h5 id="队列分配" tabindex="-1"><a class="header-anchor" href="#队列分配" aria-hidden="true">#</a> 队列分配</h5><p>AllocateMessageQueueStrategy 类是队列的分配策略</p><ul><li><p>平均分配：AllocateMessageQueueAveragely 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：消费者组       								参数二：当前消费者id   </span>
<span class="token comment">// 参数三：主题的全部队列，包括所有 broker 上该主题的 mq  	参数四：全部消费者id集合</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerGroup<span class="token punctuation">,</span> <span class="token class-name">String</span> currentCID<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqAll<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cidAll<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前消费者在全部消费者中的位置，【全部消费者是已经排序好的，排在前面的优先分配更多的队列】</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> cidAll<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>currentCID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 平均分配完以后，还剩余的待分配的 mq 的数量</span>
    <span class="token keyword">int</span> mod <span class="token operator">=</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 首先判断整体的 mq 的数量是否小于消费者的数量，小于消费者的数量就说明不够分的，先分一个</span>
    <span class="token keyword">int</span> averageSize <span class="token operator">=</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span>
    	<span class="token comment">// 成立需要多分配一个队列，因为更靠前</span>
    	<span class="token punctuation">(</span>mod <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> mod <span class="token operator">?</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> cidAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取起始的分配位置</span>
    <span class="token keyword">int</span> startIndex <span class="token operator">=</span> <span class="token punctuation">(</span>mod <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> mod<span class="token punctuation">)</span> <span class="token operator">?</span> index <span class="token operator">*</span> averageSize <span class="token operator">:</span> index <span class="token operator">*</span> averageSize <span class="token operator">+</span> mod<span class="token punctuation">;</span>
    <span class="token comment">// 防止索引越界</span>
    <span class="token keyword">int</span> range <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>averageSize<span class="token punctuation">,</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 开始分配，【挨着分配，是直接就把当前的 消费者分配完成】</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> range<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mqAll<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span>startIndex <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> mqAll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>队列排序后：Q1 → Q2 → Q3，消费者排序后 C1 → C2 → C3</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-平均队列分配.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>轮流分配：AllocateMessageQueueAveragelyByCircle</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Frame/RocketMQ-平均队列轮流分配.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>指定机房平均分配：AllocateMessageQueueByMachineRoom，前提是 Broker 的命名规则为 <code>机房名@BrokerName</code></p></li></ul><hr><h4 id="拉取服务" tabindex="-1"><a class="header-anchor" href="#拉取服务" aria-hidden="true">#</a> 拉取服务</h4><h5 id="实现方式-1" tabindex="-1"><a class="header-anchor" href="#实现方式-1" aria-hidden="true">#</a> 实现方式</h5><p>MQClientInstance#start 中会启动消息拉取服务：PullMessageService</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 检查停止标记，【循环拉取】</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从阻塞队列中获取拉消息请求</span>
            <span class="token class-name">PullRequest</span> pullRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pullRequestQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 拉取消息，获取请求对应的使用当前消费者组中的哪个消费者，调用消费者的 pullMessage 方法</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pullMessage</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Pull Message Service Run Method exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DefaultMQPushConsumerImpl#pullMessage：</p><ul><li><p><code>ProcessQueue processQueue = pullRequest.getProcessQueue()</code>：获取请求对应的快照队列，并判断是否是删除状态</p></li><li><p><code>this.executePullRequestLater()</code>：如果当前消费者不是运行状态，则拉消息任务延迟 3 秒后执行，如果是暂停状态延迟 1 秒</p></li><li><p><strong>流控的逻辑</strong>：</p><p><code>long cachedMessageCount = processQueue.getMsgCount().get()</code>：获取消费者本地该 queue 快照内缓存的消息数量，如果大于 1000 条，进行流控，延迟 50 毫秒</p><p><code>long cachedMessageSizeInMiB</code>： 消费者本地该 queue 快照内缓存的消息容量 size，超过 100m 消息未被消费进行流控</p><p><code>if(processQueue.getMaxSpan() &gt; 2000)</code>：消费者本地缓存消息第一条消息最后一条消息跨度超过 2000 进行流控</p></li><li><p><code>SubscriptionData subscriptionData</code>：本次拉消息请求订阅的主题数据，如果调用了 <code>unsubscribe(主题)</code> 将会获取为 null</p></li><li><p><code>PullCallback pullCallback = new PullCallback()</code>：<strong>拉消息处理回调对象</strong></p><ul><li><p><code>pullResult = ...processPullResult()</code>：预处理 PullResult 结果，将服务器端指定 MQ 的拉消息<strong>下一次的推荐节点</strong>保存到 pullFromWhichNodeTable 中，<strong>并进行消息过滤</strong></p></li><li><p><code>case FOUND</code>：正常拉取到消息</p><p><code>pullRequest.setNextOffset(pullResult.getNextBeginOffset())</code>：更新 pullRequest 对象下一次拉取消息的位点</p><p><code>if (pullResult.getMsgFoundList() == null...)</code>：消息过滤导致消息全部被过滤掉，需要立马发起下一次拉消息</p><p><code>boolean .. = processQueue.putMessage()</code>：将服务器拉取的消息集合<strong>加入到消费者本地</strong>的 processQueue 内</p><p><code>DefaultMQPushConsumerImpl...submitConsumeRequest()</code>：<strong>提交消费任务，分为顺序消费和并发消费</strong></p><p><code>Defaul..executePullRequestImmediately(pullRequest)</code>：将更新过 nextOffset 字段的 PullRequest 对象，再次放到 pullMessageService 的阻塞队列中，<strong>形成闭环</strong></p></li><li><p><code>case NO_NEW_MSG ||NO_MATCHED_MSG</code>：<strong>表示本次 pull 没有新的可消费的信息</strong></p><p><code>pullRequest.setNextOffset()</code>：更新更新 pullRequest 对象下一次拉取消息的位点</p><p><code>Defaul..executePullRequestImmediately(pullRequest)</code>：再次拉取请求</p></li><li><p><code>case OFFSET_ILLEGAL</code>：<strong>本次 pull 时使用的 offset 是无效的</strong>，即 offset &gt; maxOffset || offset &lt; minOffset</p><p><code>pullRequest.setNextOffset()</code>：调整 pullRequest.nextOffset 为正确的 offset</p><p><code>pullRequest.getProcessQueue().setDropped(true)</code>：设置该 processQueue 为删除状态，如果有该 queue 的消费任务，消费任务会马上停止</p><p><code>DefaultMQPushConsumerImpl.this.executeTaskLater()</code>：提交异步任务，10 秒后去执行</p><ul><li><p><code>DefaultMQPushConsumerImpl...updateOffset()</code>：更新 offsetStore 该 MQ 的 offset 为正确值，内部直接替换</p></li><li><p><code>DefaultMQPushConsumerImpl...persist()</code>：持久化该 messageQueue 的 offset 到 Broker 端</p></li><li><p><code>DefaultMQPushConsumerImpl...removeProcessQueue()</code>： 删除该消费者该 messageQueue 对应的 processQueue</p></li><li><p>这里没有再次提交 pullRequest 到 pullMessageService 的队列，那该队列不再拉消息了吗？</p><p>负载均衡 rbl 程序会重建该队列的 processQueue，重建完之后会为该队列创建新的 PullRequest 对象</p></li></ul></li></ul></li><li><p><code>int sysFlag = PullSysFlag.buildSysFlag()</code>：<strong>构建标志对象</strong>，sysFlag 高 4 位未使用，低 4 位使用，从左到右 0000 0011</p><ul><li>第一位：表示是否提交消费者本地该队列的 offset，一般是 1</li><li>第二位：表示是否允许服务器端进行长轮询，一般是 1</li><li>第三位：表示是否提交消费者本地该主题的订阅数据，一般是 0</li><li>第四位：表示是否为类过滤，一般是 0</li></ul></li><li><p><code>this.pullAPIWrapper.pullKernelImpl()</code>：拉取消息的核心方法</p></li></ul><hr><h5 id="封装对象" tabindex="-1"><a class="header-anchor" href="#封装对象" aria-hidden="true">#</a> 封装对象</h5><p>PullAPIWrapper 类封装了拉取消息的 API</p><p>成员变量：</p><ul><li><p>推荐拉消息使用的主机 ID：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">AtomicLong</span><span class="token comment">/* brokerId */</span><span class="token operator">&gt;</span> pullFromWhichNodeTable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>成员方法：</p><ul><li><p>pullKernelImpl()：拉消息</p><ul><li><p><code>FindBrokerResult findBrokerResult</code>：<strong>本地查询指定 BrokerName 的地址信息</strong>，推荐节点或者主节点</p></li><li><p><code>if (null == findBrokerResult)</code>：查询不到，就到 Namesrv 获取指定 topic 的路由数据</p></li><li><p><code>if (findBrokerResult.isSlave())</code>：成立说明 findBrokerResult 表示的主机为 slave 节点，<strong>slave 不存储 offset 信息</strong></p><p><code>sysFlagInner = PullSysFlag.clearCommitOffsetFlag(sysFlagInner)</code>：将 sysFlag 标记位中 CommitOffset 的位置为 0</p></li><li><p><code>PullMessageRequestHeader requestHeader</code>：创建请求头对象，封装所有的参数</p></li><li><p><code>PullResult pullResult = this.mQClientFactory.getMQClientAPIImpl().pullMessage()</code>：调用客户端实例的方法，核心逻辑就是<strong>将业务数据转化为 RemotingCommand 通过 NettyRemotingClient 的 IO 进行通信</strong></p><ul><li><p><code>RemotingCommand request</code>：创建网络层传输对象 RemotingCommand 对象，<strong>请求 ID 为 <code>PULL_MESSAGE = 11</code></strong></p></li><li><p><code>return this.pullMessageSync(...)</code>：此处是<strong>异步调用，处理结果放入 ResponseFuture 中</strong>，参考服务端小节的处理器类 <code>NettyServerHandler#processMessageReceived</code> 方法</p></li></ul></li></ul></li><li><p><code>RemotingCommand response = responseFuture.getResponseCommand()</code>：获取服务器端响应数据 response</p><ul><li><code>PullResult pullResult</code>：从 response 内提取出来拉消息结果对象，将响应头 PullMessageResponseHeader 对象中信息<strong>填充到 PullResult 中</strong>，列出两个重要的字段：</li><li><code>private Long suggestWhichBrokerId</code>：服务端建议客户端下次 Pull 时选择的 BrokerID</li><li><code>private Long nextBeginOffset</code>：客户端下次 Pull 时使用的 offset 信息</li></ul></li><li><p><code>pullCallback.onSuccess(pullResult)</code>：将 PullResult 交给拉消息结果处理回调对象，调用 onSuccess 方法</p></li></ul><hr><h4 id="拉取处理" tabindex="-1"><a class="header-anchor" href="#拉取处理" aria-hidden="true">#</a> 拉取处理</h4><h5 id="处理器" tabindex="-1"><a class="header-anchor" href="#处理器" aria-hidden="true">#</a> 处理器</h5><p>BrokerStartup#createBrokerController 方法中创建了 BrokerController 并进行初始化，调用 <code>registerProcessor()</code> 方法将处理器 PullMessageProcessor 注册到 NettyRemotingServer 中，对应的请求 ID 为 <code>PULL_MESSAGE = 11</code>，NettyServerHandler 在处理请求时通过请求 ID 会获取处理器执行 processRequest 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：服务器与客户端 netty 通道； 参数二：客户端请求； 参数三：是否允许服务器端长轮询，默认 true</span>
<span class="token keyword">private</span> <span class="token class-name">RemotingCommand</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">RemotingCommand</span> request<span class="token punctuation">,</span> <span class="token keyword">boolean</span> brokerAllowSuspend<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>RemotingCommand response</code>：创建响应对象，设置为响应类型的请求，响应头是 PullMessageResponseHeader</p></li><li><p><code>final PullMessageResponseHeader responseHeader</code>：获取响应对象的 header</p></li><li><p><code>final PullMessageRequestHeader requestHeader</code>：解析出请求头 PullMessageRequestHeader</p></li><li><p><code>response.setOpaque(request.getOpaque())</code>：设置 opaque 属性，客户端<strong>根据该字段获取 ResponseFuture</strong> 进行处理</p></li><li><p>进行一些鉴权的逻辑：是否允许长轮询、提交 offset、topicConfig 是否是空、队列 ID 是否合理</p></li><li><p><code>ConsumerGroupInfo consumerGroupInfo</code>：获取消费者组信息，包含全部的消费者和订阅数据</p></li><li><p><code>subscriptionData = consumerGroupInfo.findSubscriptionData()</code>：<strong>获取指定主题的订阅数据</strong></p></li><li><p><code>if (!ExpressionType.isTagType()</code>：表达式匹配</p></li><li><p><code>MessageFilter messageFilter</code>：创建消息过滤器，一般是通过 tagCode 进行过滤</p></li><li><p><code>DefaultMessageStore.getMessage()</code>：<strong>查询消息的核心逻辑，在 Broker 端查询消息</strong>（存储端笔记详解了该源码）</p></li><li><p><code>response.setRemark()</code>：设置此次响应的状态</p></li><li><p><code>responseHeader.set..</code>：设置响应头对象的一些字段</p></li><li><p><code>switch (this.brokerController.getMessageStoreConfig().getBrokerRole())</code>：如果当前主机节点角色为 slave 并且<strong>从节点读</strong>并未开启的话，直接给客户端 一个状态 <code>PULL_RETRY_IMMEDIATELY</code>，并设置为下次从主节点读</p></li><li><p><code>if (this.brokerController.getBrokerConfig().isSlaveReadEnable())</code>：消费太慢，<strong>下次从另一台机器拉取</strong></p></li><li><p><code>switch (getMessageResult.getStatus())</code>：根据 getMessageResult 的状态设置 response 的 code</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">GetMessageStatus</span> <span class="token punctuation">{</span>
    <span class="token constant">FOUND</span><span class="token punctuation">,</span>					<span class="token comment">// 查询成功</span>
    <span class="token constant">NO_MATCHED_MESSAGE</span><span class="token punctuation">,</span>		<span class="token comment">// 未查询到到消息，服务端过滤 tagCode</span>
    <span class="token constant">MESSAGE_WAS_REMOVING</span><span class="token punctuation">,</span>	<span class="token comment">// 查询时赶上 CommitLog 清理过期文件，导致查询失败，立刻尝试</span>
    <span class="token constant">OFFSET_FOUND_NULL</span><span class="token punctuation">,</span>		<span class="token comment">// 查询时赶上 ConsumerQueue 清理过期文件，导致查询失败，【进行长轮询】</span>
    <span class="token constant">OFFSET_OVERFLOW_BADLY</span><span class="token punctuation">,</span>	<span class="token comment">// pullRequest.offset 越界 maxOffset</span>
    <span class="token constant">OFFSET_OVERFLOW_ONE</span><span class="token punctuation">,</span>	<span class="token comment">// pullRequest.offset == CQ.maxOffset，【进行长轮询】</span>
    <span class="token constant">OFFSET_TOO_SMALL</span><span class="token punctuation">,</span>		<span class="token comment">// pullRequest.offset 越界 minOffset</span>
    <span class="token constant">NO_MATCHED_LOGIC_QUEUE</span><span class="token punctuation">,</span>	<span class="token comment">// 没有匹配到逻辑队列</span>
    <span class="token constant">NO_MESSAGE_IN_QUEUE</span><span class="token punctuation">,</span>	<span class="token comment">// 空队列，创建队列也是因为查询导致，【进行长轮询】</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>switch (response.getCode())</code>：根据 response 状态做对应的业务处理</p><p><code>case ResponseCode.SUCCESS</code>：查询成功</p><ul><li><code>final byte[] r = this.readGetMessageResult()</code>：本次 pull 出来的全部消息导入 byte 数组</li><li><code>response.setBody(r)</code>：将消息的 byte 数组保存到 response body 字段</li></ul><p><code>case ResponseCode.PULL_NOT_FOUND</code>：产生这种情况大部分原因是 <code>pullRequest.offset == queue.maxOffset</code>，说明已经没有需要获取的消息，此时如果直接返回给客户端，客户端会立刻重新请求，还是继续返回该状态，频繁拉取服务器导致服务器压力大，所以此处<strong>需要长轮询</strong></p><ul><li><code>if (brokerAllowSuspend &amp;&amp; hasSuspendFlag)</code>：brokerAllowSuspend = true，当长轮询结束再次执行 processRequest 时该参数为 false，所以<strong>每次 Pull 请求至多在服务器端长轮询控制一次</strong></li><li><code>PullRequest pullRequest = new PullRequest()</code>：创建长轮询 PullRequest 对象</li><li><code>this.brokerController...suspendPullRequest(topic, queueId, pullRequest)</code>：将长轮询请求对象交给长轮询服务 <ul><li><code>String key = this.buildKey(topic, queueId)</code>：构建一个 <code>topic@queueId</code> 的 key</li><li><code>ManyPullRequest mpr = this.pullRequestTable.get(key)</code>：从拉请求表中获取对象</li><li><code>mpr.addPullRequest(pullRequest)</code>：<strong>将 PullRequest 对象放入到长轮询的请求集合中</strong></li></ul></li><li><code>response = null</code>：响应设置为 null 内部的 callBack 就不会给客户端发送任何数据，<strong>不进行通信</strong>，否则就又开始重新请求</li></ul></li><li><p><code>boolean storeOffsetEnable</code>：允许长轮询、sysFlag 表示提交消费者本地该队列的offset、当前 broker 节点角色为 master 节点三个条件成立，才<strong>在 Broker 端存储消费者组内该主题的指定 queue 的消费进度</strong></p></li><li><p><code>return response</code>：返回 response，不为 null 时外层 processRequestCommand 的 callback 会将数据写给客户端</p></li></ul><hr><h5 id="长轮询" tabindex="-1"><a class="header-anchor" href="#长轮询" aria-hidden="true">#</a> 长轮询</h5><p>PullRequestHoldService 类负责长轮询，BrokerController#start 方法中调用了 <code>this.pullRequestHoldService.start()</code> 启动该服务</p><p>核心方法：</p><ul><li><p>run()：核心运行方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 循环运行</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLongPollingEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 服务器开启长轮询开关：每次循环休眠5秒</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 服务器关闭长轮询开关：每次循环休眠1秒</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">waitForRunning</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 检查持有的请求</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkHoldRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// .....</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>checkHoldRequest()：检查所有的请求</p><ul><li><code>for (String key : this.pullRequestTable.keySet())</code>：<strong>处理所有的 topic@queueId 的逻辑</strong></li><li><code>String[] kArray = key.split(TOPIC_QUEUEID_SEPARATOR)</code>：key 按照 @ 拆分，得到 topic 和 queueId</li><li><code>long offset = this...getMaxOffsetInQueue(topic, queueId)</code>： 到存储模块查询该 ConsumeQueue 的<strong>最大 offset</strong></li><li><code>this.notifyMessageArriving(topic, queueId, offset)</code>：通知消息到达</li></ul></li><li><p>notifyMessageArriving()：<strong>通知消息到达</strong>的逻辑，ReputMessageService 消息分发服务也会调用该方法</p><ul><li><code>ManyPullRequest mpr = this.pullRequestTable.get(key)</code>：获取对应的的 manyPullRequest 对象</li><li><code>List&lt;PullRequest&gt; requestList</code>：获取该队列下的所有 PullRequest，并进行遍历</li><li><code>List&lt;PullRequest&gt; replayList</code>：当某个 pullRequest 不超时，并且对应的 <code>CQ.maxOffset &lt;= pullRequest.offset</code>，就将该 PullRequest 再放入该列表</li><li><code>long newestOffset</code>：该值为 CQ 的 maxOffset</li><li><code>if (newestOffset &gt; request.getPullFromThisOffset())</code>：<strong>请求对应的队列内可以 pull 消息了，结束长轮询</strong></li><li><code>boolean match</code>：进行过滤匹配</li><li><code>this.brokerController...executeRequestWhenWakeup()</code>：将满足条件的 pullRequest 再次提交到线程池内执行 <ul><li><code>final RemotingCommand response</code>：执行 processRequest 方法，并且<strong>不会触发长轮询</strong></li><li><code>channel.writeAndFlush(response).addListene()</code>：<strong>将结果数据发送给客户端</strong></li></ul></li><li><code>if (System.currentTimeMillis() &gt;= ...)</code>：判断该 pullRequest 是否超时，超时后的也是重新提交到线程池，并且不进行长轮询</li><li><code>mpr.addPullRequest(replayList)</code>：将未满足条件的 PullRequest 对象再次添加到 ManyPullRequest 属性中</li></ul></li></ul><hr><h5 id="结果类" tabindex="-1"><a class="header-anchor" href="#结果类" aria-hidden="true">#</a> 结果类</h5><p>GetMessageResult 类成员信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetMessageResult</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询消息时，最底层都是 mappedFile 支持的查询，查询时返回给外层一个 SelectMappedBufferResult，</span>
    <span class="token comment">// mappedFile 每查询一次都会 refCount++ ，通过SelectMappedBufferResult持有mappedFile，完成资源释放的句柄</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectMappedBufferResult</span><span class="token punctuation">&gt;</span></span> messageMapedList <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectMappedBufferResult</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 该List内存储消息，每一条消息都被转成 ByteBuffer 表示了</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">&gt;</span></span> messageBufferList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查询结果状态</span>
    <span class="token keyword">private</span> <span class="token class-name">GetMessageStatus</span> status<span class="token punctuation">;</span>
    <span class="token comment">// 客户端下次再向当前Queue拉消息时，使用的 offset</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> nextBeginOffset<span class="token punctuation">;</span>
    <span class="token comment">// 当前queue最小offset</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> minOffset<span class="token punctuation">;</span>
    <span class="token comment">// 当前queue最大offset</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> maxOffset<span class="token punctuation">;</span>
    <span class="token comment">// 消息总byte大小</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> bufferTotalSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务器建议客户端下次到该 queue 拉消息时是否使用 【从节点】</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> suggestPullingFromSlave <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="队列快照" tabindex="-1"><a class="header-anchor" href="#队列快照" aria-hidden="true">#</a> 队列快照</h4><h5 id="成员属性-10" tabindex="-1"><a class="header-anchor" href="#成员属性-10" aria-hidden="true">#</a> 成员属性</h5><p>ProcessQueue 类是消费队列的快照</p><p>成员变量：</p><ul><li><p>属性字段：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> msgCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 队列中消息数量</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> msgSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 消息总大小</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> queueOffsetMax <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>				<span class="token comment">// 快照中最大 offset</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> dropped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>				<span class="token comment">// 快照是否移除</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> lastPullTimestamp <span class="token operator">=</span> current<span class="token punctuation">;</span>		<span class="token comment">// 上一次拉消息的时间</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> lastConsumeTimestamp <span class="token operator">=</span> current<span class="token punctuation">;</span>	<span class="token comment">// 上一次消费消息的时间</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> lastLockTimestamp <span class="token operator">=</span> current<span class="token punctuation">;</span>		<span class="token comment">// 上一次获取锁的时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>消息容器</strong>：key 是消息偏移量，val 是消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgTreeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>顺序消费临时容器</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> consumingMsgOrderlyTreeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>锁：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReadWriteLock</span> lockTreeMap<span class="token punctuation">;</span>		<span class="token comment">// 读写锁</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lockConsume<span class="token punctuation">;</span>					<span class="token comment">// 重入锁，【顺序消费使用】</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>顺序消费状态：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// 是否是锁定状态</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> consuming <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>		<span class="token comment">// 是否是消费中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-9" tabindex="-1"><a class="header-anchor" href="#成员方法-9" aria-hidden="true">#</a> 成员方法</h5><p>核心成员方法</p><ul><li><p>putMessage()：将 Broker 拉取下来的 msgs 存储到快照队列内，返回为 true 表示提交顺序消费任务，false 表示不提交</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">putMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>this.lockTreeMap.writeLock().lockInterruptibly()</code>：获取写锁</p></li><li><p><code>for (MessageExt msg : msgs)</code>：遍历 msgs 全部加入 msgTreeMap，key 是消息的 queueOffset</p></li><li><p><code>if (!msgTreeMap.isEmpty() &amp;&amp; !this.consuming)</code>：<strong>消息容器中存在未处理的消息，并且不是消费中的状态</strong></p><p><code>dispatchToConsume = true</code>：代表需要提交顺序消费任务</p><p><code>this.consuming = true</code>：设置为顺序消费执行中的状态</p></li><li><p><code>this.lockTreeMap.writeLock().unlock()</code>：释放写锁</p></li></ul></li><li><p>removeMessage()：移除已经消费的消息，参数是已经消费的消息集合，并发消费使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">removeMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>long result = -1</code>：结果初始化为 -1</li><li><code>this.lockTreeMap.writeLock().lockInterruptibly()</code>：获取写锁</li><li><code>this.lastConsumeTimestamp = now</code>：更新上一次消费消息的时间为现在</li><li><code>if (!msgTreeMap.isEmpty())</code>：判断消息容器是否是空，<strong>是空直接返回 -1</strong></li><li><code>result = this.queueOffsetMax + 1</code>：设置结果，<strong>删除完后消息容器为空时返回</strong></li><li><code>for (MessageExt msg : msgs)</code>：将已经消费的消息全部从 msgTreeMap 移除</li><li><code>if (!msgTreeMap.isEmpty())</code>：移除后容器内还有待消费的消息，<strong>获取第一条消息 offset 返回</strong></li><li><code>this.lockTreeMap.writeLock().unlock()</code>：释放写锁</li></ul></li><li><p>takeMessages()：获取一批消息，顺序消费使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> <span class="token function">takeMessages</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.lockTreeMap.writeLock().lockInterruptibly()</code>：获取写锁</li><li><code>this.lastConsumeTimestamp = now</code>：更新上一次消费消息的时间为现在</li><li><code>for (int i = 0; i &lt; batchSize; i++)</code>：从头节点开始获取消息</li><li><code>result.add(entry.getValue())</code>：将消息放入结果集合</li><li><code>consumingMsgOrderlyTreeMap.put()</code>：将消息加入顺序消费容器中</li><li><code>if (result.isEmpty())</code>：条件成立说明顺序消费容器本地快照内的消息全部处理完了，<strong>当前顺序消费任务需要停止</strong></li><li><code>consuming = false</code>：消费状态置为 false</li><li><code>this.lockTreeMap.writeLock().unlock()</code>：释放写锁</li></ul></li><li><p>commit()：处理完一批消息后调用，顺序消费使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.lockTreeMap.writeLock().lockInterruptibly()</code>：获取写锁</li><li><code>Long offset = this.consumingMsgOrderlyTreeMap.lastKey()</code>：获取顺序消费临时容器最后一条数据的 key</li><li><code>msgCount, msgSize</code>：更新顺序消费相关的字段</li><li><code>this.consumingMsgOrderlyTreeMap.clear()</code>：清空顺序消费容器的数据</li><li><code>return offset + 1</code>：<strong>消费者下一条消费的位点</strong></li><li><code>this.lockTreeMap.writeLock().unlock()</code>：释放写锁</li></ul></li><li><p>cleanExpiredMsg()：清除过期消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanExpiredMsg</span><span class="token punctuation">(</span><span class="token class-name">DefaultMQPushConsumer</span> pushConsumer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>if (pushConsumer.getDefaultMQPushConsumerImpl().isConsumeOrderly()) </code>：顺序消费不执行过期清理逻辑</li><li><code>int loop = msgTreeMap.size() &lt; 16 ? msgTreeMap.size() : 16</code>：最多循环 16 次</li><li><code>if (!msgTreeMap.isEmpty() &amp;&amp;)</code>：如果容器中第一条消息的消费开始时间与当前系统时间差值 &gt; 15min，则取出该消息</li><li><code>else</code>：直接跳出循环，因为<strong>快照队列内的消息是有顺序的</strong>，第一条消息不过期，其他消息都不过期</li><li><code>pushConsumer.sendMessageBack(msg, 3)</code>：<strong>消息回退</strong>到服务器，设置该消息的延迟级别为 3</li><li><code>if (!msgTreeMap.isEmpty() &amp;&amp; msg.getQueueOffset() == msgTreeMap.firstKey())</code>：条件成立说明消息回退期间，该目标消息并没有被消费任务成功消费</li><li><code>removeMessage(Collections.singletonList(msg))</code>：从 treeMap 将该回退成功的 msg 删除</li></ul></li></ul><hr><h4 id="并发消费" tabindex="-1"><a class="header-anchor" href="#并发消费" aria-hidden="true">#</a> 并发消费</h4><h5 id="成员属性-11" tabindex="-1"><a class="header-anchor" href="#成员属性-11" aria-hidden="true">#</a> 成员属性</h5><p>ConsumeMessageConcurrentlyService 负责并发消费服务</p><p>成员变量：</p><ul><li><p>消息监听器：封装处理消息的逻辑，该监听器由开发者实现，并注册到 defaultMQPushConsumer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageListenerConcurrently</span> messageListener<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> consumeRequestQueue<span class="token punctuation">;</span>	<span class="token comment">// 消费任务队列</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">;</span>							<span class="token comment">// 消费者组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>线程池：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> consumeExecutor<span class="token punctuation">;</span>				<span class="token comment">// 消费任务线程池，默认 20</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService<span class="token punctuation">;</span><span class="token comment">// 调度线程池，延迟提交消费任务</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> cleanExpireMsgExecutors<span class="token punctuation">;</span>	<span class="token comment">// 清理过期消息任务线程池，15min 一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="成员方法-10" tabindex="-1"><a class="header-anchor" href="#成员方法-10" aria-hidden="true">#</a> 成员方法</h5><p>ConsumeMessageConcurrentlyService 并发消费核心方法</p><ul><li><p>start()：启动消费服务，DefaultMQPushConsumerImpl 启动时会调用该方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 提交“清理过期消息任务”任务，延迟15min之后执行，之后每15min执行一次</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cleanExpireMsgExecutors<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>  <span class="token function">cleanExpireMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
                                                     <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>cleanExpireMsg()：清理过期消息任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cleanExpireMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>Iterator&lt;Map.Entry&lt;MessageQueue, ProcessQueue&gt;&gt; it </code>：获取分配给当前消费者的队列</li><li><code>while (it.hasNext())</code>：遍历所有的队列</li><li><code>pq.cleanExpiredMsg(this.defaultMQPushConsumer)</code>：调用队列快照 ProcessQueue 清理过期消息的方法</li></ul></li><li><p>submitConsumeRequest()：提交消费请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：从服务器 pull 下来的这批消息</span>
<span class="token comment">// 参数二：消息归属 mq 在消费者端的 processQueue，提交消费任务之前，msgs已经加入到该pq内了</span>
<span class="token comment">// 参数三：消息归属队列</span>
<span class="token comment">// 参数四：并发消息此参数无效</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitConsumeRequest</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ProcessQueue</span> processQueue<span class="token punctuation">,</span> <span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dispatchToConsume<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>final int consumeBatchSize</code>：<strong>一个消费任务可消费的消息数量</strong>，默认为 1</p></li><li><p><code>if (msgs.size() &lt;= consumeBatchSize)</code>：判断一个消费任务是否可以提交</p><p><code>ConsumeRequest consumeRequest</code>：封装为消费请求</p><p><code>this.consumeExecutor.submit(consumeRequest)</code>：提交消费任务，异步执行消息的处理</p></li><li><p><code>else</code>：说明消息较多，需要多个消费任务</p><p><code>for (int total = 0; total &lt; msgs.size(); )</code>：将消息拆分成多个消费任务</p></li></ul></li><li><p>processConsumeResult()：处理消费结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数一：消费结果状态；  参数二：消费上下文；  参数三：当前消费任务</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processConsumeResult</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> context<span class="token punctuation">,</span> consumeRequest<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>switch (status)</code>：根据消费结果状态进行处理</p></li><li><p><code>case CONSUME_SUCCESS</code>：消费成功</p><p><code>if (ackIndex &gt;= consumeRequest.getMsgs().size())</code>：消费成功的话，ackIndex 设置成 <code>消费消息数 - 1</code> 的值，比如有 5 条消息，这里就设置为 4</p><p><code>ok, failed</code>：ok 设置为消息数量，failed 设置为 0</p></li><li><p><code>case RECONSUME_LATER</code>：消费失败</p><p><code>ackIndex = -1</code>：设置为 -1</p></li><li><p><code>switch (this.defaultMQPushConsumer.getMessageModel())</code>：判断消费模式，默认是<strong>集群模式</strong></p></li><li><p><code>for (int i = ackIndex + 1; i &lt; msgs.size(); i++)</code>：当消费失败时 ackIndex 为 -1，i 的起始值为 0，该消费任务内的<strong>全部消息</strong>都会尝试回退给服务器</p></li><li><p><code>MessageExt msg</code>：提取一条消息</p></li><li><p><code>boolean result = this.sendMessageBack(msg, context)</code>：<strong>发送消息回退，同步发送</strong></p></li><li><p><code>if (!result)</code>：回退失败的消息，将<strong>消息的重试属性加 1</strong>，并加入到回退失败的集合</p></li><li><p><code>if (!msgBackFailed.isEmpty())</code>：回退失败集合不为空</p></li></ul><p><code>consumeRequest.getMsgs().removeAll(msgBackFailed)</code>：将回退失败的消息从当前消费任务的 msgs 集合内移除</p><p><code>this.submitConsumeRequestLater()</code>：<strong>回退失败的消息会再次提交消费任务</strong>，延迟 5 秒钟后再次尝试消费</p></li><li><p><code>long offset = ...removeMessage(msgs)</code>：从 pq 中删除已经消费成功的消息，返回 offset</p></li><li><p><code>this...getOffsetStore().updateOffset()</code>：更新消费者本地该 mq 的<strong>消费进度</strong></p></li></ul><hr><h5 id="消费请求" tabindex="-1"><a class="header-anchor" href="#消费请求" aria-hidden="true">#</a> 消费请求</h5><p>ConsumeRequest 是 ConsumeMessageConcurrentlyService 的内部类，是一个 Runnable 任务对象</p><p>成员变量：</p><ul><li><p>分配到该消费任务的消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消息队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProcessQueue</span> processQueue<span class="token punctuation">;</span>	<span class="token comment">// 消息处理队列</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> messageQueue<span class="token punctuation">;</span>	<span class="token comment">// 消息队列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>核心方法：</p><ul><li><p>run()：执行任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>if (this.processQueue.isDropped())</code>：条件成立说明该 queue 经过 rbl 算法分配到其他的 consumer</li><li><code>MessageListenerConcurrently listener</code>：获取消息监听器</li><li><code>ConsumeConcurrentlyContext context</code>：创建消费上下文对象</li><li><code>defaultMQPushConsumerImpl.resetRetryAndNamespace()</code>：重置重试标记 <ul><li><code>final String groupTopic</code>：获取当前消费者组的重试主题 <code>%RETRY%GroupName</code></li><li><code>for (MessageExt msg : msgs)</code>：遍历所有的消息</li><li><code>String retryTopic = msg.getProperty(...)</code>：原主题，一般消息没有该属性，只有被重复消费的消息才有</li><li><code>if (retryTopic != null &amp;&amp; groupTopic.equals(...))</code>：条件成立说明该消息是被重复消费的消息</li><li><code>msg.setTopic(retryTopic)</code>：将被<strong>重复消费的消息主题修改回原主题</strong></li></ul></li><li><code>if (ConsumeMessageConcurrentlyService...hasHook())</code>：前置处理</li><li><code>boolean hasException = false</code>：消费过程中，是否向外抛出异常</li><li><code>MessageAccessor.setConsumeStartTimeStamp()</code>：给每条消息设置消费开始时间</li><li><code>status = listener.consumeMessage(Collections.unmodifiableList(msgs), context)</code>：<strong>消费消息</strong></li><li><code>if (ConsumeMessageConcurrentlyService...hasHook())</code>：后置处理</li><li><code>...processConsumeResult(status, context, this)</code>：<strong>处理消费结果</strong></li></ul></li></ul><hr><h4 id="顺序消费" tabindex="-1"><a class="header-anchor" href="#顺序消费" aria-hidden="true">#</a> 顺序消费</h4><h5 id="成员属性-12" tabindex="-1"><a class="header-anchor" href="#成员属性-12" aria-hidden="true">#</a> 成员属性</h5><p>ConsumeMessageOrderlyService 负责顺序消费服务</p><p>成员变量：</p><ul><li><p>消息监听器：封装处理消息的逻辑，该监听器由开发者实现，并注册到 defaultMQPushConsumer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageListenerOrderly</span> messageListener<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>消费属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> consumeRequestQueue<span class="token punctuation">;</span>	<span class="token comment">// 消费任务队列</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> consumerGroup<span class="token punctuation">;</span>							<span class="token comment">// 消费者组</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>					<span class="token comment">// 消费停止状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>线程池：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> consumeExecutor<span class="token punctuation">;</span>				<span class="token comment">// 消费任务线程池</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService<span class="token punctuation">;</span><span class="token comment">// 调度线程池，延迟提交消费任务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>队列锁：消费者本地 MQ 锁，<strong>确保本地对于需要顺序消费的 MQ 同一时间只有一个任务在执行</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageQueueLock</span> messageQueueLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageQueueLock</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> mqLockTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取本地队列锁对象</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">fetchLockObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MessageQueue</span> mq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> objLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mqLockTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> objLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            objLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> prevLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mqLockTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> objLock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prevLock <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                objLock <span class="token operator">=</span> prevLock<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> objLock<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已经获取了 Broker 端该 Queue 的独占锁，为什么还要获取本地队列锁对象？（这里我也没太懂，先记录下来，本地多线程？）</p><ul><li>Broker queue 占用锁的角度是 Client 占用，Client 从 Broker 的某个占用了锁的 queue 拉取下来消息以后，将消息存储到消费者本地的 ProcessQueue 中，快照对象的 consuming 属性置为 true，表示本地的队列正在消费处理中</li><li>ProcessQueue 调用 takeMessages 方法时会获取下一批待处理的消息，获取不到会修改 <code>consuming = false</code>，本消费任务马上停止。</li><li>如果此时 Pull 再次拉取一批当前 ProcessQueue 的 msg，会再次向顺序消费服务提交消费任务，此时需要本地队列锁对象同步本地线程</li></ul></li></ul><hr><h5 id="成员方法-11" tabindex="-1"><a class="header-anchor" href="#成员方法-11" aria-hidden="true">#</a> 成员方法</h5><ul><li><p>start()：启动消费服务，DefaultMQPushConsumerImpl 启动时会调用该方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>this.scheduledExecutorService.scheduleAtFixedRate()</code>：提交锁续约任务，延迟 1 秒执行，周期为 20 秒钟</li><li><code>ConsumeMessageOrderlyService.this.lockMQPeriodically()</code>：<strong>锁续约任务</strong><ul><li><code>this.defaultMQPushConsumerImpl.getRebalanceImpl().lockAll()</code>：对消费者的所有队列进行续约</li></ul></li></ul></li><li><p>submitConsumeRequest()：<strong>提交消费任务请求</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数：true 表示创建消费任务并提交，false不创建消费任务，说明消费者本地已经有消费任务在执行了</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitConsumeRequest</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> dispathToConsume<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dispathToConsume<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当前进程内不存在 顺序消费任务，创建新的消费任务，【提交到消费任务线程池】</span>
        <span class="token class-name">ConsumeRequest</span> consumeRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumeRequest</span><span class="token punctuation">(</span>processQueue<span class="token punctuation">,</span> messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>consumeExecutor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>consumeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>processConsumeResult()：消费结果处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 参数1：msgs 本轮循环消费的消息集合    					参数2：status  消费状态</span>
<span class="token comment">// 参数3：context 消费上下文 							参数4：消费任务</span>
<span class="token comment">// 返回值：boolean 决定是否继续循环处理pq内的消息</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processConsumeResult</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ConsumeOrderlyStatus</span> status<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ConsumeOrderlyContext</span> context<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ConsumeRequest</span> consumeRequest<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>if (context.isAutoCommit()) </code>：默认自动提交</p></li><li><p><code>switch (status)</code>：根据消费状态进行不同的处理</p></li><li><p><code>case SUCCESS</code>：消费成功</p><p><code>commitOffset = ...commit()</code>：调用 pq 提交方法，会将本次循环处理的消息从顺序消费 map 删除，并且返回消息进度</p></li><li><p><code>case SUSPEND_CURRENT_QUEUE_A_MOMENT</code>：挂起当前队列</p><p><code>consumeRequest.getProcessQueue().makeMessageToConsumeAgain(msgs)</code>：<strong>回滚消息</strong></p><ul><li><code>for (MessageExt msg : msgs)</code>：遍历所有的消息</li><li><code>this.consumingMsgOrderlyTreeMap.remove(msg.getQueueOffset())</code>：从顺序消费临时容器中移除</li><li><code>this.msgTreeMap.put(msg.getQueueOffset(), msg)</code>：添加到消息容器</li></ul></li><li><p><code>this.submitConsumeRequestLater()</code>：再次提交消费任务，1 秒后执行</p></li><li><p><code>continueConsume = false</code>：设置为 false，<strong>外层会退出本次的消费任务</strong></p></li><li><p><code>this.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(...)</code>：更新本地消费进度</p></li></ul></li></ul><hr><h5 id="消费请求-1" tabindex="-1"><a class="header-anchor" href="#消费请求-1" aria-hidden="true">#</a> 消费请求</h5><p>ConsumeRequest 是 ConsumeMessageOrderlyService 的内部类，是一个 Runnable 任务对象</p><p>核心方法：</p><ul><li><p>run()：执行任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>final Object objLock</code>：获取本地锁对象</p></li><li><p><code>synchronized (objLock)</code>：本地队列锁，确保每个 MQ 的消费任务只有一个在执行，<strong>确保顺序消费</strong></p></li><li><p><code>if(.. || (this.processQueue.isLocked() &amp;&amp; !this.processQueue.isLockExpired())))</code>：当前队列持有分布式锁，并且锁未过期，持锁时间超过 30 秒算过期</p></li><li><p><code>final long beginTime</code>：消费开始时间</p></li><li><p><code>for (boolean continueConsume = true; continueConsume; )</code>：根据是否继续消费的标记判断是否继续</p></li><li><p><code>final int consumeBatchSize</code>：获取每次循环处理的消息数量，一般是 1</p></li><li><p><code>List&lt;MessageExt&gt; msgs = this...takeMessages(consumeBatchSize)</code>：到<strong>处理队列获取一批消息</strong></p></li><li><p><code>if (!msgs.isEmpty())</code>：获取到了待消费的消息</p><p><code>final ConsumeOrderlyContext context</code>：创建消费上下文对象</p><p><code>this.processQueue.getLockConsume().lock()</code>：<strong>获取 lockConsume 锁</strong>，与 RBL 线程同步使用</p><p><code>status = messageListener.consumeMessage(...)</code>：监听器处理消息</p><p><code>this.processQueue.getLockConsume().unlock()</code>：<strong>释放 lockConsume 锁</strong></p><p><code>if (null == status)</code>：处理消息状态返回 null，设置状态为挂起当前队列</p><p><code>continueConsume = ...processConsumeResult()</code>：消费结果处理</p></li><li><p><code>else</code>：获取到的消息是空</p><p><code>continueConsume = false</code>：结束任务循环</p></li><li><p><code>else</code>：当前队列未持有分布式锁，或者锁过期</p><p><code>ConsumeMessageOrderlyService.this.tryLockLaterAndReconsume()</code>：重新提交任务，根据是否获取到队列锁，选择延迟 10 毫秒或者 300 毫秒</p></li></ul></li></ul><hr><h3 id="生产消费-1" tabindex="-1"><a class="header-anchor" href="#生产消费-1" aria-hidden="true">#</a> 生产消费</h3><p>生产流程：</p><ul><li>首先获取当前消息主题的发布信息，获取不到去 Namesrv 获取（默认有 TBW102），并将获取的到的路由数据转化为发布数据，<strong>创建 MQ 队列在多个 Broker 组</strong>（一组代表一主多从的 Broker 架构），客户端实例同样更新订阅数据，创建 MQ 队列，放入负载均衡服务 topicSubscribeInfoTable 中</li><li>然后从发布数据中选择一个 MQ 队列发送消息</li><li>Broker 端通过 SendMessageProcessor 对发送的消息进行持久化处理，存储到 CommitLog。将重试次数过多的消息加入<strong>死信队列</strong>，将延迟消息的主题和队列修改为调度主题和调度队列 ID</li><li>Broker 启动 ScheduleMessageService 服务会为每个延迟级别创建一个延迟任务，让延迟消息得到有效的处理，将到达交付时间的消息修改为原始主题的原始 ID 存入 CommitLog，消费者就可以进行消费了</li></ul><p>消费流程：</p><ul><li>消息消费队列 ConsumerQueue 存储消息在 CommitLog 的索引，消费者通过该队列来读取消息实体内容，一个 MQ 就对应一个 CQ</li><li>首先通过负载均衡服务，将分配到当前消费者实例的 MQ 创建 PullRequest，并放入 PullMessageService 的本地阻塞队列内</li><li>PullMessageService 循环从阻塞队列获取请求对象，发起拉消息请求，并创建 PullCallback 回调对象，将正常拉取的消息<strong>提交到消费任务线程池</strong>，并设置请求的下一次拉取位点，重新放入阻塞队列，形成闭环</li><li>消费任务服务对消费失败的消息进行回退，通过内部生产者实例发送回退消息，回退失败的消息会再次提交消费任务重新消费</li><li>Broker 端对拉取消息的请求进行处理（processRequestCommand），查询成功将消息放入响应体，通过 Netty 写回客户端，当 <code>pullRequest.offset == queue.maxOffset</code> 说明该队列已经没有需要获取的消息，将请求放入长轮询集合等待有新消息</li><li>PullRequestHoldService 负责长轮询，每 5 秒遍历一次长轮询集合，将满足条件的 PullRequest 再次提交到线程池内处理</li></ul><hr>`,110);function B(E,O){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("参考视频："),n("a",r,[s("https://www.bilibili.com/video/BV1L4411y7mn"),e(a)])]),d,n("p",null,[s("官方文档："),n("a",k,[s("https://github.com/apache/rocketmq/tree/master/docs/cn（基础知识部分的笔记参考官方文档编写）"),e(a)])]),m,n("p",null,[s("官方文档："),n("a",v,[s("https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md"),e(a)])]),g,n("p",null,[s("官方文档："),n("a",b,[s("https://github.com/apache/rocketmq/blob/master/docs/cn/design.md"),e(a)])]),h,n("p",null,[s("官方文档："),n("a",f,[s("https://github.com/apache/rocketmq/blob/master/docs/cn/architecture.md"),e(a)])]),y,n("p",null,[s("参考文档："),n("a",w,[s("https://github.com/apache/rocketmq/blob/master/docs/cn/design.md"),e(a)])]),S,n("p",null,[s("推荐文章："),n("a",C,[s("https://cdn.modb.pro/db/394751"),e(a)])]),M,n("p",null,[s("源码解析参考视频："),n("a",x,[s("https://space.bilibili.com/457326371"),e(a)])]),j,n("p",null,[s("官方文档："),n("a",R,[s("https://github.com/apache/rocketmq/blob/master/docs/cn/design.md#2-通信机制"),e(a)])]),T,n("p",null,[s("官方文档："),n("a",q,[s("https://github.com/apache/rocketmq/blob/master/docs/cn/design.md"),e(a)])]),I,n("p",null,[s("参考图："),n("a",Q,[s("https://www.processon.com/view/link/61c8257e0e3e7474fb9dcbc0"),e(a)])]),n("p",null,[s("参考视频："),n("a",P,[s("https://space.bilibili.com/457326371"),e(a)])]),L])}const D=p(i,[["render",B],["__file","RocketMQ.html.vue"]]);export{D as default};
