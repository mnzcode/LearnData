import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as t,c as d,a,d as n,b as c,e as s}from"./app-109af9bf.js";const o={},r=s(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><h2 id="基本概述" tabindex="-1"><a class="header-anchor" href="#基本概述" aria-hidden="true">#</a> 基本概述</h2><p>Docker 是一个开源的应用容器引擎，诞生于 2013 年初，基于 Go 语言实现， dotCloud 公司出品</p><p>Docker 让开发者打包开发应用以及依赖包到一个轻量级、可移植的容器中，可以发布到任何Linux机器上</p><ul><li><p>容器是完全使用沙箱机制，相互隔离</p></li><li><p>容器性能开销极低。</p></li></ul><p>Docker 架构：</p><ul><li><p>**镜像（Image）：**Docker 镜像，就相当于一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统</p></li><li><p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</p></li><li><p><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像</p></li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/Docker-docker架构.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>安装步骤：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># step 1: 安装必要的一些系统工具</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common
<span class="token comment"># step 2: 安装GPG证书</span>
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
<span class="token comment"># Step 3: 写入软件源信息</span>
<span class="token function">sudo</span> add-apt-repository <span class="token string">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable&quot;</span>
<span class="token comment"># Step 4: 更新并安装Docker-CE</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置镜像加速器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;
{
  &quot;registry-mirrors&quot;: [&quot;https://hicqe4pi.mirror.aliyuncs.com&quot;]
}
EOF</span>
<span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="操作命令" tabindex="-1"><a class="header-anchor" href="#操作命令" aria-hidden="true">#</a> 操作命令</h2><h3 id="进程相关" tabindex="-1"><a class="header-anchor" href="#进程相关" aria-hidden="true">#</a> 进程相关</h3><ul><li><p>启动docker服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>停止docker服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>重启doker服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看doker服务状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设置开机启动docker服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="镜像相关" tabindex="-1"><a class="header-anchor" href="#镜像相关" aria-hidden="true">#</a> 镜像相关</h3><ul><li><p>查看镜像：查看本地所有的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
<span class="token function">docker</span> images –q <span class="token comment"># 查看所用镜像的id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>搜索镜像：从网络中查找需要的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search 镜像名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>拉取镜像：从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。如果不知道镜像版本，可以去docker hub 搜索对应镜像查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull 镜像名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除镜像：删除本地镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi 镜像id <span class="token comment"># 删除指定本地镜像</span>
<span class="token function">docker</span> rmi <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> images <span class="token parameter variable">-q</span><span class="token variable">\`</span></span>  <span class="token comment"># 删除所有本地镜像 tab上面的键</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="容器相关" tabindex="-1"><a class="header-anchor" href="#容器相关" aria-hidden="true">#</a> 容器相关</h3><ul><li><p>查看容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment"># 查看正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> –a <span class="token comment"># 查看所有容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建并启动容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run 参数  <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token punctuation">..</span>. /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li>-i：保持容器运行，通常与 -t 同时使用，加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭</li><li>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用</li><li>-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker exec 进入容器。退出后，容器不会关闭</li><li><strong>-it 创建的容器一般称为交互式容器，-id 创建的容器一般称为守护式容器</strong></li><li><strong>--name：为创建的容器命名</strong></li></ul></li><li><p>进入容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> 参数 <span class="token comment"># 退出容器，容器不会关闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>停止容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop 容器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 容器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> 容器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看容器信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 容器名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h2 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷" aria-hidden="true">#</a> 数据卷</h2><blockquote><p>Docker 容器删除后，在容器中产生的数据也会随之销毁<br> Docker 容器和外部机器可以直接交换文件吗？<br> 容器之间想要进行数据交互？</p></blockquote><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/Docker-容器的数据卷.png" style="zoom:67%;"><p><strong>数据卷</strong>：数据卷是宿主机中的一个目录或文件，当容器目录和数据卷目录绑定后，对方的修改会立即同步</p><ul><li><p>一个数据卷可以被多个容器同时挂载</p></li><li><p>一个容器也可以被挂载多个数据卷</p></li></ul><p>数据卷的作用：</p><ul><li>容器数据持久化</li><li>外部机器和容器间接通信</li><li>容器之间数据交换</li></ul><p>配置数据卷</p><ul><li><p>创建启动容器时，使用-v参数设置数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">..</span>. –v 宿主机目录<span class="token punctuation">(</span>文件<span class="token punctuation">)</span>:容器内目录<span class="token punctuation">(</span>文件<span class="token punctuation">)</span> <span class="token punctuation">..</span>. 
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>c1 <span class="token parameter variable">-v</span> /root<span class="token punctuation">(</span>or~<span class="token punctuation">)</span>/data:/root/data_container centos:7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><ol><li><p>目录必须是绝对路径</p></li><li><p>如果目录不存在，会自动创建</p></li><li><p>可以挂载多个数据卷</p></li></ol></li></ul><p>多容器进行数据交换：</p><ul><li>多个容器挂载同一个数据卷</li><li>数据卷容器</li></ul><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/Docker-多容器数据交换.png" style="zoom:50%;"><ul><li><p>创建启动c3数据卷容器，使用 –v 参数设置数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run –it <span class="token parameter variable">--name</span><span class="token operator">=</span>c3 –v /volume centos:7 /bin/bash 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建启动 c1 c2 容器，使用 –-volumes-from 参数设置数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run –it <span class="token parameter variable">--name</span><span class="token operator">=</span>c1 --volumes-from c3 centos:7 /bin/bash
<span class="token function">docker</span> run –it <span class="token parameter variable">--name</span><span class="token operator">=</span>c2 --volumes-from c3 centos:7 /bin/bash  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="应用部署" tabindex="-1"><a class="header-anchor" href="#应用部署" aria-hidden="true">#</a> 应用部署</h2><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h3><p>在Docker容器中部署MySQL，通过外部mysql客户端操作MySQL Server</p><p>端口映射：</p><ul><li><p>容器内的网络服务和外部机器不能直接通信，外部机器和宿主机可以直接通信，宿主机和容器可以直接通信</p></li><li><p>当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的该端口，从而间接访问容器的服务。这种操作称为：<strong>端口映射</strong></p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/Docker-MySQL部署.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><p>MySQL部署步骤：搜索mysql镜像，拉取mysql镜像，创建容器，操作容器中的mysql</p><ol><li><p>搜索mysql镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>拉取mysql镜像</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>docker pull mysql:5.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建容器，设置端口映射、目录映射</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在/root目录下创建mysql目录用于存储mysql数据信息</span>
<span class="token function">mkdir</span> ~/mysql
<span class="token builtin class-name">cd</span> ~/mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span><span class="token operator">=</span>c_mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/logs:/logs <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
mysql:5.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>-p 3307:3306</code>：将容器的 3306 端口映射到宿主机的 3307 端口</li><li><code>-v $PWD/conf:/etc/mysql/conf.d</code>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf，配置目录</li><li><code>-v $PWD/logs:/logs</code>：将主机当前目录下的 logs目录挂载到容器的 /logs，日志目录</li><li><code>-v $PWD/data:/var/lib/mysql</code> ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code>**：**初始化 root 用户的密码。</li></ul></li><li><p>进入容器，操作mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> –it c_mysql /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用外部机器连接容器中的mysql</p></li></ol><hr><h3 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat" aria-hidden="true">#</a> Tomcat</h3><ol><li><p>搜索tomcat镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>拉取tomcat镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建容器，设置端口映射、目录映射</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在/root目录下创建tomcat目录用于存储tomcat数据信息</span>
<span class="token function">mkdir</span> ~/tomcat
<span class="token builtin class-name">cd</span> ~/tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>c_tomcat <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>:/usr/local/tomcat/webapps <span class="token punctuation">\\</span>
tomcat 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><p><code>-p 8080:8080</code>：将容器的8080端口映射到主机的8080端口</p></li><li><p><code>-v $PWD:/usr/local/tomcat/webapps</code>：将主机中当前目录挂载到容器的webapps</p></li></ul></li><li><p>使用外部机器访问tomcat</p></li></ol><hr><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h3><ol><li><p>搜索nginx镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>拉取nginx镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建容器，设置端口映射、目录映射</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在/root目录下创建nginx目录用于存储nginx数据信息</span>
<span class="token function">mkdir</span> ~/nginx
<span class="token builtin class-name">cd</span> ~/nginx
<span class="token function">mkdir</span> conf
<span class="token builtin class-name">cd</span> conf
<span class="token comment"># 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span>
<span class="token function">vim</span> nginx.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>user  nginx<span class="token punctuation">;</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>

error_log  /var/log/nginx/error.log warn<span class="token punctuation">;</span>
pid        /var/run/nginx.pid<span class="token punctuation">;</span>


events <span class="token punctuation">{</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


http <span class="token punctuation">{</span>
    include       /etc/nginx/mime.types<span class="token punctuation">;</span>
    default_type  application/octet-stream<span class="token punctuation">;</span>

    log_format  main  <span class="token string">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
                      <span class="token string">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
                      <span class="token string">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span class="token punctuation">;</span>

    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>

    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>

    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>

    <span class="token comment">#gzip  on;</span>

    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>c_nginx <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/conf/nginx.conf:/etc/nginx/nginx.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/logs:/var/log/nginx <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/html:/usr/share/nginx/html <span class="token punctuation">\\</span>
nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>-p 80:80</code>：将容器的 80端口映射到宿主机的 80 端口</li><li><code>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</code>：将主机当前目录下的 /conf/nginx.conf 挂载到容器的 :/etc/nginx/nginx.conf，配置目录</li><li><code>-v $PWD/logs:/var/log/nginx</code>：将主机当前目录下的 logs 目录挂载到容器的/var/log/nginx，日志目录</li></ul></li><li><p>使用外部机器访问nginx</p></li></ol><hr><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h3><ol><li><p>搜索redis镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>拉取redis镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis:5.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建容器，设置端口映射</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>c_redis <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 redis:5.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用外部机器连接redis</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./redis-cli.exe <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.149.135 <span class="token parameter variable">-p</span> <span class="token number">6379</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><hr><h2 id="镜像原理" tabindex="-1"><a class="header-anchor" href="#镜像原理" aria-hidden="true">#</a> 镜像原理</h2><h3 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理" aria-hidden="true">#</a> 底层原理</h3><blockquote><p>Docker 镜像本质是什么？<br> Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？<br> Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</p></blockquote><p>操作系统的组成部分：进程调度子系统、进程通信子系统、内存管理子系统、设备管理子系统、文件管理子系统、网络通信子系统、作业控制子系统</p><p>Linux文件系统由bootfs和rootfs两部分组成：</p><ul><li><p>bootfs：包含bootloader（引导加载程序）和 kernel（内核）</p></li><li><p>rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件</p></li><li><p>不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos</p></li></ul><p>Docker镜像原理：</p><ul><li><p>Docker镜像是一个<strong>分层文件系统</strong>，是由特殊的文件系统叠加而成，最底端是 bootfs，并复用宿主机的bootfs ，第二层是 root文件系统rootfs称为base image，然后再往上可以叠加其他的镜像文件</p></li><li><p>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统</p></li><li><p>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。</p></li><li><p>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器</p></li></ul><p>问题：</p><ul><li>Docker 中一个Ubuntu镜像为什么只有200MB，而一个Ubuntu操作系统的iso文件要几个个G？<br> Ubuntu的iso镜像文件包含bootfs和rootfs，而docker的Ubuntu镜像复用操作系统的bootfs，只有rootfs和其他镜像层</li><li>Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？<br> 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小500多MB</li></ul><hr><h3 id="镜像制作" tabindex="-1"><a class="header-anchor" href="#镜像制作" aria-hidden="true">#</a> 镜像制作</h3><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/Docker-Docker镜像原理.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h3><h4 id="基本概述-1" tabindex="-1"><a class="header-anchor" href="#基本概述-1" aria-hidden="true">#</a> 基本概述</h4><p>Dockerfile是一个文本文件，包含一条条的指令，每一条指令构建一层，基于基础镜像最终构建出新的镜像</p><ul><li><p>对于开发人员：可以为开发团队提供一个完全一致的开发环境</p></li><li><p>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了</p></li><li><p>对于运维人员：在部署时，可以实现应用的无缝移植</p></li></ul><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [&quot;目录&quot;]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h4 id="centos" tabindex="-1"><a class="header-anchor" href="#centos" aria-hidden="true">#</a> Centos</h4><p>自定义centos7镜像：</p><ol><li><p>默认登录路径为 /usr</p></li><li><p>可以使用vim</p></li></ol><p>实现步骤：</p><ol><li>定义父镜像：FROM centos:7</li><li>定义作者信息：MAINTAINER seazean &lt; <a href="mailto:zhyzhyang@sina.com">zhyzhyang@sina.com</a>&gt;</li><li>执行安装vim命令： RUN yum install -y vim</li><li>定义默认的工作目录：WORKDIR /usr</li><li>定义容器启动执行的命令：CMD /bin/bash</li><li>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</li></ol><h4 id="boot" tabindex="-1"><a class="header-anchor" href="#boot" aria-hidden="true">#</a> Boot</h4><p>定义dockerfile，发布springboot项目：</p><p>实现步骤：</p><ol><li><p>定义父镜像：FROM java:8</p></li><li><p>定义作者信息：MAINTAINER seazean &lt; <a href="mailto:zhyzhyang@sina.com">zhyzhyang@sina.com</a>&gt;</p></li><li><p>将jar包添加到容器： ADD springboot.jar app.jar</p></li><li><p>定义容器启动执行的命令：CMD java–jar app.jar</p></li><li><p>通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p></li></ol><hr><h2 id="服务编排" tabindex="-1"><a class="header-anchor" href="#服务编排" aria-hidden="true">#</a> 服务编排</h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h3><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。</p><ul><li>从Dockerfile build image 或者去dockerhub拉取image；</li><li>创建多个container，管理这些container（启动停止删除）</li></ul><p><strong>服务编排</strong>：按照一定的业务规则批量管理容器</p><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建，启动和停止。使用步骤：</p><ol><li><p>利用 Dockerfile 定义运行环境镜像</p></li><li><p>使用 docker-compose.yml 定义组成应用的各服务</p></li><li><p>运行 docker-compose up 启动应用</p></li></ol><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/Docker-Compose原理.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="功能实现" tabindex="-1"><a class="header-anchor" href="#功能实现" aria-hidden="true">#</a> 功能实现</h3><p>使用docker compose编排nginx+springboot项目</p><ol><li><p>安装Docker Compose</p></li><li><p>创建docker-compose目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> ~/docker-compose
<span class="token builtin class-name">cd</span> ~/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写 docker-compose.yml 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;3&#39;</span>
services:
  nginx:
   image: nginx
   ports:
    - <span class="token number">80</span>:80
   links:
    - app
   volumes:
    - ./nginx/conf.d:/etc/nginx/conf.d
  app:
    image: app
    expose:
      - <span class="token string">&quot;8080&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建./nginx/conf.d目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ./nginx/conf.d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在./nginx/conf.d目录下编写***.conf文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    access_log off<span class="token punctuation">;</span>

    location / <span class="token punctuation">{</span>
        proxy_pass http://app:8080<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在~/docker-compose 目录下使用docker-compose启动容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>测试访问</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://192.168.0.137/hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><hr><h2 id="私有仓库" tabindex="-1"><a class="header-anchor" href="#私有仓库" aria-hidden="true">#</a> 私有仓库</h2>`,95),p={href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"},u=s(`<ul><li><p>私有仓库搭建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1、拉取私有仓库镜像 </span>
<span class="token function">docker</span> pull registry
<span class="token comment"># 2、启动私有仓库容器 </span>
<span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>registry <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 registry
<span class="token comment"># 3、输入地址http://私有仓库服务器ip:5000/v2/_catalog，显示{&quot;repositories&quot;:[]} </span>
<span class="token comment"># 4、修改daemon.json   </span>
<span class="token function">vim</span> /etc/docker/daemon.json    
<span class="token comment"># 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip </span>
<span class="token punctuation">{</span><span class="token string">&quot;insecure-registries&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;192.168.0.137:5000&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span> 
<span class="token comment"># 5、重启docker 服务 </span>
systemctl restart <span class="token function">docker</span>
<span class="token function">docker</span> start registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将镜像上传至私有仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1、标记镜像为私有仓库的镜像     </span>
<span class="token function">docker</span> tag centos:7 私有仓库服务器IP:5000/centos:7
 
<span class="token comment"># 2、上传标记的镜像     </span>
<span class="token function">docker</span> push 私有仓库服务器IP:5000/centos:7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>从私有仓库拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#拉取镜像 </span>
<span class="token function">docker</span> pull 私有仓库服务器ip:5000/centos:7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="虚拟机" tabindex="-1"><a class="header-anchor" href="#虚拟机" aria-hidden="true">#</a> 虚拟机</h2><p>容器：</p><ul><li><p>容器是将软件打包成标准化单元，以用于开发、交付和部署</p></li><li><p>容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置</p></li><li><p>容器化软件在任何环境中都能够始终如一地运行。</p></li><li><p>容器赋予了软件独立性，使其免受外在环境差异的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突</p></li></ul><p>容器和虚拟机对比：</p><ul><li><p>相同：容器和虚拟机具有相似的资源隔离和分配优势</p></li><li><p>不同：</p><ul><li>容器虚拟化的是操作系统，虚拟机虚拟化的是硬件。</li><li>传统虚拟机可以运行不同的操作系统，容器只能运行同一类型操作系统</li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/Docker-容器和虚拟机对比.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于原生</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table></li></ul>`,7);function m(v,b){const e=l("ExternalLinkIcon");return t(),d("div",null,[r,a("p",null,[n("Docker官方的Docker hub（"),a("a",p,[n("https://hub.docker.com"),c(e)]),n("）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像 到本地，也可以把我们自己的镜像推送上去。但是当服务器无法访问互联网，或者不希望将自己的镜像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像")]),u])}const g=i(o,[["render",m],["__file","Docker.html.vue"]]);export{g as default};
