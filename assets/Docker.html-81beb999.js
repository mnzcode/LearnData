const e=JSON.parse('{"key":"v-2fb85cc8","path":"/%E5%B7%A5%E5%85%B7/Docker.html","title":"Docker","lang":"zh-CN","frontmatter":{"description":"Docker 基本概述 Docker 是一个开源的应用容器引擎，诞生于 2013 年初，基于 Go 语言实现， dotCloud 公司出品 Docker 让开发者打包开发应用以及依赖包到一个轻量级、可移植的容器中，可以发布到任何Linux机器上 容器是完全使用沙箱机制，相互隔离 容器性能开销极低。 Docker 架构： **镜像（Image）：**Docker 镜像，就相当于一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像","head":[["meta",{"property":"og:url","content":"https://newzone.top/learn_data/%E5%B7%A5%E5%85%B7/Docker.html"}],["meta",{"property":"og:site_name","content":"挨踢牛马"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"Docker 基本概述 Docker 是一个开源的应用容器引擎，诞生于 2013 年初，基于 Go 语言实现， dotCloud 公司出品 Docker 让开发者打包开发应用以及依赖包到一个轻量级、可移植的容器中，可以发布到任何Linux机器上 容器是完全使用沙箱机制，相互隔离 容器性能开销极低。 Docker 架构： **镜像（Image）：**Docker 镜像，就相当于一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-16T07:46:55.000Z"}],["meta",{"property":"article:author","content":"挨踢牛马"}],["meta",{"property":"article:modified_time","content":"2023-08-16T07:46:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-16T07:46:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"挨踢牛马\\",\\"url\\":\\"https://newzone.top\\"}]}"]]},"headers":[{"level":2,"title":"基本概述","slug":"基本概述","link":"#基本概述","children":[]},{"level":2,"title":"操作命令","slug":"操作命令","link":"#操作命令","children":[{"level":3,"title":"进程相关","slug":"进程相关","link":"#进程相关","children":[]},{"level":3,"title":"镜像相关","slug":"镜像相关","link":"#镜像相关","children":[]},{"level":3,"title":"容器相关","slug":"容器相关","link":"#容器相关","children":[]}]},{"level":2,"title":"数据卷","slug":"数据卷","link":"#数据卷","children":[]},{"level":2,"title":"应用部署","slug":"应用部署","link":"#应用部署","children":[{"level":3,"title":"MySQL","slug":"mysql","link":"#mysql","children":[]},{"level":3,"title":"Tomcat","slug":"tomcat","link":"#tomcat","children":[]},{"level":3,"title":"Nginx","slug":"nginx","link":"#nginx","children":[]},{"level":3,"title":"Redis","slug":"redis","link":"#redis","children":[]}]},{"level":2,"title":"镜像原理","slug":"镜像原理","link":"#镜像原理","children":[{"level":3,"title":"底层原理","slug":"底层原理","link":"#底层原理","children":[]},{"level":3,"title":"镜像制作","slug":"镜像制作","link":"#镜像制作","children":[]},{"level":3,"title":"Dockerfile","slug":"dockerfile","link":"#dockerfile","children":[]}]},{"level":2,"title":"服务编排","slug":"服务编排","link":"#服务编排","children":[{"level":3,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":3,"title":"功能实现","slug":"功能实现","link":"#功能实现","children":[]}]},{"level":2,"title":"私有仓库","slug":"私有仓库","link":"#私有仓库","children":[]},{"level":2,"title":"虚拟机","slug":"虚拟机","link":"#虚拟机","children":[]}],"git":{"createdTime":1692172015000,"updatedTime":1692172015000,"contributors":[{"name":"mnz","email":"dhuhua@foxmail.com","commits":1}]},"readingTime":{"minutes":15.23,"words":4570},"filePathRelative":"工具/Docker.md","localizedDate":"2023年8月16日","excerpt":"<h1> Docker</h1>\\n<h2> 基本概述</h2>\\n<p>Docker 是一个开源的应用容器引擎，诞生于 2013 年初，基于 Go 语言实现， dotCloud 公司出品</p>\\n<p>Docker 让开发者打包开发应用以及依赖包到一个轻量级、可移植的容器中，可以发布到任何Linux机器上</p>\\n<ul>\\n<li>\\n<p>容器是完全使用沙箱机制，相互隔离</p>\\n</li>\\n<li>\\n<p>容器性能开销极低。</p>\\n</li>\\n</ul>\\n<p>Docker 架构：</p>\\n<ul>\\n<li>\\n<p>**镜像（Image）：**Docker 镜像，就相当于一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统</p>\\n</li>\\n<li>\\n<p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</p>\\n</li>\\n<li>\\n<p><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
