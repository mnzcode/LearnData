import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as h,o as d,c as l,a as e,d as a,b as t,e as r}from"./app-3aac6385.js";const s={},o=r('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><h2 id="git概述" tabindex="-1"><a class="header-anchor" href="#git概述" aria-hidden="true">#</a> Git概述</h2><h3 id="版本系统" tabindex="-1"><a class="header-anchor" href="#版本系统" aria-hidden="true">#</a> 版本系统</h3><p>SVN 是集中式版本控制系统，版本库是集中放在中央服务器的，而开发人员工作的时候，用的都是自己的电脑，所以首先要从中央服务器下载最新的版本，然后开发，开发完后，需要把自己开发的代码提交到中央服务器。</p><p>集中式版本控制工具缺点：服务器单点故障、容错性差</p><p>Git 是分布式版本控制系统（Distributed Version Control System，简称 DVCS） ，分为两种类型的仓库：</p><p>本地仓库和远程仓库：</p><ul><li>本地仓库：是在开发人员自己电脑上的 Git 仓库</li><li>远程仓库：是在远程服务器上的 Git 仓库</li></ul><hr><h3 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h3><p>1．从远程仓库中克隆代码到本地仓库</p><p>2．从本地仓库中 checkout 代码然后进行代码修改</p><p>3．在提交前先将代码提交到<strong>暂存区</strong></p><p>4．提交到本地仓库。本地仓库中保存修改的各个历史版本</p><p>5．修改完成后，需要和团队成员共享代码时，将代码 push 到远程仓库</p><h3 id="git安装" tabindex="-1"><a class="header-anchor" href="#git安装" aria-hidden="true">#</a> Git安装</h3>',16),c={href:"https://git-scm.com/download",target:"_blank",rel:"noopener noreferrer"},g=e("h3",{id:"代码托管",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#代码托管","aria-hidden":"true"},"#"),a(" 代码托管")],-1),p=e("p",null,"Git 中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有 GitHub、码云、GitLab 等。",-1),u={href:"https://github.com/%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9D%A2%E5%90%91%E5%BC%80%E6%BA%90%E5%8F%8A%E7%A7%81%E6%9C%89%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%8F%AA%E6%94%AF%E6%8C%81",target:"_blank",rel:"noopener noreferrer"},m={href:"https://gitee.com/%EF%BC%89%E6%98%AF%E5%9B%BD%E5%86%85%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%EF%BC%8C%E7%94%B1%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8%E5%9B%BD%E5%86%85%EF%BC%8C%E6%89%80%E4%BB%A5%E7%9B%B8%E6%AF%94%E4%BA%8E",target:"_blank",rel:"noopener noreferrer"},b={href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"},f=e("hr",null,null,-1),E=e("h2",{id:"环境配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#环境配置","aria-hidden":"true"},"#"),a(" 环境配置")],-1),x=e("p",null,"安装 Git 后首先要设置用户名称和 email 地址，因为每次 Git 提交都会使用该用户信息，此信息和注册的代码托管平台的信息无关",-1),_=e("p",null,"设置用户信息：",-1),B={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},G=e("li",null,[a('git config --global user.email "'),e("a",{href:"mailto:imseazean@gmail.com"},"imseazean@gmail.com"),a('" //用户名和邮箱可以随意填写，不会校对')],-1),v=e("p",null,"查看配置信息：",-1),A=e("li",null,"git config --list",-1),y={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},C=r(`<p>通过上面的命令设置的信息会保存在用户目录下 /.gitconfig 文件中</p><hr><h2 id="本地仓库" tabindex="-1"><a class="header-anchor" href="#本地仓库" aria-hidden="true">#</a> 本地仓库</h2><h3 id="获取仓库" tabindex="-1"><a class="header-anchor" href="#获取仓库" aria-hidden="true">#</a> 获取仓库</h3><ul><li><p><strong>本地仓库初始化</strong></p><ol><li><p>在电脑的任意位置创建一个空目录（例如 repo1）作为本地 Git 仓库</p></li><li><p>进入这个目录中，点击右键打开 Git bash 窗口</p></li><li><p>执行命令 <strong>git init</strong></p><p>如果在当前目录中看到 .git 文件夹（此文件夹为隐藏文件夹）则说明 Git 仓库创建成功</p></li></ol></li><li><p><strong>远程仓库克隆</strong><br> 通过 Git 提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><p>命令：git clone 远程 Git 仓库地址（HTTPS 或者 SSH）</p></li><li><p>生成 SSH 公钥步骤</p><ul><li>设置账户</li><li>cd ~/.ssh（查看是否生成过 SSH 公钥）user 目录下</li><li>生成 SSH 公钥：<code>ssh-keygen -t rsa -C &quot;email&quot;</code><ul><li>-t 指定密钥类型，默认是 rsa ，可以省略</li><li>-C 设置注释文字，比如邮箱</li><li>-f 指定密钥文件存储文件名</li></ul></li><li>查看命令：cat ~/.ssh/id_rsa.pub</li><li>公钥测试命令：ssh -T <a href="mailto:git@github.com">git@github.com</a></li></ul></li></ul><hr><h3 id="工作过程" tabindex="-1"><a class="header-anchor" href="#工作过程" aria-hidden="true">#</a> 工作过程</h3><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/Git基本工作流程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>版本库：.git 隐藏文件夹就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</p><p>工作目录（工作区）：包含 .git 文件夹的目录就是工作目录，主要用于存放开发的代码</p><p>暂存区：.git 文件夹中有很多文件，其中有一个 index 文件就是暂存区，也可以叫做 stage，暂存区是一个临时保存修改文件的地方</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/文件流程图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h3><h4 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git status</td><td>查看 git 状态 （文件是否进行了添加、提交操作）</td></tr><tr><td>git add filename</td><td>添加，将指定文件添加到暂存区</td></tr><tr><td>git commit -m &#39;message&#39;</td><td>提交，将暂存区文件提交到本地仓库，删除暂存区的该文件</td></tr><tr><td>git commit --amend</td><td>修改 commit 的 message</td></tr><tr><td>git rm filename</td><td>删除，删除工作区的文件，不是仓库，需要提交</td></tr><tr><td>git mv filename</td><td>移动或重命名工作区文件</td></tr><tr><td>git reset filename</td><td>使用当前分支上的修改覆盖暂存区，<strong>将暂存区的文件取消暂存</strong></td></tr><tr><td>git checkout filename</td><td>使用暂存区的修改覆盖工作目录，用来撤销本次修改(危险)</td></tr><tr><td>git log</td><td>查看日志（ git 提交的历史日志）</td></tr><tr><td>git reflog</td><td>可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录的操作）</td></tr></tbody></table><p><strong>其他指令</strong>：可以跳过暂存区域直接从分支中取出修改，或者直接提交修改到分支中</p><ul><li>git commit -a 直接把所有文件的修改添加到暂存区然后执行提交</li><li>git checkout HEAD -- files 取出最后一次修改，可以用来进行回滚操作</li></ul><hr><h4 id="文件状态" tabindex="-1"><a class="header-anchor" href="#文件状态" aria-hidden="true">#</a> 文件状态</h4><ul><li><p>Git 工作目录下的文件存在两种状态：</p><ul><li>untracked 未跟踪（未被纳入版本控制）</li><li>tracked 已跟踪（被纳入版本控制） <ul><li>Unmodified 未修改状态</li><li>Modified 已修改状态</li><li>Staged 已暂存状态</li></ul></li></ul></li><li><p>查看文件状态：文件的状态会随着我们执行 Git 的命令发生变化</p><ul><li>git status 查看文件状态</li><li>git status –s 查看更简洁的文件状态</li></ul></li></ul><hr><h4 id="文件忽略" tabindex="-1"><a class="header-anchor" href="#文件忽略" aria-hidden="true">#</a> 文件忽略</h4><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为 .gitignore 的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># no .a files</span>
*.a
<span class="token comment"># but do track lib.a, even though you&#39;re ignoring .a files above</span>
<span class="token operator">!</span>lib.a
<span class="token comment"># only ignore the TODO file in the current directory, not subdir/TODO</span>
/TODO
<span class="token comment"># ignore all files in the build/ directory</span>
build/
<span class="token comment"># ignore doc/notes.txt, but not doc/server/arch.txt</span>
doc/*.txt
<span class="token comment"># ignore all .pdf files in the doc/ directory</span>
doc/**/*.pdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><h3 id="工作流程-1" tabindex="-1"><a class="header-anchor" href="#工作流程-1" aria-hidden="true">#</a> 工作流程</h3><p>Git 有四个工作空间的概念，分别为 工作空间、暂存区、本地仓库、远程仓库。</p><p>pull = fetch + merge</p><p>fetch 是从远程仓库更新到本地仓库，pull是从远程仓库直接更新到工作空间中</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/图解远程仓库工作流程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="查看仓库" tabindex="-1"><a class="header-anchor" href="#查看仓库" aria-hidden="true">#</a> 查看仓库</h3><p>git remote：显示所有远程仓库的简写</p><p>git remote -v：显示所有远程仓库</p><p>git remote show &lt;shortname&gt;：显示某个远程仓库的详细信息</p><h3 id="添加仓库" tabindex="-1"><a class="header-anchor" href="#添加仓库" aria-hidden="true">#</a> 添加仓库</h3><p>git remote add &lt;shortname&gt;&lt;url&gt;：添加一个新的远程仓库，并指定一个可以引用的简写</p><h3 id="克隆仓库" tabindex="-1"><a class="header-anchor" href="#克隆仓库" aria-hidden="true">#</a> 克隆仓库</h3><p>git clone &lt;url&gt;(HTTPS or SSH)：克隆远程仓库</p><p>Git 克隆的是该 Git 仓库服务器上的几乎所有数据（包括日志信息、历史记录等），而不仅仅是复制工作所需要的文件，当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。</p><h3 id="删除仓库" tabindex="-1"><a class="header-anchor" href="#删除仓库" aria-hidden="true">#</a> 删除仓库</h3><p>git remote rm &lt;shortname&gt;：移除远程仓库，从本地移除远程仓库的记录，并不会影响到远程仓库</p><h3 id="拉取仓库" tabindex="-1"><a class="header-anchor" href="#拉取仓库" aria-hidden="true">#</a> 拉取仓库</h3><p>git fetch &lt;shortname&gt;：从远程仓库获取最新版本到本地仓库，不会自动 merge</p><p>git pull &lt;shortname&gt; &lt;branchname&gt;：从远程仓库获取最新版本并 merge 到本地仓库</p><p>注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且<strong>仓库中存在文件</strong>，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在 git pull 命令后加入参数 --allow-unrelated-histories</p><h3 id="推送仓库" tabindex="-1"><a class="header-anchor" href="#推送仓库" aria-hidden="true">#</a> 推送仓库</h3><p>git push &lt;shortname&gt;&lt;branchname&gt;：上传本地指定分支到远程仓库</p><hr><h2 id="版本管理" tabindex="-1"><a class="header-anchor" href="#版本管理" aria-hidden="true">#</a> 版本管理</h2><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/版本切换.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>命令：git reset --hard 版本唯一索引值</p><hr><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><h3 id="查看分支" tabindex="-1"><a class="header-anchor" href="#查看分支" aria-hidden="true">#</a> 查看分支</h3><p>git branch：列出所有本地分支</p><p>git branch -r：列出所有远程分支</p><p>git branch -a：列出所有本地分支和远程分支</p><h3 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支" aria-hidden="true">#</a> 创建分支</h3><p>git branch branch-name：新建一个分支，但依然停留在当前分支</p><p>git checkout -b branch-name：新建一个分支，并切换到该分支</p><h3 id="推送分支" tabindex="-1"><a class="header-anchor" href="#推送分支" aria-hidden="true">#</a> 推送分支</h3><p>git push origin branch-name：推送到远程仓库，origin 是引用名</p><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h3><p>git checkout branch-name：切换到 branch-name 分支</p><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><p>git merge branch-name：合并指定分支到当前分支</p><p>有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没办法合并它们，同时会提示文件冲突。此时需要我们打开冲突的文件并修复冲突内容，最后执行 git add 命令来标识冲突已解决</p><p>​ <img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/合并分支冲突.png" alt="" loading="lazy"></p><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h3><p>git branch -d branch-name：删除分支</p><p>git push origin –d branch-name：删除远程仓库中的分支 （origin 是引用名）</p><p>如果要删除的分支中进行了开发动作，此时执行删除命令并不会删除分支，如果坚持要删除此分支，可以将命令中的 -d 参数改为 -D：git branch -D branch-name</p><hr><h2 id="标签管理" tabindex="-1"><a class="header-anchor" href="#标签管理" aria-hidden="true">#</a> 标签管理</h2><h3 id="查看标签" tabindex="-1"><a class="header-anchor" href="#查看标签" aria-hidden="true">#</a> 查看标签</h3><p>git tag：列出所有 tag</p><p>git show tag-name：查看 tag 详细信息</p><p>标签作用：在开发的一些关键时期，使用标签来记录这些关键时刻，保存快照，例如发布版本、有重大修改、升级的时候、会使用标签记录这些时刻，来永久标记项目中的关键历史时刻</p><h3 id="新建标签" tabindex="-1"><a class="header-anchor" href="#新建标签" aria-hidden="true">#</a> 新建标签</h3><p>git tag tag-name：新建标签，如（git tag v1.0.1）</p><h3 id="推送标签" tabindex="-1"><a class="header-anchor" href="#推送标签" aria-hidden="true">#</a> 推送标签</h3><p>git push [remotename] [tagname]：推送到远程仓库</p><p>git push [remotename] --tags：推送所有的标签</p><h3 id="切换标签" tabindex="-1"><a class="header-anchor" href="#切换标签" aria-hidden="true">#</a> 切换标签</h3><p>git checkout tag-name：切换标签</p><h3 id="删除标签" tabindex="-1"><a class="header-anchor" href="#删除标签" aria-hidden="true">#</a> 删除标签</h3><p>git tag -d tag-name：删除本地标签</p><p>git push origin :refs/tags/ tag-name：删除远程标签</p><hr><h2 id="idea操作" tabindex="-1"><a class="header-anchor" href="#idea操作" aria-hidden="true">#</a> IDEA操作</h2><h3 id="环境配置-1" tabindex="-1"><a class="header-anchor" href="#环境配置-1" aria-hidden="true">#</a> 环境配置</h3><p>File → Settings 打开设置窗口，找到 Version Control 下的 git 选项</p><p>选择 git 的安装目录后可以点击 Test 按钮测试是否正确配置：D:\\Program Files\\Git\\cmd\\git.exe</p><h3 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库" aria-hidden="true">#</a> 创建仓库</h3><p>1、VCS → Import into Version Control → Create Git Repository</p><p>2、选择工程所在的目录,这样就创建好本地仓库了</p><p>3、点击git后边的对勾,将当前项目代码提交到本地仓库</p><p>​ 注意: 项目中的配置文件不需要提交到本地仓库中,提交时,忽略掉即可</p><h3 id="文件操作-1" tabindex="-1"><a class="header-anchor" href="#文件操作-1" aria-hidden="true">#</a> 文件操作</h3><p>右键项目名打开菜单 Git → Add → commit</p><h3 id="版本管理-1" tabindex="-1"><a class="header-anchor" href="#版本管理-1" aria-hidden="true">#</a> 版本管理</h3><ul><li><p>版本对比<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/版本对比.png" alt="" loading="lazy"></p></li><li><p>版本切换方式一：控制台 Version Control → Log → 右键 Reset Current Branch → Reset，这种切换会抛弃原来的提交记录<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/版本切换方式一.png" alt="" loading="lazy"></p></li><li><p>版本切换方式二：控制台 Version Control → Log → Revert Commit → Merge → 处理代码 → commit，这种切换会当成一个新的提交记录，之前的提交记录也都保留<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/版本切换方式二.png" alt="" loading="lazy"></p></li></ul><p>​ <img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/版本切换方式二(1).png" alt="" loading="lazy"></p><hr><h3 id="分支管理-1" tabindex="-1"><a class="header-anchor" href="#分支管理-1" aria-hidden="true">#</a> 分支管理</h3><ul><li>创建分支：VCS → Git → Branches → New Branch → 给分支起名字 → ok</li><li>切换分支：idea 右下角 Git → 选择要切换的分支 → checkout</li><li>合并分支：VCS → Git → Merge changes → 选择要合并的分支 → merge</li><li>删除分支：idea 右下角 → 选中要删除的分支 → Delete</li></ul><hr><h3 id="推送仓库-1" tabindex="-1"><a class="header-anchor" href="#推送仓库-1" aria-hidden="true">#</a> 推送仓库</h3><ol><li>VCS → Git → Push → 点击 master Define remote</li><li>将远程仓库的 url 路径复制过来 → Push<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/本地仓库推送到远程仓库.png" alt="" loading="lazy"></li></ol><hr><h3 id="克隆仓库-1" tabindex="-1"><a class="header-anchor" href="#克隆仓库-1" aria-hidden="true">#</a> 克隆仓库</h3><p>File → Close Project → Checkout from Version Control → Git → 指定远程仓库的路径 → 指定本地存放的路径 → clone</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Tool/远程仓库克隆到本地仓库.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr>`,117);function k(z,S){const i=h("ExternalLinkIcon");return d(),l("div",null,[o,e("p",null,[a("下载地址： "),e("a",c,[a("https://git-scm.com/download"),t(i)])]),g,p,e("p",null,[a("GitHub（地址："),e("a",u,[a("https://github.com/）是一个面向开源及私有软件项目的托管平台，因为只支持"),t(i)]),a(" Git 作为唯一的版本库格式进行托管，故名 GitHub")]),e("p",null,[a("码云（地址： "),e("a",m,[a("https://gitee.com/）是国内的一个代码托管平台，由于服务器在国内，所以相比于"),t(i)]),a(" GitHub，码云速度会更快")]),e("p",null,[a("GitLab（地址： "),e("a",b,[a("https://about.gitlab.com/"),t(i)]),a(" ）是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务")]),f,E,x,_,e("ul",null,[e("li",null,[a("git config --global "),e("a",B,[a("user.name"),t(i)]),a(" “Seazean”")]),G]),v,e("ul",null,[A,e("li",null,[a("git config "),e("a",y,[a("user.name"),t(i)])])]),C])}const F=n(s,[["render",k],["__file","Git.html.vue"]]);export{F as default};
