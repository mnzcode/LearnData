import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,d as s,b as t,e}from"./app-109af9bf.js";const i={},u=e('<h1 id="servlet" tabindex="-1"><a class="header-anchor" href="#servlet" aria-hidden="true">#</a> Servlet</h1><h2 id="javaee" tabindex="-1"><a class="header-anchor" href="#javaee" aria-hidden="true">#</a> JavaEE</h2><h3 id="javaee规范" tabindex="-1"><a class="header-anchor" href="#javaee规范" aria-hidden="true">#</a> JavaEE规范</h3><p><code>JavaEE</code> 规范是 <code>J2EE</code> 规范的新名称，早期被称为 <code>J2EE</code> 规范，其全称是 <code>Java 2 Platform Enterprise Edition</code>，它是由 SUN 公司领导、各厂家共同制定并得到广泛认可的工业标准（<code>JCP</code>组织成员）。之所以改名为<code>JavaEE</code>，目的还是让大家清楚 <code>J2EE</code> 只是 <code>Java</code> 企业应用。在 2004 年底中国软件技术大会 <code>Ioc</code> 微容器（也就是 <code>Jdon</code> 框架的实现原理）演讲中指出：我们需要一个跨 <code>J2SE/WEB/EJB</code> 的微容器，保护我们的业务核心组件，以延续它的生命力，而不是依赖 <code>J2SE/J2EE</code> 版本。此次 <code>J2EE</code> 改名为 <code>Java EE</code>，实际也反映出业界这种共同心声</p><p><code>JavaEE</code> 规范是很多 Java 开发技术的总称。这些技术规范都是沿用自 <code>J2EE</code> 的。一共包括了 13 个技术规范，例如：<code>jsp/servlet</code>，<code>jndi</code>，<code>jaxp</code>，<code>jdbc</code>，<code>jni</code>，<code>jaxb</code>，<code>jmf</code>，<code>jta</code>，<code>jpa</code>，<code>EJB</code>等。</p>',5),r=n("code",null,"JCP",-1),d={href:"https://jcp.org/en/home/index",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("code",null,"JavaEE"),s(" 的版本是延续了 "),n("code",null,"J2EE"),s(" 的版本，但是没有继续采用其命名规则。"),n("code",null,"J2EE"),s(" 的版本从 1.0 开始到 1.4 结束，而 "),n("code",null,"JavaEE"),s(" 版本是从 "),n("code",null,"JavaEE 5"),s(" 版本开始，目前最新的的版本是 "),n("code",null,"JavaEE 8")],-1),v={href:"https://www.oracle.com/technetwork/cn/java/javaee/overview/index.html",target:"_blank",rel:"noopener noreferrer"},m=e('<hr><h3 id="web-概述" tabindex="-1"><a class="header-anchor" href="#web-概述" aria-hidden="true">#</a> Web 概述</h3><p>Web，在计算机领域指网络。像我们接触的 <code>WWW</code>，它是由 3 个单词组成的，即：<code>World Wide Web </code>，中文含义是<b>万维网</b>。而我们前面学的 HTML 的参考文档《W3School 全套教程》中的 <code>W3C</code> 就是万维网联盟，他们的出现都是为了让我们在网络的世界中获取资源，这些资源的存放之处，我们称之为网站。我们通过输入网站的地址（网址），就可以访问网站中提供的资源。在网上我们能访问到的内容全是资源（不区分局域网还是广域网），只不过不同类型的资源展示的效果不一样</p><p>资源分为静态资源和动态资源</p><ul><li><p>静态资源指的是，网站中提供给人们展示的资源是一成不变的，也就是说不同人或者在不同时间，看到的内容都是一样的。例如：我们看到的新闻，网站的使用手册，网站功能说明文档等等。而作为开发者，我们编写的 <code>html</code>、<code>css</code>、<code>js</code> 图片，多媒体等等都可以称为静态资源</p></li><li><p>动态资源它指的是，网站中提供给人们展示的资源是由程序产生的，在不同的时间或者用不同的人员由于身份的不同，所看到的内容是不一样的。例如：我们在CSDN上下载资料，只有登录成功后，且积分足够时才能下载。否则就不能下载，这就是访客身份和会员身份的区别。作为开发人员，我们编写的 <code>JSP</code>，<code>servlet</code>，<code>php</code>，<code>ASP</code> 等都是动态资源。</p></li></ul><p>关于广域网和局域网的划分</p><ul><li>广域网指的就是万维网，也就是我们说的互联网。</li><li>局域网是指的是在一定范围之内可以访问的网络，出了这个范围，就不能再使用的网络。</li></ul><hr><h3 id="系统结构" tabindex="-1"><a class="header-anchor" href="#系统结构" aria-hidden="true">#</a> 系统结构</h3><p>基础结构划分：C/S结构，B/S结构两类。</p><p>技术选型划分：Model1模型，Model2模型，MVC模型和三层架构+MVC模型。</p><p>部署方式划分：一体化架构，垂直拆分架构，分布式架构，流动计算架构，微服务架构。</p><ul><li><p>C/S结构：客户端—服务器的方式。其中C代表Client，S代表服务器。C/S结构的系统设计图如下：<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/JavaEE-CS结构图.jpg" style="zoom:67%;"></p></li><li><p>B/S结构是浏览器—服务器的方式。B代表Browser，S代表服务器。B/S结构的系统设计图如下：</p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/JavaEE-BS结构图.jpg" style="zoom:67%;"></li><li><p>两种结构的区别及优劣</p><ul><li><p>区别：</p><ul><li>第一：硬件环境不同，C/S通常是建立在专用的网络或小范围的网络环境上（即局域网），且必须要安装客户端。而B/S是建立在广域网上的，适应范围强，通常有操作系统和浏览器就行。</li><li>第二：C/S结构比B/S结构更安全，因为用户群相对固定，对信息的保护更强。</li><li>第三：B/S结构维护升级比较简单，而C/S结构维护升级相对困难。</li></ul></li><li><p>优劣</p><ul><li>C/S：能充分发挥客户端PC的处理能力，很多工作可以在客户端处理后再提交给服务器。对应的优点就是客户端响应速度快。</li><li>B/S：总体拥有成本低、维护方便、 分布性强、开发简单，可以不用安装任何专门的软件就能实现在任何地方进行操作，客户端零维护，系统的扩展非常容易，只要有一台能上网的电脑就能使用。</li></ul></li></ul></li><li><p>我们的课程中涉及的系统结构都是是基于B/S结构</p></li></ul><hr><h2 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat" aria-hidden="true">#</a> Tomcat</h2><h3 id="服务器" tabindex="-1"><a class="header-anchor" href="#服务器" aria-hidden="true">#</a> 服务器</h3><p>服务器的概念非常的广泛，它可以指代一台特殊的计算机（相比普通计算机运行更快、负载更高、价格更贵），也可以指代用于部署网站的应用。我们这里说的服务器，其实是web服务器，或者应用服务器。它本质就是一个软件，一个应用。作用就是发布我们的应用（工程），让用户可以通过浏览器访问我们的应用。</p><p>常见的应用服务器，请看下表：</p><table><thead><tr><th>服务器名称</th><th>说明</th></tr></thead><tbody><tr><td>weblogic</td><td>实现了 JavaEE 规范，重量级服务器，又称为 JavaEE 容器</td></tr><tr><td>websphereAS</td><td>实现了 JavaEE 规范，重量级服务器。</td></tr><tr><td>JBOSSAS</td><td>实现了 JavaEE 规范，重量级服务器，免费</td></tr><tr><td>Tomcat</td><td>实现了 jsp/servlet 规范，是一个轻量级服务器，开源免费</td></tr></tbody></table><hr><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h3><h4 id="windows安装" tabindex="-1"><a class="header-anchor" href="#windows安装" aria-hidden="true">#</a> Windows安装</h4>',22),g={href:"http://tomcat.apache.org/",target:"_blank",rel:"noopener noreferrer"},b=e('<p>目录结构详解：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Tomcat目录结构详解.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="linux安装" tabindex="-1"><a class="header-anchor" href="#linux安装" aria-hidden="true">#</a> Linux安装</h4><p>解压apache-tomcat-8.5.32.tar.gz。</p><p>防火墙设置</p><ul><li><p>方式1：service iptables stop 关闭防火墙(不建议); 用到哪一个端口号就放行哪一个(80,8080,3306...)</p></li><li><p>方式2：放行8080 端口</p><ul><li>修改配置文件<code>cd /etc/sysconfig</code>--&gt;<code>vi iptables</code><br><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</code></li><li>重启加载防火墙或者重启防火墙<br><code>service iptables reload</code> 或者<code>service iptables restart</code></li></ul></li></ul><hr><h4 id="启动停止" tabindex="-1"><a class="header-anchor" href="#启动停止" aria-hidden="true">#</a> 启动停止</h4>',9),h={href:"http://startup.sh",target:"_blank",rel:"noopener noreferrer"},S={href:"http://shutdown.sh",target:"_blank",rel:"noopener noreferrer"},q=e(`<p>其中<code>.bat</code>文件是针对windows系统的运行程序，<code>.sh</code>文件是针对linux系统的运行程序。</p><hr><h4 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h4><ul><li><p>启动一闪而过</p><p>没有配置环境变量，配置上 JAVA_HOME 环境变量。</p></li><li><p>Tomcat 启动后控制台输出乱码</p><p>打开 <code>/conf/logging.properties</code>，设置 gbk <code>java.util.logging.ConsoleHandler.encoding = gbk</code></p></li><li><p>Address already in use : JVM_Bind：端口被占用，找到占用该端口的应用</p><ul><li><p>进程不重要：使用cmd命令：netstat -a -o 查看 pid 在任务管理器中结束占用端口的进程</p></li><li><p>进程很重要：修改自己的端口号。修改的是 Tomcat 目录下<code>\\conf\\server.xml</code>中的配置。</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Tomcat-server.xml端口配置.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul></li></ul><hr><h4 id="idea集成" tabindex="-1"><a class="header-anchor" href="#idea集成" aria-hidden="true">#</a> IDEA集成</h4><p>Run -&gt; Edit Configurations -&gt; Templates -&gt; Tomcat Server -&gt; Local</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Tomcat-IDEA配置Tomcat.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="发布应用" tabindex="-1"><a class="header-anchor" href="#发布应用" aria-hidden="true">#</a> 发布应用</h3><h4 id="虚拟目录" tabindex="-1"><a class="header-anchor" href="#虚拟目录" aria-hidden="true">#</a> 虚拟目录</h4><p>在 <code>server.xml</code> 的 <code>&lt;Host&gt;</code> 元素中加一个 <code>&lt;Context path=&quot;&quot; docBase=&quot;&quot;/&gt;</code> 元素</p><ul><li><code>path</code>：访问资源URI，URI名称可以随便起，但是必须在前面加上一个/</li><li><code>docBase</code>：资源所在的磁盘物理地址</li></ul><hr><h4 id="虚拟主机" tabindex="-1"><a class="header-anchor" href="#虚拟主机" aria-hidden="true">#</a> 虚拟主机</h4><p>在<code>&lt;Engine&gt;</code>元素中添加一个<code>&lt;Host name=&quot;&quot; appBase=&quot;&quot; unparkWARs=&quot;&quot; autoDeploy=&quot;&quot; /&gt;</code>，其中：</p><ul><li><code>name</code>：指定主机的名称</li><li><code>appBase</code>：当前主机的应用发布目录</li><li><code>unparkWARs</code>：启动时是否自动解压war包</li><li><code>autoDeploy</code>：是否自动发布</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>www.itcast.cn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>D:\\itcastapps<span class="token punctuation">&quot;</span></span> <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>www.itheima.com<span class="token punctuation">&quot;</span></span> <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>D:\\itheimaapps<span class="token punctuation">&quot;</span></span> <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="idea部署" tabindex="-1"><a class="header-anchor" href="#idea部署" aria-hidden="true">#</a> IDEA部署</h4><ul><li><p>新建工程<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Tomcat-IEDA新建工程.png" style="zoom:67%;"></p></li><li><p>发布工程<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Tomcat-IDEA发布工程.png" alt="" loading="lazy"></p></li><li><p>Run</p></li></ul><hr><h4 id="idea发布" tabindex="-1"><a class="header-anchor" href="#idea发布" aria-hidden="true">#</a> IDEA发布</h4><p>把资源移动到 Tomcat 工程下 web 目录中，两种访问方式</p>`,24),f={href:"http://localhost:8080/Tomcat/login/login.html",target:"_blank",rel:"noopener noreferrer"},x=e(`<li><p>在 web.xml 中配置默认主页</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>/默认主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),y=e('<hr><h3 id="执行原理" tabindex="-1"><a class="header-anchor" href="#执行原理" aria-hidden="true">#</a> 执行原理</h3><h4 id="整体架构" tabindex="-1"><a class="header-anchor" href="#整体架构" aria-hidden="true">#</a> 整体架构</h4><p>Tomcat 核心组件架构图如下所示：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Tomcat-核心组件架构图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>组件介绍：</p><ul><li>GlobalNamingResources：实现 JNDI，指定一些资源的配置信息</li><li>Server：Tomcat 是一个 Servlet 容器，一个 Tomcat 对应一个 Server，一个 Server 可以包含多个 Service</li><li>Service：核心服务是 Catalina，用来对请求进行处理，一个 Service 包含多个 Connector 和一个 Container</li><li>Connector：连接器，负责处理客户端请求，解析不同协议及 I/O 方式</li><li>Executor：线程池</li><li>Container：容易包含 Engine，Host，Context，Wrapper 等组件</li><li>Engine：服务交给引擎处理请求，Container 容器中顶层的容器对象，一个 Engine 可以包含多个 Host 主机</li><li>Host：Engine 容器的子容器，一个 Host 对应一个网络域名，一个 Host 包含多个 Context</li><li>Context：Host 容器的子容器，表示一个 Web 应用</li><li>Wrapper：Tomcat 中的最小容器单元，表示 Web 应用中的 Servlet</li></ul><p>核心类库：</p><ul><li>Coyote：Tomcat 连接器的名称，封装了底层的网络通信，为 Catalina 容器提供了统一的接口，使容器与具体的协议以及 I/O 解耦</li><li>EndPoint：Coyote 通信端点，即通信监听的接口，是 Socket 接收和发送处理器，是对传输层的抽象，用来实现 TCP/IP 协议</li><li>Processor ： Coyote 协议处理接口，用来实现 HTTP 协议，Processor 接收来自 EndPoint 的 Socket，读取字节流解析成 Tomcat 的 Request 和 Response 对象，并通过 Adapter 将其提交到容器处理，Processor 是对应用层协议的抽象</li><li>CoyoteAdapter：适配器，连接器调用 CoyoteAdapter 的 sevice 方法，传入的是 TomcatRequest 对象，CoyoteAdapter 负责将TomcatRequest 转成 ServletRequest，再调用容器的 service 方法</li></ul>',9),w={href:"https://www.jianshu.com/p/7c9401b85704",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.yuque.com/yinhuidong/yu877c/ktq82e",target:"_blank",rel:"noopener noreferrer"},E=e(`<hr><h4 id="启动过程" tabindex="-1"><a class="header-anchor" href="#启动过程" aria-hidden="true">#</a> 启动过程</h4><p>Tomcat 的启动入口是 Bootstrap#main 函数，首先通过调用 <code>bootstrap.init()</code> 初始化相关组件：</p><ul><li><code>initClassLoaders()</code>：初始化三个类加载器，commonLoader 的父类加载器是启动类加载器</li><li><code>Thread.currentThread().setContextClassLoader(catalinaLoader)</code>：自定义类加载器加载 Catalina 类，<strong>打破双亲委派</strong></li><li><code>Object startupInstance = startupClass.getConstructor().newInstance()</code>：反射创建 Catalina 对象</li><li><code>method.invoke(startupInstance, paramValues)</code>：反射调用方法，设置父类加载器是 sharedLoader</li><li><code>catalinaDaemon = startupInstance</code>：引用 Catalina 对象</li></ul><p><code>daemon.load(args)</code> 方法反射调用 Catalina 对象的 load 方法，对<strong>服务器的组件进行初始化</strong>，并绑定了 ServerSocket 的端口：</p><ul><li><p><code>parseServerXml(true)</code>：解析 XML 配置文件</p></li><li><p><code>getServer().init()</code>：服务器执行初始化，采用责任链的执行方式</p><ul><li><p><code>LifecycleBase.init()</code>：生命周期接口的初始化方法，开始链式调用</p></li><li><p><code>StandardServer.initInternal()</code>：Server 的初始化，遍历所有的 Service 进行初始化</p></li><li><p><code>StandardService.initInternal()</code>：Service 的初始化，对 Engine、Executor、listener、Connector 进行初始化</p></li><li><p><code>StandardEngine.initInternal()</code>：Engine 的初始化</p><ul><li><code>getRealm()</code>：创建一个 Realm 对象</li><li><code>ContainerBase.initInternal()</code>：容器的初始化，设置处理容器内组件的启动和停止事件的线程池</li></ul></li><li><p><code>Connector.initInternal()</code>：Connector 的初始化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP/1.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//默认无参构造方法，会创建出 Http11NioProtocol 的协议处理器</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>adapter = new CoyoteAdapter(this)</code>：实例化 CoyoteAdapter 对象</p></li><li><p><code>protocolHandler.setAdapter(adapter)</code>：设置到 ProtocolHandler 协议处理器中</p></li><li><p><code>ProtocolHandler.init()</code>：协议处理器的初始化，底层调用 <code>AbstractProtocol#init</code> 方法</p><p><code>endpoint.init()</code>：端口的初始化，底层调用 <code>AbstractEndpoint#init</code> 方法</p><p><code>NioEndpoint.bind()</code>：绑定方法</p><ul><li><code>initServerSocket()</code>：<strong>初始化 ServerSocket</strong>，以 NIO 的方式监听端口 <ul><li><code>serverSock = ServerSocketChannel.open()</code>：<strong>NIO 的方式打开通道</strong></li><li><code>serverSock.bind(addr, getAcceptCount())</code>：通道绑定连接端口</li><li><code>serverSock.configureBlocking(true)</code>：切换为阻塞模式（没懂，为什么阻塞）</li></ul></li><li><code>initialiseSsl()</code>：初始化 SSL 连接</li><li><code>selectorPool.open(getName())</code>：打开选择器，类似 NIO 的多路复用器</li></ul></li></ul></li></ul></li></ul><p>初始化完所有的组件，调用 <code>daemon.start()</code> 进行<strong>组件的启动</strong>，底层反射调用 Catalina 对象的 start 方法：</p><ul><li><p><code>getServer().start()</code>：启动组件，也是责任链的模式</p><ul><li><p><code>LifecycleBase.start()</code>：生命周期接口的初始化方法，开始链式调用</p></li><li><p><code>StandardServer.startInternal()</code>：Server 服务的启动</p><ul><li><code>globalNamingResources.start()</code>：启动 JNDI 服务</li><li><code>for (Service service : services)</code>：遍历所有的 Service 进行启动</li></ul></li><li><p><code>StandardService.startInternal()</code>：Service 的启动，对所有 Executor、listener、Connector 进行启</p></li><li><p><code>StandardEngine.startInternal()</code>：启动引擎，部署项目</p><ul><li><code>ContainerBase.startInternal()</code>：容器的启动 <ul><li>启动集群、Realm 组件，并且创建子容器，提交给线程池</li><li><code>((Lifecycle) pipeline).start()</code>：遍历所有的管道进行启动 <ul><li><code>Valve current = first</code>：获取第一个阀门</li><li><code>((Lifecycle) current).start()</code>：启动阀门，底层 <code>ValveBase#startInternal</code> 中设置启动的状态</li><li><code>current = current.getNext()</code>：获取下一个阀门</li></ul></li></ul></li></ul></li><li><p><code>Connector.startInternal()</code>：Connector 的初始化</p><ul><li><p><code>protocolHandler.start()</code>：协议处理器的启动</p><p><code>endpoint.start()</code>：端点启动</p><p><code>NioEndpoint.startInternal()</code>：启动 NIO 的端点</p><ul><li><code>createExecutor()</code>：创建 Worker 线程组，10 个线程，用来进行任务处理</li><li><code>initializeConnectionLatch()</code>：用来进行连接限流，<strong>最大 8*1024 条连接</strong></li><li><code>poller = new Poller()</code>：<strong>创建 Poller 对象</strong>，开启了一个多路复用器 Selector</li><li><code>Thread pollerThread = new Thread(poller, getName() + &quot;-ClientPoller&quot;)</code>：创建并启动 Poller 线程，Poller 实现了 Runnable 接口，是一个任务对象，<strong>线程 start 后进入 Poller#run 方法</strong></li><li><code>pollerThread.setDaemon(true)</code>：设置为守护线程</li><li><code>startAcceptorThread()</code>：启动接收者线程 <ul><li><code>acceptor = new Acceptor&lt;&gt;(this)</code>：<strong>创建 Acceptor 对象</strong></li><li><code>Thread t = new Thread(acceptor, threadName)</code>：创建并启动 Acceptor 接受者线程</li></ul></li></ul></li></ul></li></ul></li></ul><hr><h4 id="处理过程" tabindex="-1"><a class="header-anchor" href="#处理过程" aria-hidden="true">#</a> 处理过程</h4><ol><li>Acceptor 监听客户端套接字，每 50ms 调用一次 <strong><code>serverSocket.accept</code></strong>，获取 Socket 后把封装成 NioSocketWrapper（是 SocketWrapperBase 的子类），并设置为非阻塞模式，把 NioSocketWrapper 封装成 PollerEvent 放入同步队列中</li><li>Poller 循环判断同步队列中是否有就绪的事件，如果有则通过 <code>selector.selectedKeys()</code> 获取就绪事件，获取 SocketChannel 中携带的 attachment（NioSocketWrapper），在 processKey 方法中根据事件类型进行 processSocket，将 Wrapper 对象封装成 SocketProcessor 对象，该对象是一个任务对象，提交到 Worker 线程池进行执行</li><li><code>SocketProcessorBase.run()</code> 加锁调用 <code>SocketProcessor#doRun</code>，保证线程安全，从协议处理器 ProtocolHandler 中获取 AbstractProtocol，然后<strong>创建 Http11Processor 对象处理请求</strong></li><li><code>Http11Processor#service</code> 中调用 <code>CoyoteAdapter#service</code> ，把生成的 Tomcat 下的 Request 和 Response 对象通过方法 postParseRequest 匹配到对应的 Servlet 的请求响应，将请求传递到对应的 Engine 容器中调用 Pipeline，管道中包含若干个 Valve，执行完所有的 Valve 最后执行 StandardEngineValve，继续调用 Host 容器的 Pipeline，执行 Host 的 Valve，再传递给 Context 的 Pipeline，最后传递到 Wrapper 容器</li><li><code>StandardWrapperValve#invoke</code> 中创建了 Servlet 对象并执行初始化，并为当前请求准备一个 FilterChain 过滤器链执行 doFilter 方法，<code>ApplicationFilterChain#doFilter</code> 是一个<strong>责任链的驱动方法</strong>，通过调用 internalDoFilter 来获取过滤器链的下一个过滤器执行 doFilter，执行完所有的过滤器后执行 <code>servlet.service</code> 的方法</li><li>最后调用 HttpServlet#service()，根据请求的方法来调用 doGet、doPost 等，执行到自定义的业务方法</li></ol><hr><h2 id="servlet-1" tabindex="-1"><a class="header-anchor" href="#servlet-1" aria-hidden="true">#</a> Servlet</h2><h3 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h3><p>Socket 是使用 TCP/IP 或者 UDP 协议在服务器与客户端之间进行传输的技术，是网络编程的基础</p><ul><li><strong>Servlet 是使用 HTTP 协议在服务器与客户端之间通信的技术，是 Socket 的一种应用</strong></li><li><strong>HTTP 协议：是在 TCP/IP 协议之上进一步封装的一层协议，关注数据传输的格式是否规范，底层的数据传输还是运用了 Socket 和 TCP/IP</strong></li></ul><p>Tomcat 和 Servlet 的关系：Servlet 的运行环境叫做 Web 容器或 Servlet 服务器，<strong>Tomcat 是 Web 应用服务器，是一个 Servlet/JSP 容器</strong>。Tomcat 作为 Servlet 容器，负责处理客户请求，把请求传送给 Servlet，并将 Servlet 的响应传送回给客户。而 Servlet 是一种运行在支持 Java 语言的服务器上的组件，Servlet 用来扩展 Java Web 服务器功能，提供非常安全的、可移植的、易于使用的 CGI 替代品<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Tomcat与Servlet的关系.png" alt="" loading="lazy"></p><hr><h3 id="基本介绍-1" tabindex="-1"><a class="header-anchor" href="#基本介绍-1" aria-hidden="true">#</a> 基本介绍</h3><h4 id="servlet类" tabindex="-1"><a class="header-anchor" href="#servlet类" aria-hidden="true">#</a> Servlet类</h4><p>Servlet是SUN公司提供的一套规范，名称就叫Servlet规范，它也是JavaEE规范之一。通过API来使用Servlet。</p><ol><li><p>Servlet是一个运行在web服务端的java小程序，用于接收和响应客户端的请求。一个服务器包含多个Servlet</p></li><li><p>通过实现Servlet接口，继承GenericServlet或者HttpServlet，实现Servlet功能</p></li><li><p>每次请求都会执行service方法，在service方法中还有参数ServletRequest和ServletResponse</p></li><li><p>支持配置相关功能</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Servlet类关系总视图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><hr><h4 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h4><p>创建 Web 工程 → 编写普通类继承 Servlet 相关类 → 重写方法</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Servlet入门案例执行.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Servlet执行过程分析：</p><p>通过浏览器发送请求，请求首先到达Tomcat服务器，由服务器解析请求URL，然后在部署的应用列表中找到应用。然后找到web.xml配置文件，在web.xml中找到FirstServlet的配置（<code>&lt;url-pattern&gt;/&lt;url-pattern&gt;</code>），找到后执行service方法，最后由FirstServlet响应客户浏览器。整个过程如下图所示：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Servlet执行过程图.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式" aria-hidden="true">#</a> 实现方式</h4><p>实现 Servlet 功能时，可以选择以下三种方式：</p><ul><li><p>第一种：实现 Servlet 接口，接口中的方法必须全部实现。<br> 使用此种方式，表示接口中的所有方法在需求方面都有重写的必要。此种方式支持最大程度的自定义。</p></li><li><p>第二种：继承 GenericServlet，service 方法必须重写，其他方可根据需求，选择性重写。<br> 使用此种方式，表示只在接收和响应客户端请求这方面有重写的需求，而其他方法可根据实际需求选择性重写，使我们的开发Servlet变得简单。但是，此种方式是和 HTTP 协议无关的。</p></li><li><p>第三种：继承 HttpServlet，它是 javax.servlet.http 包下的一个抽象类，是 GenericServlet 的子类。选择继承 HttpServlet 时，<strong>需要重写 doGet 和 doPost 方法</strong>，来接收 get 方式和 post 方式的请求，不要覆盖 service 方法。使用此种方式，表示我们的请求和响应需要和 HTTP 协议相关，我们是通过 HTTP 协议来访问。每次请求和响应都符合 HTTP 协议的规范。请求的方式就是 HTTP 协议所支持的方式（GET POST PUT DELETE TRACE OPTIONS HEAD )。</p></li></ul><hr><h3 id="相关问题" tabindex="-1"><a class="header-anchor" href="#相关问题" aria-hidden="true">#</a> 相关问题</h3><h4 id="异步处理" tabindex="-1"><a class="header-anchor" href="#异步处理" aria-hidden="true">#</a> 异步处理</h4><p>Servlet 3.0 中的异步处理指的是允许Servlet重新发起一条新线程去调用 耗时业务方法，这样就可以避免等待</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Servlet3.0的异步处理.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h4><p>servlet从创建到销毁的过程：</p><ul><li><p>出生：（初始化）请求第一次到达 Servlet 时，创建对象，并且初始化成功。Only one time</p></li><li><p>活着：（服务）服务器提供服务的整个过程中，该对象一直存在，每次只是执行 service 方法</p></li><li><p>死亡：（销毁）当服务停止时，或者服务器宕机时，对象删除，</p></li></ul><p>serrvlet生命周期方法:<br><code>init(ServletConfig config)</code> → <code>service(ServletRequest req, ServletResponse res)</code> → <code>destroy()</code></p><p>默认情况下, 有了第一次请求, 会调用 init() 方法进行初始化【调用一次】，任何一次请求，都会调用 service() 方法处理这个请求，服务器正常关闭或者项目从服务器移除, 调用 destory() 方法进行销毁【调用一次】</p><p><strong>扩展</strong>：servlet 是单例多线程的，尽量不要在 servlet 里面使用全局(成员)变量，可能会导致线程不安全</p><ul><li>单例：Servlet 对象只会创建一次，销毁一次，Servlet 对象只有一个实例。</li><li>多线程：服务器会针对每次请求, 开启一个线程调用 service() 方法处理这个请求</li></ul><hr><h4 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全" aria-hidden="true">#</a> 线程安全</h4><p>Servlet运用了单例模式，整个应用中只有一个实例对象，所以需要分析这个唯一的实例中的类成员是否线程安全</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>
    <span class="token comment">//1.定义用户名成员变量</span>
    <span class="token comment">//private String username = null;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//synchronized (this) {</span>
            <span class="token comment">//2.获取用户名</span>
            username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//3.获取输出流对象</span>
            <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//4.响应给客户端浏览器</span>
            pw<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome:&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//5.关流</span>
            pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),j={href:"http://localhost:8080/ServletDemo/username=aaa",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,"在Servlet中定义了类成员之后，多个浏览器都会共享类成员的数据，其中任何一个线程修改了数据，都会影响其他线程。因此，我们可以认为Servlet它不是线程安全的。因为Servlet是单例，单例对象的类成员只会随类实例化时初始化一次，之后的操作都是改变，而不会重新初始化。",-1),H=n("p",null,"解决办法：如果类成员是共用的，只在初始化时赋值，其余时间都是获取。或者加锁synchronized",-1),P=n("hr",null,null,-1),D=n("h4",{id:"映射方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#映射方式","aria-hidden":"true"},"#"),s(" 映射方式")],-1),_=n("p",null,"Servlet支持三种映射方式，三种映射方式的优先级为：第一种>第二种>第三种。",-1),I=n("br",null,null,-1),T=n("br",null,null,-1),O={href:"http://localhost:8080/servlet/servletDemo",target:"_blank",rel:"noopener noreferrer"},F=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.servlet.ServletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/servletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),A=n("br",null,null,-1),J=n("br",null,null,-1),L={href:"http://localhost:8080/servlet/",target:"_blank",rel:"noopener noreferrer"},W=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.servlet.ServletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/servlet/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z=n("br",null,null,-1),B=n("br",null,null,-1),N={href:"http://localhost:8080/%E4%BB%BB%E4%BD%95%E5%AD%97%E7%AC%A6%E4%BB%BB%E4%BD%95%E7%9B%AE%E5%BD%95",target:"_blank",rel:"noopener noreferrer"},U={href:"http://localhost:8080/seazean/i.do",target:"_blank",rel:"noopener noreferrer"},M=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.servlet.ServletDemo05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),G=e(`<hr><h4 id="多路径映射" tabindex="-1"><a class="header-anchor" href="#多路径映射" aria-hidden="true">#</a> 多路径映射</h4><p>一个Servlet的多种路径配置的支持。给一个Servlet配置多个访问映射，从而根据不同请求的URL实现不同的功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*多路映射*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo06</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token comment">//获取访问的资源路径</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;/vip&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果访问资源路径是/vip 商品价格为9折</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;商品原价为：&quot;</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">&quot;。优惠后是：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;/svip&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果访问资源路径是/svip 商品价格为5折</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;商品原价为：&quot;</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">&quot;。优惠后是：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>money<span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果访问资源路径是其他  商品价格原样显示</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;商品价格为：&quot;</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--演示Servlet多路径映射--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>vip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.servlet.ServletDemo06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>vip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/vip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>svip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.servlet.ServletDemo06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>svip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/svip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>other<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.servlet.ServletDemo06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>other<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/other<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以根据不同的网页显示不同的数据。</p><hr><h4 id="启动时创建" tabindex="-1"><a class="header-anchor" href="#启动时创建" aria-hidden="true">#</a> 启动时创建</h4><ul><li>第一种：应用加载时创建Servlet，它的优势是在服务器启动时，就把需要的对象都创建完成了，从而在使用的时候减少了创建对象的时间，提高了首次执行的效率。它的弊端是在应用加载时就创建了Servlet对象，因此，导致内存中充斥着大量用不上的Servlet对象，造成了内存的浪费。</li><li>第二种：请求第一次访问是创建Servlet，它的优势就是减少了对服务器内存的浪费，因为一直没有被访问过的Servlet对象都没有创建，因此也提高了服务器的启动时间。而它的弊端就是要在应用加载时就做的初始化操作，它都没法完成，从而要考虑其他技术实现。</li></ul><p>在web.xml中是支持对Servlet的创建时机进行配置的，配置的方式如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--配置ServletDemo3--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.web.servlet.ServletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--配置Servlet的创建顺序，当配置此标签时，Servlet就会改为应用加载时创建
        配置项的取值只能是正整数（包括0），数值越小，表明创建的优先级越高--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/servletDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认servlet" tabindex="-1"><a class="header-anchor" href="#默认servlet" aria-hidden="true">#</a> 默认Servlet</h4><p>默认 Servlet 是由服务器提供的一个 Servlet，它配置在 Tomcat 的 conf 目录下的 web.xml 中。</p><p>它的映射路径是<code>&lt;url-pattern&gt;/&lt;url-pattern&gt;</code>，我们在发送请求时，首先会在我们应用中的 web.xml 中查找映射配置。但是当找不到对应的 Servlet 路径时，就去找默认的 Servlet，由默认 Servlet 处理。</p><hr><h3 id="servletconfig" tabindex="-1"><a class="header-anchor" href="#servletconfig" aria-hidden="true">#</a> ServletConfig</h3><p>ServletConfig 是 Servlet 的配置参数对象。在 Servlet 规范中，允许为每个 Servlet 都提供一些初始化配置，每个 Servlet 都有自己的ServletConfig，作用是<strong>在 Servlet 初始化期间，把一些配置信息传递给 Servlet</strong></p><p>生命周期：在初始化阶段读取了 web.xml 中为 Servlet 准备的初始化配置，并把配置信息传递给 Servlet，所以生命周期与 Servlet 相同。如果 Servlet 配置了 <code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>，ServletConfig 也会在应用加载时创建。</p><p>获取 ServletConfig：在 init 方法中为 ServletConfig 赋值</p><p>常用API：</p><ul><li><code>String getInitParameter(String name)</code>：根据初始化参数的名称获取参数的值，根据<code>&lt;param-name&gt;</code>，获取<code>&lt;param-value&gt;</code></li><li><code>Enumeration&lt;String&gt; getInitParameterNames()</code> : 获取所有初始化参数名称的枚举(遍历方式看例子)</li><li><code>ServletContext getServletContext()</code> : 获取<strong>ServletContext</strong>对象</li><li><code>String getServletName()</code> : 获取Servlet名称</li></ul><p>代码实现：</p><ul><li><p>web.xml 配置：<br> 初始化参数使用 <code>&lt;servlet&gt;</code> 标签中的 <code>&lt;init-param&gt; </code>标签来配置，并且每个 Servlet 都支持有多个初始化参数，并且初始化参数都是以键值对的形式存在的</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--配置ServletDemo8--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.itheima.web.servlet.ServletDemo8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--配置初始化参数--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--用于获取初始化参数的key--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--初始化参数的值--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--每个初始化参数都需要用到init-param标签--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>servletInfo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>This is Demo8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servletDemo8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/servletDemo8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//演示Servlet的初始化参数对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo8</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
	<span class="token comment">//定义Servlet配置对象ServletConfig</span>
    <span class="token keyword">private</span> <span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">;</span>

    <span class="token comment">//在初始化时为ServletConfig赋值</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servletConfig <span class="token operator">=</span> config<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
       * doGet方法输出一句话
       */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.输出ServletConfig</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.获取Servlet的名称</span>
        <span class="token class-name">String</span> servletName<span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.获取字符集编码</span>
        <span class="token class-name">String</span> encoding <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;encoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4.获取所有初始化参数名称的枚举</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//遍历names</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//取出每个name</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//根据key获取value</span>
            <span class="token class-name">String</span> value <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name:&quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;,value:&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//5.获取ServletContext对象</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//调用doGet方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>效果：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/ServletConfig演示.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><hr><h3 id="servletcontext" tabindex="-1"><a class="header-anchor" href="#servletcontext" aria-hidden="true">#</a> ServletContext</h3><p>ServletContext 对象是应用上下文对象。服务器为每一个应用都创建了一个 ServletContext 对象，ServletContext 属于整个应用，不局限于某个 Servlet，可以实现让应用中所有 Servlet 间的数据共享。</p><p>上下文代表了程序当下所运行的环境，联系整个应用的生命周期与资源调用，是程序可以访问到的所有资源的总和，资源可以是一个变量，也可以是一个对象的引用</p><p>生命周期：</p><ul><li>出生：应用一加载，该对象就被创建出来。一个应用只有一个实例对象（Servlet 和 ServletContext 都是单例的）</li><li>活着：只要应用一直提供服务，该对象就一直存在。</li><li>死亡：应用被卸载（或者服务器停止），该对象消亡。</li></ul><p>域对象：指的是对象有作用域，即有作用范围，可以<strong>实现数据共享</strong>，不同作用范围的域对象，共享数据的能力不一样。</p><p>Servlet 规范中，共有4个域对象，ServletContext 是其中一个，web 应用中最大的作用域，叫 application 域，可以实现整个应用间的数据共享功能。</p><p>数据共享：</p><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/ServletContext共享数据.png" style="zoom:50%;"><p>获取ServletContext：</p><ul><li><p>Java 项目继承 HttpServlet，HttpServlet 继承 GenericServlet，GenericServlet 中有一个方法可以直接使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ServletRequest 类方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取ServletContext对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>常用API：</p><ul><li><code>String getInitParameter(String name)</code> : 根据名称获取全局配置的参数</li><li><code>String getContextPath</code> : 获取当前应用访问的虚拟目录</li><li><code>String getRealPath(String path)</code> : 根据虚拟目录获取应用部署的磁盘绝对路径</li><li><code>void setAttribute(String name, Object object)</code> : 向应用域对象中存储数据</li><li><code>Object getAttribute(String name)</code> : 根据名称获取域对象中的数据，没有则返回null</li><li><code>void removeAttribute(String name)</code> : 根据名称移除应用域对象中的数据</li></ul><p>代码实现：</p><ul><li><p>web.xml配置：<br> 配置的方式，需要在<code>&lt;web-app&gt;</code>标签中使用<code>&lt;context-param&gt;</code>来配置初始化参数，它的配置是针对整个应用的配置，被称为应用的初始化参数配置。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--配置应用初始化参数--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--用于获取初始化参数的key--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>servletContextInfo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--初始化参数的值--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>This is application scope<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--每个应用初始化参数都需要用到context-param标签--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>globalEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContextDemo</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取ServletContext对象</span>
        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取全局配置的globalEncoding</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;globalEncoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//UTF-8</span>

        <span class="token comment">//获取应用的访问虚拟目录</span>
        <span class="token class-name">String</span> contextPath <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//servlet</span>

        <span class="token comment">//根据虚拟目录获取应用部署的磁盘绝对路径</span>
        <span class="token comment">//获取b.txt文件的绝对路径 web目录下</span>
        <span class="token class-name">String</span> b <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取c.txt文件的绝对路径  /WEB-INF目录下</span>
        <span class="token class-name">String</span> c <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/c.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取a.txt文件的绝对路径 //src目录下</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/classes/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//向域对象中存储数据</span>
        context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//移除域对象中username的数据</span>
        <span class="token comment">//context.removeAttribute(&quot;username&quot;);</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//E:\\Database\\Java\\Project\\JavaEE\\out\\artifacts\\Servlet_war_exploded\\b.txt</span>
<span class="token comment">//E:\\Database\\Java\\Project\\JavaEE\\out\\artifacts\\Servlet_war_exploded\\WEB-INF\\c.txt</span>
<span class="token comment">//E:\\Database\\Java\\Project\\JavaEE\\out\\artifacts\\Servlet_war_exploded\\WEB-INF\\classes\\a.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="注解开发" tabindex="-1"><a class="header-anchor" href="#注解开发" aria-hidden="true">#</a> 注解开发</h3><p>Servlet3.0 版本！不需要配置 web.xml</p><ul><li><p>注解案例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Servlet Demo1 Annotation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>WebServlet注解（@since Servlet 3.0 (Section 8.1.1)）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">WebServlet</span> <span class="token punctuation">{</span>
    <span class="token comment">//指定Servlet的名称。相当于xml配置中&lt;servlet&gt;标签下的&lt;servlet-name&gt;</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//用于映射Servlet访问的url映射，相当于xml配置时的&lt;url-pattern&gt;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//相当于xml配置时的&lt;url-pattern&gt;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">urlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">//用于配置Servlet的启动时机，相当于xml配置的&lt;load-on-startup&gt;</span>
    <span class="token keyword">int</span> <span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">//用于配置Servlet的初始化参数，相当于xml配置的&lt;init-param&gt;</span>
    <span class="token class-name">WebInitParam</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//用于配置Servlet是否支持异步，相当于xml配置的&lt;async-supported&gt;</span>
    <span class="token keyword">boolean</span> <span class="token function">asyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">//用于指定Servlet的小图标</span>
    <span class="token class-name">String</span> <span class="token function">smallIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//用于指定Servlet的大图标</span>
    <span class="token class-name">String</span> <span class="token function">largeIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//用于指定Servlet的描述信息</span>
    <span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//用于指定Servlet的显示名称</span>
    <span class="token class-name">String</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>手动创建容器：（了解）</p></li></ul><hr><h2 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> Request</h2><h3 id="请求响应" tabindex="-1"><a class="header-anchor" href="#请求响应" aria-hidden="true">#</a> 请求响应</h3><p>Web服务器收到客户端的http请求，会针对每一次请求，分别创建一个用于代表请求的request对象、和代表响应的response对象。</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Servlet请求响应图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="请求对象" tabindex="-1"><a class="header-anchor" href="#请求对象" aria-hidden="true">#</a> 请求对象</h3><p>请求：客户机希望从服务器端索取一些资源，向服务器发出询问</p><p>请求对象：在 JavaEE 工程中，用于发送请求的对象，常用的对象是 ServletRequest 和 HttpServletRequest ，它们的区是是否与 HTTP 协议有关</p><p>Request 作用：</p><ul><li>操作请求三部分(行,头,体)</li><li>请求转发</li><li>作为域对象存数据</li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Request请求对象的类视图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="请求路径" tabindex="-1"><a class="header-anchor" href="#请求路径" aria-hidden="true">#</a> 请求路径</h3>`,57),$=n("thead",null,[n("tr",null,[n("th",null,"方法"),n("th",null,"作用")])],-1),V=n("tr",null,[n("td",null,"String getLocalAddr()"),n("td",null,"获取本机（服务器）地址")],-1),X=n("tr",null,[n("td",null,"String getLocalName()"),n("td",null,"获取本机（服务器）名称")],-1),Y=n("tr",null,[n("td",null,"int getLocalPort()"),n("td",null,"获取本机（服务器）端口")],-1),K=n("tr",null,[n("td",null,"String getRemoteAddr()"),n("td",null,"获取访问者IP")],-1),Q=n("tr",null,[n("td",null,"String getRemoteHost"),n("td",null,"获取访问者主机")],-1),Z=n("tr",null,[n("td",null,"int getRemotePort()"),n("td",null,"获取访问者端口")],-1),nn=n("tr",null,[n("td",null,"String getMethod();"),n("td",null,"获得请求方式")],-1),sn=n("tr",null,[n("td",null,"String getRequestURI()"),n("td",null,"获取统一资源标识符（/request/servletDemo01）")],-1),an=n("td",null,"String getRequestURL()",-1),tn={href:"http://localhost:8080/request/servletDemo01%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},en=n("tr",null,[n("td",null,"String getQueryString()"),n("td",null,[s("获取请求消息的数据"),n("br"),s("（GET方式 URL中带参字符串：username=aaa&password=123）")])],-1),pn=n("tr",null,[n("td",null,"String getContextPath()"),n("td",null,"获取虚拟目录名称（/request）")],-1),on=n("tr",null,[n("td",null,"String getServletPath"),n("td",null,[s("获取Servlet映射路径"),n("br"),s("（"),n("code",null,"<url-pattern>"),s("或@WebServlet值: /servletDemo01）")])],-1),ln=n("tr",null,[n("td",null,"String getRealPath(String path)"),n("td",null,"根据虚拟目录获取应用部署的磁盘绝对路径")],-1),cn=e(`<p>URL = URI + HOST</p><p>URL = HOST + ContextPath + ServletPath</p><hr><h3 id="获取请求头" tabindex="-1"><a class="header-anchor" href="#获取请求头" aria-hidden="true">#</a> 获取请求头</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>String getHeader(String name)</td><td>获得指定请求头的值。<br>如果没有该请求头返回null，有多个值返回第一个</td></tr><tr><td>Enumeration&lt;String&gt; getHeaders(String name)</td><td>获取指定请求头的多个值</td></tr><tr><td>Enumeration&lt;String&gt; getHeaderNames()</td><td>获取所有请求头名称的枚举</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo02&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.根据请求头名称获取一个值</span>
        <span class="token class-name">String</span> connection <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//keep-alive</span>

        <span class="token comment">//2.根据请求头名称获取多个值</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token string">&quot;accept-encoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> value <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//gzip, deflate, br</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="请求参数" tabindex="-1"><a class="header-anchor" href="#请求参数" aria-hidden="true">#</a> 请求参数</h3><h4 id="请求参数-1" tabindex="-1"><a class="header-anchor" href="#请求参数-1" aria-hidden="true">#</a> 请求参数</h4><p>请求参数是正文部分&lt;input&gt;标签内容，&lt;form&gt;标签属性action=&quot;/request/servletDemo08&quot;，服务器URI</p><table><thead><tr><th>法名</th><th>作用</th></tr></thead><tbody><tr><td>String getParameter(String name)</td><td>获得指定参数名的值<br>如果没有该参数则返回null，如果有多个获得第一个</td></tr><tr><td>String[] getParameterValues(String name)</td><td>获得指定参数名所有的值。此方法为复选框提供的</td></tr><tr><td>Enumeration&lt;String&gt; getParameterNames()</td><td>获得所有参数名</td></tr><tr><td>Map&lt;String,String[]&gt; getParameterMap()</td><td>获得所有的请求参数键值对（key=value）</td></tr></tbody></table><hr><h4 id="封装参数" tabindex="-1"><a class="header-anchor" href="#封装参数" aria-hidden="true">#</a> 封装参数</h4><p>封装请求参数到类对象：</p><ul><li><p>直接封装：有参构造或者set方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo04&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo04</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.获取所有的数据</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">&quot;hobby&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.封装学生对象</span>
        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.输出对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">;</span>
        
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--register.html--&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>注册页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/request/servletDemo05<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hobby<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>study<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>学习
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hobby<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>游戏 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>反射方式：</p><p>表单<code>&lt;input&gt;</code>标签的name属性取值，必须和实体类中定义的属性名称一致</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.获取请求正文的映射关系</span>
    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.封装学生对象</span>
    <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.1遍历集合</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//2.2获取Student对象的属性描述器</span>
            <span class="token comment">//参数一：指定获取xxx属性的描述器</span>
            <span class="token comment">//参数二：指定字节码文件</span>
            <span class="token class-name">PropertyDescriptor</span> pd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>stu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//2.3获取对应的setXxx方法</span>
            <span class="token class-name">Method</span> writeMethod <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//2.4执行方法</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                writeMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                writeMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//3.输出对象</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>commons-beanutils封装</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.获取所有的数据</span>
        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.封装学生对象</span>
        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//3.输出对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="流获取数据" tabindex="-1"><a class="header-anchor" href="#流获取数据" aria-hidden="true">#</a> 流获取数据</h4><p><code>ServletInputStream getInputStream()</code> : 获取请求字节输入流对象<br><code>BufferedReader getReader() </code> : 获取请求缓冲字符输入流对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo07&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo07</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//字符流(必须是post方式)</span>
        <span class="token comment">/*BufferedReader br = req.getReader();
        String line;
        while((line = br.readLine()) != null) {
            System.out.println(line);
        }*/</span>
        <span class="token comment">//br.close();</span>
        <span class="token comment">//字节流</span>
        <span class="token class-name">ServletInputStream</span> is <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//is.close();</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/request/servletDemo07<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="请求域" tabindex="-1"><a class="header-anchor" href="#请求域" aria-hidden="true">#</a> 请求域</h3><h4 id="请求域-1" tabindex="-1"><a class="header-anchor" href="#请求域-1" aria-hidden="true">#</a> 请求域</h4><p>request 域：可以在一次请求范围内进行共享数据</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void setAttribute(String name, Object value)</td><td>向请求域对象中存储数据</td></tr><tr><td>Object getAttribute(String name)</td><td>通过名称获取请求域对象的数据</td></tr><tr><td>void removeAttribute(String name)</td><td>通过名称移除请求域对象的数据</td></tr></tbody></table><hr><h4 id="请求转发" tabindex="-1"><a class="header-anchor" href="#请求转发" aria-hidden="true">#</a> 请求转发</h4><p>请求转发：客户端的一次请求到达后，需要借助其他 Servlet 来实现功能，进行请求转发。特点：</p><ul><li>浏览器地址栏不变</li><li>域对象中的数据不丢失</li><li>负责转发的 Servlet 转发前后响应正文会丢失</li><li>由转发目的地来响应客户端</li></ul><p>HttpServletRequest 类方法：</p><ul><li><code>RequestDispatcher getRequestDispatcher(String path) </code> : 获取任务调度对象</li></ul><p>RequestDispatcher 类方法：</p><ul><li><code>void forward(ServletRequest request, ServletResponse response)</code> : 实现转发，将请求从 Servlet 转发到服务器上的另一个资源（Servlet，JSP 文件或 HTML 文件）</li></ul>`,33),un={href:"http://localhost:8080/request/servletDemo09%EF%BC%8C/servletDemo10%E4%B9%9F%E4%BC%9A%E6%89%A7%E8%A1%8C",target:"_blank",rel:"noopener noreferrer"},rn=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo09&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo09</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//设置共享数据</span>
        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;encoding&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取请求调度对象</span>
        <span class="token class-name">RequestDispatcher</span> rd <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//实现转发功能</span>
        rd<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo10&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo10</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取共享数据</span>
        <span class="token class-name">Object</span> encoding <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;encoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//gbk</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletDemo10执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="请求包含" tabindex="-1"><a class="header-anchor" href="#请求包含" aria-hidden="true">#</a> 请求包含</h4><p>请求包含：合并其他的 Servlet 中的功能一起响应给客户端。特点：</p><ul><li>浏览器地址栏不变</li><li>域对象中的数据不丢失</li><li>被包含的 Servlet 响应头会丢失</li></ul><p>请求转发的注意事项：负责转发的 Servlet，转发前后的响应正文丢失，由转发目的地来响应浏览器</p><p>请求包含的注意事项：被包含者的响应消息头丢失，因为它被包含者包含起来了</p><p>HttpServletRequest 类方法：</p><ul><li><code>RequestDispatcher getRequestDispatcher(String path) </code> : 获取任务调度对象</li></ul><p>RequestDispatcher 类方法：</p><ul><li><code>void include(ServletRequest request, ServletResponse response) </code> : 实现包含。包括响应中资源的内容（servlet，JSP页面，HTML文件）。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo11&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo11</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletDemo11执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行了</span>
        <span class="token comment">//获取请求调度对象</span>
        <span class="token class-name">RequestDispatcher</span> rd <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo12&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//实现包含功能</span>
        rd<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo12&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo12</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletDemo12执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出了</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="乱码问题" tabindex="-1"><a class="header-anchor" href="#乱码问题" aria-hidden="true">#</a> 乱码问题</h3><p>请求体</p><ul><li><p>POST：<code>void setCharacterEncoding(String env)</code>：设置请求体的编码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo08&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo08</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//设置编码格式</span>
        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>GET：Tomcat8.5 版本及以后，Tomcat 服务器已经帮我们解决</p></li></ul><hr><h2 id="response" tabindex="-1"><a class="header-anchor" href="#response" aria-hidden="true">#</a> Response</h2><h3 id="响应对象" tabindex="-1"><a class="header-anchor" href="#响应对象" aria-hidden="true">#</a> 响应对象</h3><p>响应，服务器把请求的处理结果告知客户端</p><p>响应对象：在 JavaEE 工程中，用于发送响应的对象</p><ul><li>协议无关的对象标准是：ServletResponse 接口</li><li>协议相关的对象标准是：HttpServletResponse 接口</li></ul><p>Response 的作用：</p><ul><li>操作响应的三部分(行, 头, 体)</li></ul><ul><li>请求重定向</li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Response响应类视图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="操作响应行" tabindex="-1"><a class="header-anchor" href="#操作响应行" aria-hidden="true">#</a> 操作响应行</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int getStatus()</td><td>Gets the current status code of this response</td></tr><tr><td>void setStatus(int sc)</td><td>Sets the status code for this response</td></tr></tbody></table><p>状态码：（HTTP--&gt;相应部分）</p><table><thead><tr><th style="text-align:center;">状态码</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1xx</td><td style="text-align:center;">消息</td></tr><tr><td style="text-align:center;">2xx</td><td style="text-align:center;">成功</td></tr><tr><td style="text-align:center;">3xx</td><td style="text-align:center;">重定向</td></tr><tr><td style="text-align:center;">4xx</td><td style="text-align:center;">客户端错误</td></tr><tr><td style="text-align:center;">5xx</td><td style="text-align:center;">服务器错误</td></tr></tbody></table><hr><h3 id="操作响应体" tabindex="-1"><a class="header-anchor" href="#操作响应体" aria-hidden="true">#</a> 操作响应体</h3><h4 id="字节流响应" tabindex="-1"><a class="header-anchor" href="#字节流响应" aria-hidden="true">#</a> 字节流响应</h4><p>响应体对应<strong>乱码问题</strong></p><p>项目中常用的编码格式是UTF-8，而浏览器默认使用的编码是gbk。导致乱码！</p><p>解决方式：<br> 一：修改浏览器的编码格式(不推荐，不能让用户做修改的动作)<br> 二：通过输出流写出一个标签：&lt;meta http-equiv=&#39;content-type&#39;content=&#39;text/html;charset=UTF-8&#39;&gt;<br> 三：指定响应头信息：response.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset=UTF-8&quot;)<br> 四：response.setContentType(&quot;text/html;charset=UTF-8&quot;)</p><p>常用API：<br><code>ServletOutputStream getOutputStream()</code> : 获取响应字节输出流对象<br><code>void setContenType(&quot;text/html;charset=UTF-8&quot;)</code> : 设置响应内容类型，解决中文乱码问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo01&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.设置响应内容类型</span>
		resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.通过响应对象获取字节输出流对象</span>
        <span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.定义消息</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//4.通过字节流输出对象</span>
        sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="字符流响应" tabindex="-1"><a class="header-anchor" href="#字符流响应" aria-hidden="true">#</a> 字符流响应</h4><p>response得到的字符流和字节流互斥，只能选其一，response获取的流不用关闭，由服务器关闭即可。</p><p>常用API：<br><code>PrintWriter getWriter()</code> : 获取响应字节输出流对象，可以发送标签<br><code>void setContenType(&quot;text/html;charset=UTF-8&quot;)</code> : 设置响应内容类型，解决中文乱码问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//解决中文乱码</span>
    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取字符流对象</span>
    <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="响应图片" tabindex="-1"><a class="header-anchor" href="#响应图片" aria-hidden="true">#</a> 响应图片</h4><p>响应图片到浏览器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo03&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo03</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.通过文件的相对路径来获取文件的绝对路径</span>
        <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/img/hm.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//E:\\Project\\JavaEE\\out\\artifacts\\Response_war_exploded\\img\\hm.png</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.创建字节输入流对象，关联图片路径</span>
        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.通过响应对象获取字节输出流对象</span>
        <span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4.循环读写</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="操作响应头" tabindex="-1"><a class="header-anchor" href="#操作响应头" aria-hidden="true">#</a> 操作响应头</h3><h4 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h4><p>响应头: 是服务器指示浏览器去做什么</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>String getHeader(String name)</td><td>获取指定响应头的内容</td></tr><tr><td>Collection&lt;String&gt; getHeaders(String name)</td><td>获取指定响应头的多个值</td></tr><tr><td>Collection&lt;String&gt; getHeaderNames()</td><td>获取所有响应头名称的枚举</td></tr><tr><td>void setHeader(String name, String value)</td><td>设置响应头</td></tr><tr><td>void setDateHeader(String name, long date)</td><td>设置具有给定名称和日期值的响应消息头</td></tr><tr><td>void sendRedirect(String location)</td><td>设置重定向</td></tr></tbody></table><p>setHeader常用响应头：</p><ul><li>Expires：设置缓存时间</li><li>Refresh：定时跳转</li><li>Location：重定向地址</li><li>Content-Disposition: 告诉浏览器下载</li><li>Content-Type：设置响应内容的MIME类型(服务器告诉浏览器内容的类型)</li></ul><hr><h4 id="控制缓存" tabindex="-1"><a class="header-anchor" href="#控制缓存" aria-hidden="true">#</a> 控制缓存</h4><p>缓存：对于不经常变化的数据，我们可以设置合理的缓存时间，防止浏览器频繁的请求服务器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo04&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo04</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> news <span class="token operator">=</span> <span class="token string">&quot;设置缓存时间&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//设置缓存时间，缓存一小时</span>
        resp<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Expires&quot;</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置编码格式</span>
        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//写出数据</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只输出一次，不能刷新，必须从网址直接进入</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Response设置缓存时间.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="定时刷新" tabindex="-1"><a class="header-anchor" href="#定时刷新" aria-hidden="true">#</a> 定时刷新</h4><p>定时刷新：过了指定时间后，页面进行自动跳转</p><p>格式：<code>setHeader(&quot;Refresh&quot;, &quot;3;URL=https://www.baidu.com&quot;&quot;);</code><br> Refresh设置的时间单位是秒，如果刷新到其他地址，需要在时间后面拼接上地址</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo05&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo05</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> news <span class="token operator">=</span> <span class="token string">&quot;您的用户名或密码错误，3秒后自动跳转到登录页面...&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//设置编码格式</span>
        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//写出数据</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置响应消息头定时刷新</span>
        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Refresh&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3;URL=/response/login.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="下载文件" tabindex="-1"><a class="header-anchor" href="#下载文件" aria-hidden="true">#</a> 下载文件</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo06&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo06</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.创建字节输入流对象，关联读取的文件</span>
        <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/img/hm.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绝对路径</span>
        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.设置响应头支持的类型  应用支持的类型为字节流</span>
        <span class="token comment">/*
            Content-Type 消息头名称   支持的类型
            application/octet-stream   消息头参数  应用类型为字节流
         */</span>
        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.设置响应头以下载方式打开  以附件形式处理内容</span>
        <span class="token comment">/*
            Content-Disposition  消息头名称  处理的形式
            attachment;filename=  消息头参数  附件形式进行处理
         */</span>
        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;attachment;filename=&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4.获取字节输出流对象</span>
        <span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//5.循环读写文件</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//6.释放资源</span>
        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h4><h5 id="实现重定向" tabindex="-1"><a class="header-anchor" href="#实现重定向" aria-hidden="true">#</a> 实现重定向</h5><p>请求重定向：客户端的一次请求到达后，需要借助其他 Servlet 来实现功能。特点：</p><ol><li>重定向两次请求</li><li>重定向的地址栏路径改变</li><li><strong>重定向的路径写绝对路径</strong>（带域名 /ip 地址，如果是同一个项目，可以省略域名 /ip 地址）</li><li>重定向的路径可以是项目内部的,也可以是项目以外的（百度）</li><li>重定向不能重定向到 WEB-INF 下的资源</li><li>把数据存到 request 域里面，重定向不可用</li></ol><p>实现方式：</p><ul><li><p>方式一：</p><ol><li>设置响应状态码：<code>resp.setStatus(302)</code></li><li>设置重定向的路径（响应到哪里，通过响应头 location 来指定） <ul><li><code>response.setHeader(&quot;Location&quot;,&quot;http://www.baidu.com&quot;);</code></li><li><code>response.setHeader(&quot;Location&quot;,&quot;/response/servletDemo08);</code></li></ul></li></ol></li><li><p>方式二：</p><ul><li><code> resp.sendRedirect(&quot;重定向的路径&quot;);</code></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo07&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo07</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//设置请求域数据</span>
        req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//设置重定向</span>
        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/servletDemo07&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// resp.sendRedirect(&quot;https://www.baidu.com&quot;);</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo08&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo08</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletDemo08执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="重定向和转发" tabindex="-1"><a class="header-anchor" href="#重定向和转发" aria-hidden="true">#</a> 重定向和转发</h5><p>请求重定向跳转的特点：</p><ol><li>重定向是由<strong>浏览器发起</strong>的，在这个过程中浏览器会发起<strong>两次请求</strong></li><li>重定向可以跳转到任意服务器的资源，但是<strong>无法跳转到WEB-INF中的资源</strong></li><li>重定向不能和请求域对象共享数据，数据会丢失</li><li>重定向浏览器的地址栏中的地址会变成跳转到的路径</li></ol><p>请求转发跳转的特点：</p><ol><li>请求转发是由<strong>服务器发起</strong>的，在这个过程中浏览器只会发起<strong>一次请求</strong></li><li>请求转发只能跳转到本项目的资源，但是<strong>可以跳转到WEB-INF中的资源</strong></li><li>请求转发可以和请求域对象共享数据，数据不会丢失</li><li>请求转发浏览器地址栏不变</li></ol><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/重定向和请求转发对比图.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="路径问题" tabindex="-1"><a class="header-anchor" href="#路径问题" aria-hidden="true">#</a> 路径问题</h3><p><strong>完整URL地址：</strong></p><ol><li>协议：http://</li><li>服务器主机地址：127.0.0.1 or localhost</li><li>服务器端口号：8080</li><li>项目的虚拟路径(部署路径)：/response</li><li>具体的项目上资源路径 /login.html or Demo 的Servlet映射路径</li></ol><p><strong>相对路径：</strong></p><p>不以&quot;/&quot;开头的路径写法，它是以目标路径相对当前文件的路径，其中&quot;..&quot;表示上一级目录。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>hello world....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--
        目标资源的url: http://localhost:8080/response/demo05
        当前资源的url: http://localhost:8080/response/pages/demo.html
        相对路径的优劣:
            1. 优势: 无论部署的项目名怎么改变，我的路径都不需要改变
            2. 劣势: 如果当前资源的位置发生改变，那么相对路径就必定要发生改变--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../demo05<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>访问ServletDemo05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>绝对路径：</strong></p><p>绝对路径就是以&quot;/&quot;开头的路径写法，项目部署的路径</p><hr><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h2><h3 id="会话技术" tabindex="-1"><a class="header-anchor" href="#会话技术" aria-hidden="true">#</a> 会话技术</h3><p><strong>会话</strong>：浏览器和服务器之间的多次请求和响应</p><p>浏览器和服务器可能产生多次的请求和响应，从浏览器访问服务器开始，到访问服务器结束（关闭浏览器、到了过期时间），这期间产生的多次请求和响应加在一起称为浏览器和服务器之间的一次对话</p><p>作用：保存用户各自的数据（以浏览器为单位），在多次请求间实现数据共享</p><p><strong>常用的会话管理技术</strong>：</p><ul><li><p>Cookie：客户端会话管理技术，用户浏览的信息以键值对（key=value）的形式保存在浏览器上。如果没有关闭浏览器，再次访问服务器，会把 cookie 带到服务端，服务端就可以做相应的处理</p></li><li><p>Session：服务端会话管理技术。当客户端第一次请求 session 对象时，服务器为每一个浏览器开辟一块内存空间，并将通过特殊算法算出一个 session 的 ID，用来标识该 session 对象。由于内存空间是每一个浏览器独享的，所有用户在访问的时候，可以把信息保存在 session 对象中，同时服务器会把 sessionId 写到 cookie 中，再次访问的时候，浏览器会把 cookie(sessionId) 带过来，找到对应的 session 对象即可</p><p>tomcat 生成的 sessionID 叫做 jsessionID</p></li></ul><p>两者区别：</p><ul><li><p>Cookie 存储在客户端中，而 Session 存储在服务器上，相对来说 Session 安全性更高。如果要在 Cookie 中存储一些敏感信息，不要直接写入 Cookie，应该将 Cookie 信息加密然后使用到的时候再去服务器端解密</p></li><li><p>Cookie 一般用来保存用户信息，在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候就不需要重新登录，因为用户登录的时候可以存放一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可（为了安全考虑，重新登录一般要将 Token 重写），所以登录一次网站后访问网站其他页面不需要重新登录</p></li><li><p>Session 通过服务端记录用户的状态，服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户</p></li><li><p>Cookie 只能存储 ASCII 码，而 Session 可以存储任何类型的数据</p></li></ul>`,104),dn={href:"https://blog.csdn.net/weixin_43625577/article/details/92393581",target:"_blank",rel:"noopener noreferrer"},kn=e(`<hr><h3 id="基本介绍-2" tabindex="-1"><a class="header-anchor" href="#基本介绍-2" aria-hidden="true">#</a> 基本介绍</h3><p>Cookie：客户端会话管理技术，把要共享的数据保存到了客户端（也就是浏览器端）。每次请求时，把会话信息带到服务器，从而实现多次请求的数据共享。</p><p>作用：保存客户浏览器访问网站的相关内容（需要客户端不禁用 Cookie），从而在每次访问同一个内容时，先从本地缓存获取，使资源共享，提高效率。</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Cookie类讲解.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><h4 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用API</h4><ul><li><p><strong>Cookie属性：</strong></p><table><thead><tr><th>属性名称</th><th>属性作用</th><th>是否重要</th></tr></thead><tbody><tr><td>name</td><td>cookie的名称</td><td>必要属性</td></tr><tr><td>value</td><td>cookie的值（不能是中文）</td><td>必要属性</td></tr><tr><td>path</td><td>cookie的路径</td><td>重要</td></tr><tr><td>domain</td><td>cookie的域名</td><td>重要</td></tr><tr><td>maxAge</td><td>cookie的生存时间</td><td>重要</td></tr><tr><td>version</td><td>cookie的版本号</td><td>不重要</td></tr><tr><td>comment</td><td>cookie的说明</td><td>不重要</td></tr></tbody></table><p>注意：Cookie 有大小，个数限制。每个网站最多只能存20个 Cookie，且大小不能超过 4kb。同时所有网站的 Cookie 总数不超过300个。</p></li><li><p><strong>Cookie类API：</strong></p><ul><li><p><code>Cookie(String name, String value)</code> : 构造方法创建 Cookie 对象</p></li><li><p>Cookie 属性对应的 set 和 get 方法，name 属性被 final 修饰，没有 set 方法</p></li></ul></li><li><p>HttpServletResponse 类 API：</p><ul><li><code>void addCookie(Cookie cookie)</code>：向客户端添加 Cookie，Adds cookie to the response</li></ul></li><li><p>HttpServletRequest类API：</p><ul><li><code>Cookie[] getCookies()</code>：获取所有的 Cookie 对象，client sent with this request</li></ul></li></ul><hr><h4 id="有效期" tabindex="-1"><a class="header-anchor" href="#有效期" aria-hidden="true">#</a> 有效期</h4><p>如果不设置过期时间，表示这个 Cookie 生命周期为浏览器会话期间，只要关闭浏览器窗口 Cookie 就消失，这种生命期为浏览会话期的 Cookie 被称为会话 Cookie，会话 Cookie 一般不保存在硬盘上而是保存在内存里。</p><p>如果设置过期时间，浏览器就会把 Cookie 保存到硬盘上，关闭后再次打开浏览器，这些 Cookie 依然有效直到超过设定的过期时间。存储在硬盘上的 Cookie 可以在<strong>不同的浏览器进程间共享</strong>，比如两个 IE 窗口，而对于保存在内存的 Cookie，不同的浏览器有不同的处理方式</p><p>设置 Cookie 存活时间 API：<code>void setMaxAge(int expiry)</code></p><ul><li>-1：默认，代表 Cookie 数据存到浏览器关闭（保存在浏览器文件中）</li><li>0：代表删除 Cookie，如果要删除 Cookie 要确保<strong>路径一致</strong></li><li>正整数：以秒为单位保存数据有有效时间（把缓存数据保存到磁盘中）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo01&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.通过响应对象写出提示信息</span>
        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎访问本网站，您的最后访问时间为：&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2.创建Cookie对象，用于记录最后访问时间</span>
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//3.设置最大存活时间</span>
        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//cookie.setMaxAge(0);    // 立即清除</span>

        <span class="token comment">//4.将cookie对象添加到客户端</span>
        resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//5.获取cookie</span>
        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> c <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//6.获取cookie对象中的value，进行写出</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="有效路径" tabindex="-1"><a class="header-anchor" href="#有效路径" aria-hidden="true">#</a> 有效路径</h4><p><code>setPath(String url)</code> : Cookie 设置有效路径</p><p>有效路径作用 :</p><ol><li>保证不会携带别的网站/项目里面的 Cookie 到我们自己的项目</li><li>路径不一样，Cookie 的 key 可以相同</li><li>保证自己的项目可以合理的利用自己项目的 Cookie</li></ol><p>判断路径是否携带 Cookie：请求资源 URI.startWith(cookie的path)，返回 true 就带</p>`,22),vn=n("thead",null,[n("tr",null,[n("th",null,"访问URL"),n("th",null,"URI部分"),n("th",null,"Cookie的Path"),n("th",null,"是否携带Cookie"),n("th",null,"能否取到Cookie")])],-1),mn={href:"http://localhost:8080/servlet/servletDemo02",target:"_blank",rel:"noopener noreferrer"},gn=n("td",null,"/servlet/servletDemo02",-1),bn=n("td",null,"/servlet/",-1),hn=n("td",null,"带",-1),Sn=n("td",null,"能取到",-1),qn={href:"http://localhost:8080/servlet/servletDemo03",target:"_blank",rel:"noopener noreferrer"},fn=n("td",null,"/servlet/servletDemo03",-1),xn=n("td",null,"/servlet/",-1),yn=n("td",null,"带",-1),wn=n("td",null,"能取到",-1),Cn={href:"http://localhost:8080/servlet/aaa/servletDemo03",target:"_blank",rel:"noopener noreferrer"},En=n("td",null,"/servlet/aaa/servletDemo04",-1),jn=n("td",null,"/servlet/",-1),Rn=n("td",null,"带",-1),Hn=n("td",null,"能取到",-1),Pn={href:"http://localhost:8080/bbb/servletDemo03",target:"_blank",rel:"noopener noreferrer"},Dn=n("td",null,"/bbb/servletDemo04",-1),_n=n("td",null,"/servlet/",-1),In=n("td",null,"不带",-1),Tn=n("td",null,"不能取到",-1),On=e(`<p>只有当访问资源的 url 包含此 cookie 的有效 path 的时候，才会携带这个 cookie</p><p>想要当前项目下的 Servlet 可以使用该 cookie，一般设置：<code>cookie.setPath(request.getContextPath())</code></p><hr><h4 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性" aria-hidden="true">#</a> 安全性</h4><p>如果 Cookie 中设置了 HttpOnly 属性，通过 js 脚本将无法读取到 cookie 信息，这样能有效的防止 XSS 攻击，窃取 cookie 内容，这样就增加了安全性，即便是这样，也不要将重要信息存入cookie。</p><p>XSS 全称 Cross SiteScript，跨站脚本攻击，是Web程序中常见的漏洞，XSS 属于被动式且用于客户端的攻击方式，所以容易被忽略其危害性。其原理是攻击者向有 XSS 漏洞的网站中输入(传入)恶意的 HTML 代码，当其它用户浏览该网站时，这段HTML代码会自动执行，从而达到攻击的目的。如盗取用户 Cookie、破坏页面结构、重定向到其它网站等。</p><hr><h2 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> Session</h2><h3 id="基本介绍-3" tabindex="-1"><a class="header-anchor" href="#基本介绍-3" aria-hidden="true">#</a> 基本介绍</h3><p>Session：服务器端会话管理技术，本质也是采用客户端会话管理技术，不过在客户端保存的是一个特殊标识，共享的数据保存到了服务器的内存对象中。每次请求时，会将特殊标识带到服务器端，根据标识来找到对应的内存空间，从而实现数据共享。简单说它就是一个服务端会话对象，用于存储用户的会话数据</p><p>Session 域（会话域）对象是 Servlet 规范中四大域对象之一，并且它也是用于实现数据共享的</p><table><thead><tr><th>域对象</th><th>功能</th><th>创建</th><th>销毁</th><th>使用场景</th></tr></thead><tbody><tr><td>ServletContext</td><td>应用域</td><td>服务器启动</td><td>服务器关闭</td><td>在整个应用之间实现数据共享<br>（记录网站访问次数，聊天室）</td></tr><tr><td>ServletRequest</td><td>请求域</td><td>请求到来</td><td>响应了这个请求</td><td>在当前请求或者请求转发之间实现数据共享</td></tr><tr><td>HttpSession</td><td>会话域</td><td>getSession()</td><td>session过期，调用invalidate()，服务器关闭</td><td>在当前会话范围中实现数据共享，可以在多次请求中实现数据共享。<br>（验证码校验, 保存用户登录状态等）</td></tr></tbody></table><hr><h3 id="基本使用-1" tabindex="-1"><a class="header-anchor" href="#基本使用-1" aria-hidden="true">#</a> 基本使用</h3><h4 id="获取会话" tabindex="-1"><a class="header-anchor" href="#获取会话" aria-hidden="true">#</a> 获取会话</h4><p>HttpServletRequest类获取Session：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>HttpSession getSession()</td><td>获取HttpSession对象</td></tr><tr><td>HttpSession getSession(boolean creat)</td><td>获取HttpSession对象，未获取到是否自动创建</td></tr></tbody></table><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Session获取的两个方法.png" style="zoom:80%;"><hr><h4 id="常用api-1" tabindex="-1"><a class="header-anchor" href="#常用api-1" aria-hidden="true">#</a> 常用API</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void setAttribute(String name, Object value)</td><td>设置会话域中的数据</td></tr><tr><td>Object getAttribute(String name)</td><td>获取指定名称的会话域数据</td></tr><tr><td>Enumeration&lt;String&gt; getAttributeNames()</td><td>获取所有会话域所有属性的名称</td></tr><tr><td>void removeAttribute(String name)</td><td>移除会话域中指定名称的数据</td></tr><tr><td>String getId()</td><td>获取唯一标识名称，Jsessionid的值</td></tr><tr><td>void invalidate()</td><td>立即失效session</td></tr></tbody></table><hr><h4 id="实现会话" tabindex="-1"><a class="header-anchor" href="#实现会话" aria-hidden="true">#</a> 实现会话</h4><p>通过第一个Servlet设置共享的数据用户名，并在第二个Servlet获取到</p><p>项目执行完以后，去浏览器抓包，Request Headers 中的 Cookie JSESSIONID的值是一样的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo01&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.获取请求的用户名</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.获取HttpSession的对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.将用户名信息添加到共享数据中</span>
        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo02&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo02</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.获取HttpSession对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.获取共享数据</span>
        <span class="token class-name">Object</span> username <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.将数据响应给浏览器</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="生命周期-1" tabindex="-1"><a class="header-anchor" href="#生命周期-1" aria-hidden="true">#</a> 生命周期</h4><p>Session 的创建：一个常见的错误是以为 Session 在有客户端访问时就被创建，事实是直到某 server 端程序（如 Servlet）调用 <code>HttpServletRequest.getSession(true)</code> 这样的语句时才会被创建</p><p>Session 在以下情况会被删除：</p><ul><li>程序调用 HttpSession.invalidate()</li><li>距离上一次收到客户端发送的 session id 时间间隔超过了 session 的最大有效时间</li><li>服务器进程被停止</li></ul><p>注意事项：</p><ul><li>客户端只保存 sessionID 到 cookie 中，而不会保存 session</li><li>关闭浏览器只会使存储在客户端浏览器内存中的 cookie 失效，不会使服务器端的 session 对象失效，同样也不会使已经保存到硬盘上的持久化cookie消失</li></ul><p>打开两个浏览器窗口访问应用程序会使用的是不同的session，通常 session cookie 是不能跨窗口使用，当新开了一个浏览器窗口进入相同页面时，系统会赋予一个新的 session id，实现跨窗口信息共享：</p><ul><li>先把 session id 保存在 persistent cookie 中（通过设置session的最大有效时间）</li><li>在新窗口中读出来，就可以得到上一个窗口的 session id，这样通过 session cookie 和 persistent cookie 的结合就可以实现跨窗口的会话跟踪</li></ul><hr><h3 id="会话问题" tabindex="-1"><a class="header-anchor" href="#会话问题" aria-hidden="true">#</a> 会话问题</h3><h4 id="禁用cookie" tabindex="-1"><a class="header-anchor" href="#禁用cookie" aria-hidden="true">#</a> 禁用Cookie</h4><p>浏览器禁用Cookie解决办法：</p><ul><li><p>方式一：通过提示信息告知用户</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo03&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo03</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.获取HttpSession对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>session <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;为了不影响正常的使用，请不要禁用浏览器的Cookie~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方式二：访问时拼接 jsessionid 标识，通过 encodeURL() 方法<strong>重写地址</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//实现url重写  相当于在地址栏后面拼接了一个jsessionid</span>
    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;a href=&#39;&quot;</span><span class="token operator">+</span> resp<span class="token punctuation">.</span>encodeURL
                           <span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/session/servletDemo03&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                           <span class="token string">&quot;&#39;&gt;go servletDemo03&lt;/a&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="钝化活化" tabindex="-1"><a class="header-anchor" href="#钝化活化" aria-hidden="true">#</a> 钝化活化</h4><p>Session 存放在服务器端的内存中，可以做持久化管理。</p><p>钝化：序列化，持久态。把长时间不用，但还不到过期时间的 HttpSession 进行序列化写到磁盘上。</p><p>活化：相反的状态</p><p>何时钝化：</p><ul><li>当访问量很大时，服务器会根据getLastAccessTime来进行排序，对长时间不用，但是还没到过期时间的HttpSession进行序列化（持久化）</li><li>当服务器进行重启的时候，为了保持客户HttpSession中的数据，也要对HttpSession进行序列化（持久化）</li></ul><p>注意：</p><ul><li>HttpSession的持久化由服务器来负责管理，我们不用关心</li><li>只有实现了序列化接口的类才能被序列化</li></ul><hr><h2 id="jsp" tabindex="-1"><a class="header-anchor" href="#jsp" aria-hidden="true">#</a> JSP</h2><h3 id="jsp概述" tabindex="-1"><a class="header-anchor" href="#jsp概述" aria-hidden="true">#</a> JSP概述</h3><p>JSP(Java Server Page)：是一种动态网页技术标准。（页面技术）</p><p>JSP是基于Java语言的，它的本质就是Servlet，一个特殊的Servlet。</p><p>JSP部署在服务器上，可以处理客户端发送的请求，并根据请求内容动态的生成HTML、XML或其他格式文档的Web网页，然后响应给客户端。</p><table><thead><tr><th>类别</th><th>适用场景</th></tr></thead><tbody><tr><td>HTML</td><td>开发静态资源，不能包含java代码，无法添加动态数据。</td></tr><tr><td>CSS</td><td>美化页面</td></tr><tr><td>JavaScript</td><td>给网页添加动态效果</td></tr><tr><td>Servlet</td><td>编写java代码，实现后台功能处理，但是很不方便，开发效率低。</td></tr><tr><td>JSP</td><td>包括了显示页面技术，同时具备Servlet输出动态资源的能力。但是不适合作为控制器来用。</td></tr></tbody></table><h3 id="执行原理-1" tabindex="-1"><a class="header-anchor" href="#执行原理-1" aria-hidden="true">#</a> 执行原理</h3><ul><li><p>新建JavaEE工程，编写index.jsp文件</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JSP的入门&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
      这是第一个JSP页面
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行过程：</p><p>客户端提交请求——Tomcat服务器解析请求地址——找到JSP页面——Tomcat将JSP页面翻译成Servlet的java文件——将翻译好的.java文件编译成.class文件——返回到客户浏览器上</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/JSP执行过程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>溯源，打开JSP翻译后的Java文件</p><p><code>public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase</code>，<code>public abstract class HttpJspBase extends HttpServlet implements HttpJspPage</code>，HttpJspBase是个抽象类继承HttpServlet，所以JSP本质上继承HttpServlet</p><p>在文件中找到了输出页面的代码，本质都是用out.write()输出的JSP语句</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/Jsp的本质说明.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>总结：<br> JSP它是一个特殊的Servlet，主要是用于展示动态数据。它展示的方式是用流把数据输出出来，而我们在使用JSP时，涉及HTML的部分，都与HTML的用法一致，这部分称为jsp中的模板元素，决定了页面的外观。</p></li></ul><hr><h3 id="jsp语法" tabindex="-1"><a class="header-anchor" href="#jsp语法" aria-hidden="true">#</a> JSP语法</h3><ul><li><p>JSP注释：</p><table><thead><tr><th>注释类型</th><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>JSP注释</td><td>&lt;%--注释内容--%&gt;</td><td>被jsp注释的部分不会被翻译成.java文件，不会在浏览器上显示</td></tr><tr><td>HTML注释</td><td><!--HTML注释--></td><td>在Jsp中可以使用html的注释，但是只能注释html元素<br>被html注释部分会参与翻译，并且会在浏览器上显示</td></tr><tr><td>Java注释</td><td>//; /* */</td><td></td></tr></tbody></table></li><li><p>Java代码块</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;% 此处写java代码 %&gt;
&lt;%--由tomcat负责翻译，翻译之后是service方法的成员变量--%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JSP表达式</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%=表达式%&gt;
&lt;%--翻译成Service()方法里面的内容,相当于调用out.print()--%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JSP声明</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;%! 声明的变量或方法 %&gt;
&lt;%--翻译成Servlet类里面的内容--%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>语法示例：</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;jsp语法&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%--1. 这是注释--%&gt;

    &lt;%--
        2.java代码块
        System.out.println(&quot;Hello JSP&quot;); 普通输出语句，输出在控制台!!
        out.println(&quot;Hello JSP&quot;);out是JspWriter对象，输出在页面上
    --%&gt;
    &lt;%
        System.out.println(&quot;Hello JSP&quot;);
        out.println(&quot;Hello JSP&lt;br&gt;&quot;);
        String str = &quot;hello&lt;br&gt;&quot;;
        out.println(str);
    %&gt;

    &lt;%--
        3.jsp表达式,相当于 out.println(&quot;Hello&quot;);
    --%&gt;
    &lt;%=&quot;Hello&lt;br&gt;&quot;%&gt;

    &lt;%--
        4.jsp中的声明(变量或方法)
        如果加!  代表的是声明的是成员变量
        如果不加!  代表的是声明的是局部变量,页面显示abc
    --%&gt;
    &lt;%! String s = &quot;abc&quot;;%&gt;
    &lt;% String s = &quot;def&quot;;%&gt;
    &lt;%=s%&gt;
    
    &lt;%! public void getSum(){}%&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>控制台输出：Hello JSP
页面输出：
	Hello JSP
	hello
	Hello
	def
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="jsp指令" tabindex="-1"><a class="header-anchor" href="#jsp指令" aria-hidden="true">#</a> JSP指令</h3><ul><li><p><strong>page指令：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>&lt;%@ page  属性名=属性值 属性名=属性值... %&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>contentType</td><td>设置响应正文支持的MIME类型和编码格式：contentType=&quot;text/html;charset=UTF-8&quot;</td></tr><tr><td>language</td><td>告知引擎，脚本使用的语言，默认为Java</td></tr><tr><td>errorPage</td><td>当前页面出现异常后跳转的页面</td></tr><tr><td>isErrorPage</td><td>是否抓住异常。值为true页面中就能使用exception对象，打印异常信息。默认值false</td></tr><tr><td>import</td><td>导入哪些包（类）&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;</td></tr><tr><td>session</td><td>是否创建HttpSession对象，默认是true</td></tr><tr><td>buffer</td><td>设定JspWriter用s输出jsp内容的缓存大小。默认8kb</td></tr><tr><td>pageEncoding</td><td>翻译jsp时所用的编码格式，pageEncoding=&quot;UTF-8&quot;相当于用UTF-8读取JSP</td></tr><tr><td>isELIgnored</td><td>是否忽略EL表达式，默认值是false</td></tr></tbody></table><p>Note：当使用全局错误页面，就无须配置errorPage实现跳转错误页面，而是由服务器负责跳转到错误页面</p><ul><li><p>配置全局错误页面：web.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">&gt;</span></span>java.lang.Exception<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception-type</span><span class="token punctuation">&gt;</span></span>    			
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">&gt;</span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/404.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>**include指令：**包含其他页面</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>&lt;%@include file=&quot;被包含的页面&quot; %&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>属性：file，以/开头，就代表当前应用</p></li><li><p>**taglib指令：**引入外部标签库</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>&lt;%taglib uri=&quot;标签库的地址&quot; prefix=&quot;前缀名称&quot;%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>html标签和jsp标签不用引入</p></li></ul><hr><h3 id="隐式对象" tabindex="-1"><a class="header-anchor" href="#隐式对象" aria-hidden="true">#</a> 隐式对象</h3><h4 id="九大隐式对象" tabindex="-1"><a class="header-anchor" href="#九大隐式对象" aria-hidden="true">#</a> 九大隐式对象</h4><p>隐式对象：在jsp中可以不声明就直接使用的对象。它只存在于jsp中，因为java类中的变量必须要先声明再使用。<br> jsp中的隐式对象也并不是未声明，它是在翻译成.java文件时声明的，所以我们在jsp中可以直接使用。</p><table><thead><tr><th>隐式对象名称</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>request</td><td>javax.servlet.http.HttpServletRequest</td><td></td></tr><tr><td>response</td><td>javax.servlet.http.HttpServletResponse</td><td></td></tr><tr><td>session</td><td>javax.servlet.http.HttpSession</td><td>Page指令可以控制开关</td></tr><tr><td>application</td><td>javax.servlet.ServletContext</td><td></td></tr><tr><td>page</td><td>Java.lang.Object</td><td>当前jsp对应的servlet引用实例</td></tr><tr><td>config</td><td>javax.servlet.ServletConfig</td><td></td></tr><tr><td>exception</td><td>java.lang.Throwable</td><td>page指令有开关</td></tr><tr><td>out</td><td>javax.servlet.jsp.JspWriter</td><td>字符输出流，相当于printwriter</td></tr><tr><td>pageContext</td><td>javax.servlet.jsp.PageContext</td><td>很重要，页面域</td></tr></tbody></table><h4 id="pagecontext" tabindex="-1"><a class="header-anchor" href="#pagecontext" aria-hidden="true">#</a> PageContext</h4><ul><li><p>PageContext对象特点：</p><ul><li>PageContextd对象是JSP独有的对象，Servlet中没有</li><li>PageContextd对象是一个<strong>页面域（作用范围）对象</strong>，还可以操作其他三个域对象中的属性</li><li>PageContextd对象<strong>可以获取其他八个隐式对象</strong></li><li>PageContextd对象是一个局部变量，它的生命周期随着JSP的创建而诞生，随着JSP的结束而消失。每个JSP页面都有一个独立的PageContext</li></ul></li><li><p>PageContext方法如下，页面域操作的方法定义在了PageContext的父类JspContext中</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/PageContext方法详解.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><hr><h3 id="四大域对象" tabindex="-1"><a class="header-anchor" href="#四大域对象" aria-hidden="true">#</a> 四大域对象</h3><table><thead><tr><th>域对象名称</th><th>范围</th><th>级别</th><th>备注</th></tr></thead><tbody><tr><td>PageContext</td><td>页面范围</td><td>最小，只能在当前页面用</td><td>因范围太小，开发中用的很少</td></tr><tr><td>ServletRequest</td><td>请求范围</td><td>一次请求或当期请求转发用</td><td>当请求转发之后，再次转发时请求域丢失</td></tr><tr><td>HttpSession</td><td>会话范围</td><td>多次请求数据共享时使用</td><td>多次请求共享数据，但不同的客户端不能共享</td></tr><tr><td>ServletContext</td><td>应用范围</td><td>最大，整个应用都可以使用</td><td>尽量少用，如果对数据有修改需要做同步处理</td></tr></tbody></table><hr><h3 id="mvc模型" tabindex="-1"><a class="header-anchor" href="#mvc模型" aria-hidden="true">#</a> MVC模型</h3><p>M : model， 通常用于封装数据，封装的是数据模型<br> V : view，通常用于展示数据。动态展示用jsp页面，静态数据展示用html<br> C : controller，通常用于处理请求和响应，一般指的是Servlet</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/MVC模型.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="el" tabindex="-1"><a class="header-anchor" href="#el" aria-hidden="true">#</a> EL</h2><h3 id="el概述" tabindex="-1"><a class="header-anchor" href="#el概述" aria-hidden="true">#</a> EL概述</h3><p>EL表达式：Expression Language，意为表达式语言。它是Servlet规范中的一部分，是JSP2.0规范加入的内容。</p><p>EL表达式作用：在JSP页面中获取数据，让JSP脱离java代码块和JSP表达式</p><p>EL表达式格式： <code>\${表达式内容}</code></p><p>EL表达式特点：</p><ul><li>有明确的<strong>返回值</strong></li><li>把内容输出到<strong>页面</strong>上</li><li><strong>只能在四大域对象中获取数据</strong>，不在四大域对象中的数据取不到。</li></ul><hr><h3 id="el用法" tabindex="-1"><a class="header-anchor" href="#el用法" aria-hidden="true">#</a> EL用法</h3><h4 id="多种类型" tabindex="-1"><a class="header-anchor" href="#多种类型" aria-hidden="true">#</a> 多种类型</h4><p>EL表达式可以获取不同类型数据，前提是数据放入四大域对象。</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page import=&quot;bean.Student&quot; %&gt;
&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;
&lt;%@ page import=&quot;java.util.HashMap&quot; %&gt;
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;EL表达式获取不同类型数据&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%--1.获取基本数据类型--%&gt;
    &lt;% pageContext.setAttribute(&quot;num&quot;,10); %&gt;
    基本数据类型：\${num} &lt;br&gt;

    &lt;%--2.获取自定义对象类型--%&gt;
    &lt;%
        Student stu = new Student(&quot;张三&quot;,23);
        pageContext.setAttribute(&quot;stu&quot;,stu);
    %&gt;
    自定义对象：\${stu} &lt;br&gt;
    &lt;%--stu.name 实现原理 getName()--%&gt;
    学生姓名：\${stu.name} &lt;br&gt;
    学生年龄：\${stu.age} &lt;br&gt;

    &lt;%--3.获取数组类型--%&gt;
    &lt;%
        String[] arr = {&quot;hello&quot;,&quot;world&quot;};
        pageContext.setAttribute(&quot;arr&quot;,arr);
    %&gt;
    数组：\${arr}  &lt;br&gt;
    0索引元素：\${arr[0]} &lt;br&gt;
    1索引元素：\${arr[1]} &lt;br&gt;

    &lt;%--4.获取List集合--%&gt;
    &lt;%
        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();
        list.add(&quot;aaa&quot;);
        list.add(&quot;bbb&quot;);
        pageContext.setAttribute(&quot;list&quot;,list);
    %&gt;
    List集合：\${list} &lt;br&gt;
    0索引元素：\${list[0]} &lt;br&gt;

    &lt;%--5.获取Map集合--%&gt;
    &lt;%
        HashMap&lt;String,Student&gt; map = new HashMap&lt;&gt;();
        map.put(&quot;hm01&quot;,new Student(&quot;张三&quot;,23));
        map.put(&quot;hm02&quot;,new Student(&quot;李四&quot;,24));
        pageContext.setAttribute(&quot;map&quot;,map);
    %&gt;
    Map集合：\${map}  &lt;br&gt;
    第一个学生对象：\${map.hm01}  &lt;br&gt;
    第一个学生对象的姓名：\${map.hm01.name}
&lt;/body&gt;
&lt;/html&gt;

&lt;--页面输出效果
基本数据类型：10
自定义对象：bean.Student@5f8da92c   (地址)
学生姓名：张三
学生年龄：23
数组：[Ljava.lang.String;@4b3bd520
0索引元素：hello
1索引元素：world
List集合：[aaa, bbb]
0索引元素：aaa
Map集合：{hm01=bean.Student@4768d250, hm02=bean.Student@67f237d9}
第一个学生对象：bean.Student@4768d250
第一个学生对象的姓名：张三
--&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="异常问题" tabindex="-1"><a class="header-anchor" href="#异常问题" aria-hidden="true">#</a> 异常问题</h4><p>EL表达式的注意事项：</p><ol><li>EL表达式没有空指针异常</li><li>EL表达式没有数组下标越界</li><li>EL表达式没有字符串拼接</li></ol><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;EL表达式的注意事项&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    第一个：没有空指针异常&lt;br/&gt;
    &lt;% String str = null;
        request.setAttribute(&quot;testNull&quot;,str);
    %&gt;
    str：\${testNull}
    &lt;hr/&gt;
    第二个：没有数组下标越界&lt;br/&gt;
    &lt;% String[] strs = new String[]{&quot;a&quot;,&quot;b&quot;,&quot;c&quot;};
        request.setAttribute(&quot;strs&quot;,strs);
    %&gt;
    取第一个元素：\${strs[0]}&lt;br/&gt;
    取第六个元素：\${strs[5]}&lt;br/&gt;
    &lt;hr/&gt;
    第三个：没有字符串拼接&lt;br/&gt;
    &lt;%--\${strs[0]+strs[1]}--%&gt;
    拼接：\${strs[0]}+\${strs[1]} &lt;%--注意拼接--%&gt;
  &lt;/body&gt;
&lt;/html&gt;

&lt;--页面输出效果
第一个：没有空指针异常
str：
第二个：没有数组下标越界
取第一个元素：a
取第六个元素：
第三个：没有字符串拼接
拼接：a+b
--&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h4><p>EL表达式中运算符：</p><ul><li><p>关系运算符：<img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/EL表达式关系运算符.png" alt="" loading="lazy"></p></li><li><p>逻辑运算符：</p><table><thead><tr><th>逻辑运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp; 或 and</td><td>交集</td></tr><tr><td>|| 或 or</td><td>并集</td></tr><tr><td>! 或 not</td><td>非</td></tr></tbody></table><p>​</p></li><li><p>其他运算符</p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>empty</td><td>1. 判断对象是否为null<br>2. 判断字符串是否为空字符串<br>3. 判断容器元素是否为0</td></tr><tr><td>条件 ? 表达式1 : 表达式2</td><td>三元运算符，条件?真:假</td></tr></tbody></table></li></ul><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;EL表达式运算符&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%--empty--%&gt;
    &lt;%
        String str1 = null;
        String str2 = &quot;&quot;;
        int[] arr = {};
    %&gt;
    \${empty str1} &lt;br&gt;
    \${empty str2} &lt;br&gt;
    \${empty arr} &lt;br&gt;

    &lt;%--三元运算符。获取性别的数据，在对应的按钮上进行勾选--%&gt;
    &lt;% pageContext.setAttribute(&quot;gender&quot;,&quot;women&quot;); %&gt;
    &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;men&quot; \${gender==&quot;men&quot;?&quot;checked&quot;:&quot;&quot;}&gt;男
    &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;women&quot; \${gender==&quot;women&quot;?&quot;checked&quot;:&quot;&quot;}&gt;女
&lt;/body&gt;
&lt;/html&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/EL表达式运算符效果图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h4 id="四大域数据" tabindex="-1"><a class="header-anchor" href="#四大域数据" aria-hidden="true">#</a> 四大域数据</h4><p>EL表达式只能从从四大域中获取数据，调用的就是<code>findAttribute(name,value);</code>方法，根据名称由小到大在域对象中查找，找到就返回，找不到就什么都不显示。</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;EL表达式使用细节&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%--获取四大域对象中的数据--%&gt;
    &lt;%
        //pageContext.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;);
        request.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;);
        //session.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;);
        //application.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;);
    %&gt;
    \${username} &lt;br&gt;

    &lt;%--获取JSP中其他八个隐式对象  获取虚拟目录名称--%&gt;
    &lt;%= request.getContextPath()%&gt;
    \${pageContext.request.contextPath}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="el隐式对象" tabindex="-1"><a class="header-anchor" href="#el隐式对象" aria-hidden="true">#</a> EL隐式对象</h3><h4 id="el表达式隐式对象" tabindex="-1"><a class="header-anchor" href="#el表达式隐式对象" aria-hidden="true">#</a> EL表达式隐式对象</h4><p>EL表达式也为我们提供隐式对象，可以让我们不声明直接来使用，需要注意的是，它和JSP的隐式对象不是同一种事物。</p><table><thead><tr><th>EL中的隐式对象</th><th>类型</th><th>对应JSP隐式对象</th><th>备注</th></tr></thead><tbody><tr><td>PageContext</td><td>Javax.serlvet.jsp.PageContext</td><td>PageContext</td><td>完全一样</td></tr><tr><td>ApplicationScope</td><td>Java.util.Map</td><td>没有</td><td>应用层范围</td></tr><tr><td>SessionScope</td><td>Java.util.Map</td><td>没有</td><td>会话范围</td></tr><tr><td>RequestScope</td><td>Java.util.Map</td><td>没有</td><td>请求范围</td></tr><tr><td>PageScope</td><td>Java.util.Map</td><td>没有</td><td>页面层范围</td></tr><tr><td>Header</td><td>Java.util.Map</td><td>没有</td><td>请求消息头key，值是value（一个）</td></tr><tr><td>HeaderValues</td><td>Java.util.Map</td><td>没有</td><td>请求消息头key，值是数组（一个头多个值）</td></tr><tr><td>Param</td><td>Java.util.Map</td><td>没有</td><td>请求参数key，值是value（一个）</td></tr><tr><td>ParamValues</td><td>Java.util.Map</td><td>没有</td><td>请求参数key，值是数组（一个名称多个值）</td></tr><tr><td>InitParam</td><td>Java.util.Map</td><td>没有</td><td>全局参数，key是参数名称，value是参数值</td></tr><tr><td>Cookie</td><td>Java.util.Map</td><td>没有</td><td>Key是cookie的名称，value是cookie对象</td></tr></tbody></table><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;EL表达式11个隐式对象&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%--pageContext对象 可以获取其他三个域对象和JSP中八个隐式对象--%&gt;
    \${pageContext.request.contextPath} &lt;br&gt;

    &lt;%--applicationScope sessionScope requestScope pageScope 操作四大域对象中的数据--%&gt;
    &lt;% request.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;); %&gt;
    \${username} &lt;br&gt;
    \${requestScope.username} &lt;br&gt;

    &lt;%--header headerValues  获取请求头数据--%&gt;
    \${header[&quot;connection&quot;]} &lt;br&gt;
    \${headerValues[&quot;connection&quot;][0]} &lt;br&gt;

    &lt;%--param paramValues 获取请求参数数据--%&gt;
    \${param.username} &lt;br&gt;
    \${paramValues.hobby[0]} &lt;br&gt;
    \${paramValues.hobby[1]} &lt;br&gt;

    &lt;%--initParam 获取全局配置参数--%&gt;
    \${initParam[&quot;pname&quot;]}  &lt;br&gt;

    &lt;%--cookie 获取cookie信息--%&gt;
    \${cookie}  &lt;br&gt; &lt;%--获取Map集合--%&gt;
    \${cookie.JSESSIONID}  &lt;br&gt; &lt;%--获取map集合中第二个元素--%&gt;
    \${cookie.JSESSIONID.name}  &lt;br&gt; &lt;%--获取cookie对象的名称--%&gt;
    \${cookie.JSESSIONID.value} &lt;%--获取cookie对象的值--%&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;--页面显示
/el
zhangsan
zhangsan
keep-alive
keep-alive

bbb
{JSESSIONID=javax.servlet.http.Cookie@435c8431, Idea-5a5d203e=javax.servlet.http.Cookie@46be0b58, Idea-be3279e7=javax.servlet.http.Cookie@4ef6e8e8}
javax.servlet.http.Cookie@435c8431
JSESSIONID
E481B2A845A448AD88A71FD43611FF02    
--&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在web.xml配置全局参数</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">******</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--配置全局参数--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>pname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="获取jsp隐式对象" tabindex="-1"><a class="header-anchor" href="#获取jsp隐式对象" aria-hidden="true">#</a> 获取JSP隐式对象</h4><p>通过获取页面域对象，获取其他JSP八个隐式对象</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;EL表达式使用细节&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%--获取虚拟目录名称--%&gt;
    &lt;%= request.getContextPath()%&gt;
    \${pageContext.request.contextPath}
&lt;/body&gt;
&lt;/html&gt;
&lt;--页面显示
/el /el
--&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="jstl" tabindex="-1"><a class="header-anchor" href="#jstl" aria-hidden="true">#</a> JSTL</h3><p>JSTL：Java Server Pages Standarded Tag Library，JSP中标准标签库。</p><p>作用：提供给开发人员一个标准的标签库，开发人员可以利用这些标签取代JSP页面上的Java代码，从而提高程序的可读性，降低程序的维护难度。</p><table><thead><tr><th>组成</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>Core</td><td>核心标签库</td><td>通用逻辑处理</td></tr><tr><td>Fmt</td><td>国际化有关</td><td>需要不同地域显示不同语言时使用</td></tr><tr><td>Functions</td><td>EL函数</td><td>EL表达式可以使用的方法</td></tr><tr><td>SQL</td><td>操作数据库</td><td></td></tr><tr><td>XML</td><td>操作XML</td><td></td></tr></tbody></table><p>使用：添加jar包，通过taglib导入，prefix属性表示程序调用标签使用的引用名</p><table><thead><tr><th>标签名称</th><th>功能分类</th><th>分类</th><th>作用</th></tr></thead><tbody><tr><td>\`&lt;c:if test=&quot;\${A==B</td><td></td><td>C==D}&quot;&gt;\`</td><td>流程控制</td></tr><tr><td><code>&lt;c:choose&gt; ,&lt;c:when&gt;,&lt;c:otherwise&gt;</code></td><td>流程控制</td><td>核心标签库</td><td>用于多个条件判断</td></tr><tr><td><code>&lt;c:foreache&gt;</code></td><td>迭代操作</td><td>核心标签库</td><td>用于循环遍历</td></tr></tbody></table><ul><li><p>流程控制</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;流程控制&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%--向域对象中添加成绩数据--%&gt;
    \${pageContext.setAttribute(&quot;score&quot;,&quot;T&quot;)}

    &lt;%--对成绩进行判断--%&gt;
    &lt;c:if test=&quot;\${score eq &#39;A&#39;}&quot;&gt;
        优秀
    &lt;/c:if&gt;

    &lt;%--对成绩进行多条件判断--%&gt;
    &lt;c:choose&gt;
        &lt;c:when test=&quot;\${score eq &#39;A&#39;}&quot;&gt;优秀&lt;/c:when&gt;
        &lt;c:when test=&quot;\${score eq &#39;B&#39;}&quot;&gt;良好&lt;/c:when&gt;
        &lt;c:when test=&quot;\${score eq &#39;C&#39;}&quot;&gt;及格&lt;/c:when&gt;
        &lt;c:when test=&quot;\${score eq &#39;D&#39;}&quot;&gt;较差&lt;/c:when&gt;
        &lt;c:otherwise&gt;成绩非法&lt;/c:otherwise&gt;
    &lt;/c:choose&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>迭代操作<br> c:forEach：用来遍历集合，属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>items</td><td>指定要遍历的集合，它可以是用EL表达式取出来的元素</td></tr><tr><td>var</td><td>把当前遍历的元素放入指定的page域中。var的值是key，遍历的元素是value<br>注意：var不支持EL表达式，只能是字符串常量</td></tr><tr><td>begin</td><td>开始遍历的索引</td></tr><tr><td>end</td><td>结束遍历的索引</td></tr><tr><td>step</td><td>步长，i+=step</td></tr><tr><td>varStatus</td><td>它是一个计数器对象，有两个属性，一个是用于记录索引，一个是用于计数。索引是从0开始，计数是从1开始</td></tr></tbody></table><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;循环&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;%--向域对象中添加集合--%&gt;
    &lt;%
        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();
        list.add(&quot;aa&quot;);
        list.add(&quot;bb&quot;);
        list.add(&quot;cc&quot;);
        list.add(&quot;dd&quot;);
        pageContext.setAttribute(&quot;list&quot;,list);
    %&gt;
    &lt;%--遍历集合--%&gt;
    &lt;c:forEach items=&quot;\${list}&quot; var=&quot;str&quot;&gt;
        \${str} &lt;br&gt;
    &lt;/c:forEach&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> Filter</h2><h3 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h3><p>Filter：过滤器，是 JavaWeb 三大组件之一，另外两个是 Servlet 和 Listener</p><p>工作流程：在程序访问服务器资源时，当一个请求到来，服务器首先判断是否有过滤器与去请求资源相关联，如果有过滤器可以将请求拦截下来，完成一些特定的功能，再由过滤器决定是否交给请求资源，如果没有就直接请求资源，响应同理</p><p>作用：过滤器一般用于完成通用的操作，例如：登录验证、统一编码处理、敏感字符过滤等</p><hr><h3 id="相关类" tabindex="-1"><a class="header-anchor" href="#相关类" aria-hidden="true">#</a> 相关类</h3><h4 id="filter-1" tabindex="-1"><a class="header-anchor" href="#filter-1" aria-hidden="true">#</a> Filter</h4><p>Filter是一个接口，如果想实现过滤器的功能，必须实现该接口</p><ul><li><p>核心方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void init(FilterConfig filterConfig)</td><td>初始化，开启过滤器</td></tr><tr><td>void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</td><td>对请求资源和响应资源过滤</td></tr><tr><td>void destroy()</td><td>销毁过滤器</td></tr></tbody></table></li><li><p>配置方式</p><p>注解方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span>内填拦截路径，<span class="token comment">/*代表全部路径
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filterDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>filter.FilterDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filterDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="filterchain" tabindex="-1"><a class="header-anchor" href="#filterchain" aria-hidden="true">#</a> FilterChain</h4><ul><li><p>FilterChain 是一个接口，代表过滤器对象。由Servlet容器提供实现类对象，直接使用即可。</p></li><li><p>过滤器可以定义多个，就会组成过滤器链</p></li><li><p>核心方法：<code>void doFilter(ServletRequest request, ServletResponse response)</code> 用来放行方法</p><p>如果有多个过滤器，在第一个过滤器中调用下一个过滤器，以此类推，直到到达最终访问资源。<br> 如果只有一个过滤器，放行时就会直接到达最终访问资源。</p></li></ul><h4 id="filterconfig" tabindex="-1"><a class="header-anchor" href="#filterconfig" aria-hidden="true">#</a> FilterConfig</h4><p>FilterConfig 是一个接口，代表过滤器的配置对象，可以加载一些初始化参数</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>String getFilterName()</td><td>获取过滤器对象名称</td></tr><tr><td>String getInitParameter(String name)</td><td>获取指定名称的初始化参数的值，不存在返回null</td></tr><tr><td>Enumeration&lt;String&gt; getInitParameterNames()</td><td>获取所有参数的名称</td></tr><tr><td>ServletContext getServletContext()</td><td>获取应用上下文对象</td></tr></tbody></table><hr><h3 id="filter使用" tabindex="-1"><a class="header-anchor" href="#filter使用" aria-hidden="true">#</a> Filter使用</h3><h4 id="设置页面编码" tabindex="-1"><a class="header-anchor" href="#设置页面编码" aria-hidden="true">#</a> 设置页面编码</h4><p>请求先被过滤器拦截进行相关操作</p><p>过滤器放行之后执行完目标资源，仍会回到过滤器中</p><ul><li><p>Filter 代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo01</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filterDemo01拦截到请求...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//处理乱码</span>
        servletResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//过滤器放行</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filterDemo1放行之后，又回到了doFilter方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Servlet 代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDemo01&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletDemo01执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;servletDemo01执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>filterDemo01拦截到请求...
servletDemo01执行了...
filterDemo1放行之后，又回到了doFilter方法  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="多过滤器顺序" tabindex="-1"><a class="header-anchor" href="#多过滤器顺序" aria-hidden="true">#</a> 多过滤器顺序</h4><p>多个过滤器使用的顺序，取决于过滤器映射的顺序。</p><ul><li><p>两个 Filter 代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo01</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filterDemo01执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo02</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filterDemo02执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Servlet代码：<code>System.out.println(&quot;servletDemo02执行了...&quot;);</code></p></li><li><p>web.xml配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filterDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>filter.FilterDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filterDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filterDemo02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>filter.FilterDemo02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filterDemo02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>filterDemo01执行了
filterDemo02执行了
servletDemo02执行了...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>在过滤器的配置中，有过滤器的声明和过滤器的映射两部分，到底是声明决定顺序，还是映射决定顺序呢？</p><p>答案是：<code>&lt;filter-mapping&gt;</code>的配置前后顺序决定过滤器的调用顺序，也就是由映射配置顺序决定。</p><hr><h4 id="filter生命周期" tabindex="-1"><a class="header-anchor" href="#filter生命周期" aria-hidden="true">#</a> Filter生命周期</h4><p>**创建：**当应用加载时实例化对象并执行init()初始化方法</p><p>**服务：**对象提供服务的过程，执行doFilter()方法</p><p><strong>销毁</strong>：当应用卸载时或服务器停止时对象销毁，执行destroy()方法</p><ul><li><p>Filter代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo03</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>
    <span class="token comment">/*
        初始化方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对象初始化成功了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/*
        提供服务方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filterDemo03执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//过滤器放行</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/*
        对象销毁方法，关闭Tomcat服务器
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对象销毁了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Servlet 代码：<code>System.out.println(&quot;servletDemo03执行了...&quot;);</code></p></li><li><p>控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>对象初始化成功了...
filterDemo03执行了...
servletDemo03执行了...
对象销毁了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="filterconfig使用" tabindex="-1"><a class="header-anchor" href="#filterconfig使用" aria-hidden="true">#</a> FilterConfig使用</h4><p>Filter初始化函数init的参数是FilterConfig 对象</p><ul><li><p>Filter代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo04</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>

	<span class="token comment">//初始化方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对象初始化成功了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取过滤器名称</span>
        <span class="token class-name">String</span> filterName <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filterName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//根据name获取value</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filterDemo04执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>web.xml配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filterDemo04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>filter.FilterDemo04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>zhangsan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>filterDemo04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>控制台输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>对象初始化成功了...
filterDemo04
zhangsan
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="filter案例" tabindex="-1"><a class="header-anchor" href="#filter案例" aria-hidden="true">#</a> Filter案例</h3><p>在访问html，js，image时，不需要每次都重新发送请求读取资源，就可以通过设置响应消息头的方式，设置缓存时间。但是如果每个Servlet都编写相同的代码，显然不符合我们统一调用和维护的理念。</p><p>静态资源设置缓存时间：html设置为1小时，js设置为2小时，css设置为3小时</p><ul><li><p>配置过滤器</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>StaticResourceNeedCacheFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>filter.StaticResourceNeedCacheFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>StaticResourceNeedCacheFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>StaticResourceNeedCacheFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>StaticResourceNeedCacheFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写过滤器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticResourceNeedCacheFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">;</span><span class="token comment">//获取初始化参数</span>
    <span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>filterConfig <span class="token operator">=</span> filterConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">,</span>
                         <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1.把doFilter的请求和响应对象转换成跟http协议有关的对象</span>
        <span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">;</span>
        <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">;</span>
            response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">&quot;non-HTTP request or response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//2.获取请求资源URI</span>
        <span class="token class-name">String</span> uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.得到请求资源到底是什么类型</span>
        <span class="token class-name">String</span> extend <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们只需要判断它是不是html,css,js。其他的不管</span>
        <span class="token comment">//4.判断到底是什么类型的资源</span>
        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;html&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>extend<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//html 缓存1小时</span>
            <span class="token class-name">String</span> html <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            time <span class="token operator">=</span> time<span class="token operator">*</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;js&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>extend<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//js 缓存2小时</span>
            <span class="token class-name">String</span> js <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            time <span class="token operator">=</span> time<span class="token operator">*</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;css&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>extend<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//css 缓存3小时</span>
            <span class="token class-name">String</span> css <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            time <span class="token operator">=</span> time<span class="token operator">*</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token comment">//5.设置响应消息头</span>
        response<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Expires&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//6.放行</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="拦截行为" tabindex="-1"><a class="header-anchor" href="#拦截行为" aria-hidden="true">#</a> 拦截行为</h3><p>Filter过滤器默认拦截的是请求，但是在实际开发中，我们还有请求转发和请求包含，以及由服务器触发调用的全局错误页面。默认情况下过滤器是不参与过滤的，需要配置web.xml</p><p>开启功能后，当访问页面发生相关行为后，会执行过滤器的操作</p><p>五种拦截行为：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--配置过滤器--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>FilterDemo5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>filter.FilterDemo5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--配置开启异步支持，当dispatcher配置ASYNC时，需要配置此行--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>async-supported</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>async-supported</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>FilterDemo5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--&lt;url-pattern&gt;/index.jsp&lt;/url-pattern&gt;--&gt;</span>
    <span class="token comment">&lt;!--过滤请求：默认值。--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--过滤全局错误页面：开启后，当由服务器调用全局错误页面时，过滤器工作--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--过滤请求转发：开启后，当请求转发时，过滤器工作。--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>FORWARD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--过滤请求包含：当请求包含时，过滤器工作。它只能过滤动态包含，jsp的include指令是静态包含--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>INCLUDE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--过滤异步类型，它要求我们在filter标签中配置开启异步支持--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>ASYNC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,177),Fn=e(`<li><p>web.xml：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>FilterDemo5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>filter.FilterDemo5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--配置开启异步支持，当dispatcher配置ASYNC时，需要配置此行--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>async-supported</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>async-supported</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>FilterDemo5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ServletDemo03：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletDemo03执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>FilterDemo05：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo05</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filterDemo05执行了...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),An={href:"http://localhost:8080/filter/servletDemo03",target:"_blank",rel:"noopener noreferrer"},Jn=e(`<li><p>控制台输出（注意输出顺序）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>servletDemo03执行了...
filterDemo05执行了...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),Ln=e(`<hr><h3 id="对比servlet" tabindex="-1"><a class="header-anchor" href="#对比servlet" aria-hidden="true">#</a> 对比Servlet</h3><table><thead><tr><th>方法/类型</th><th>Servlet</th><th>Filter</th><th>备注</th></tr></thead><tbody><tr><td>初始化 方法</td><td>void init(ServletConfig);</td><td>void init(FilterConfig);</td><td>几乎一样，都是在web.xml中配置参数，用该对象的方法可以获取到。</td></tr><tr><td>提供服务方法</td><td>void service(request,response);</td><td>void dofilter(request,response,FilterChain)</td><td>Filter比Servlet多了一个FilterChain，它不仅能完成Servlet的功能，而且还可以决定程序是否能继续执行。所以过滤器比Servlet更为强大。 在Struts2中，核心控制器就是一个过滤器。</td></tr><tr><td>销毁方法</td><td>void destroy();</td><td>void destroy();</td><td>方法/类型</td></tr></tbody></table><hr><h2 id="listener" tabindex="-1"><a class="header-anchor" href="#listener" aria-hidden="true">#</a> Listener</h2><h3 id="观察者设计者" tabindex="-1"><a class="header-anchor" href="#观察者设计者" aria-hidden="true">#</a> 观察者设计者</h3><p>所有的监听器都是基于观察者设计模式的。</p><p>观察者模式通常由以下三部分组成：</p><ul><li><p>事件源：触发事件的对象。</p></li><li><p>事件：触发的动作，里面封装了事件源。</p></li><li><p>监听器：当事件源触发事件后，可以完成的功能。一般是一个接口，由使用者来实现。（此处的思想还涉及了一个策略模式）</p></li></ul><hr><h3 id="监听器分类" tabindex="-1"><a class="header-anchor" href="#监听器分类" aria-hidden="true">#</a> 监听器分类</h3><p>在程序当中，我们可以对：对象的创建销毁、域对象中属性的变化、会话相关内容进行监听。</p><p>Servlet规范中共计8个监听器，<strong>监听器都是以接口形式提供</strong>，具体功能需要我们自己完成</p><h4 id="监听对象" tabindex="-1"><a class="header-anchor" href="#监听对象" aria-hidden="true">#</a> 监听对象</h4><ul><li><p>ServletContextListener：用于监听ServletContext对象的创建和销毁</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void contextInitialized(ServletContextEvent sce)</td><td>对象创建时执行该方法</td></tr><tr><td>void contextDestroyed(ServletContextEvent sce)</td><td>对象销毁时执行该方法</td></tr></tbody></table><p>参数ServletContextEvent 代表事件对象，事件对象中封装了事件源ServletContext，真正的事件指的是创建或者销毁ServletContext对象的操作</p></li><li><p>HttpSessionListener：用于监听HttpSession对象的创建和销毁</p><table><thead><tr><th>方法</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td>void sessionCreated(HttpSessionEvent se)</td><td style="text-align:left;">对象创建时执行该方法</td></tr><tr><td>void sessionDestroyed(HttpSessionEvent se)</td><td style="text-align:left;">对象销毁时执行该方法</td></tr></tbody></table><p>参数HttpSessionEvent 代表事件对象，事件对象中封装了事件源HttpSession，真正的事件指的是创建或者销毁HttpSession对象的操作</p></li><li><p>ServletRequestListener：用于监听ServletRequest对象的创建和销毁</p><table><thead><tr><th>方法</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td>void requestInitialized(ServletRequestEvent sre)</td><td style="text-align:left;">对象创建时执行该方法</td></tr><tr><td>void requestDestroyed(ServletRequestEvent sre)</td><td style="text-align:left;">对象销毁时执行该方法</td></tr></tbody></table><p>参数ServletRequestEvent 代表事件对象，事件对象中封装了事件源ServletRequest，真正的事件指的是创建或者销毁ServletRequest对象的操作</p></li></ul><hr><h4 id="监听域对象属性" tabindex="-1"><a class="header-anchor" href="#监听域对象属性" aria-hidden="true">#</a> 监听域对象属性</h4><ul><li><p>ServletContextAttributeListener：用于监听ServletContext应用域中属性的变化</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void attributeAdded(ServletContextAttributeEvent event)</td><td>域中添加属性时执行该方法</td></tr><tr><td>void attributeRemoved(ServletContextAttributeEvent event)</td><td>域中移除属性时执行该方法</td></tr><tr><td>void attributeReplaced(ServletContextAttributeEvent event)</td><td>域中替换属性时执行该方法</td></tr></tbody></table><p>参数ServletContextAttributeEvent 代表事件对象，事件对象中封装了事件源ServletContext，真正的事件指的是添加、移除、替换应用域中属性的操作</p></li><li><p>HttpSessionAttributeListener：用于监听HttpSession会话域中属性的变化</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void attributeAdded(HttpSessionBindingEvent event)</td><td>域中添加属性时执行该方法</td></tr><tr><td>void attributeRemoved(HttpSessionBindingEvent event)</td><td>域中移除属性时执行该方法</td></tr><tr><td>void attributeReplaced(HttpSessionBindingEvent event)</td><td>域中替换属性时执行该方法</td></tr></tbody></table><p>参数HttpSessionBindingEvent 代表事件对象，事件对象中封装了事件源HttpSession，真正的事件指的是添加、移除、替换应用域中属性的操作</p></li><li><p>ServletRequestAttributeListener：用于监听ServletRequest请求域中属性的变化</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void attributeAdded(ServletRequestAttributeEvent srae)</td><td>域中添加属性时执行该方法</td></tr><tr><td>void attributeRemoved(ServletRequestAttributeEvent srae)</td><td>域中移除属性时执行该方法</td></tr><tr><td>void attributeReplaced(ServletRequestAttributeEvent srae)</td><td>域中替换属性时执行该方法</td></tr></tbody></table><p>参数ServletRequestAttributeEvent 代表事件对象，事件对象中封装了事件源ServletRequest，真正的事件指的是添加、移除、替换应用域中属性的操作</p></li><li><p>页面域对象没有监听器</p></li></ul><hr><h4 id="感知型监听器" tabindex="-1"><a class="header-anchor" href="#感知型监听器" aria-hidden="true">#</a> 感知型监听器</h4><p>监听会话相关的感知型监听器，和会话域相关的两个感知型监听器是无需配置（注解）的，可以直接编写代码</p><ul><li><p>HttpSessionBindingListener：用于感知对象和会话域绑定的监听器</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void valueBound(HttpSessionBindingEvent event)</td><td>数据添加到会话域中(绑定)时执行该方法</td></tr><tr><td>void valueUnbound(HttpSessionBindingEvent event)</td><td>数据从会话域中移除(解绑)时执行该方法</td></tr></tbody></table><p>参数HttpSessionBindingEvent 代表事件对象，事件对象中封装了事件源HttpSession，真正的事件指的是添加、移除、替换应用域中属性的操作</p></li><li><p>HttpSessionActivationListener：用于感知会话域中对象和钝化和活化的监听器</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void sessionWillPassivate(HttpSessionEvent se)</td><td>会话域中数据钝化时执行该方法</td></tr><tr><td>void sessionDidActivate(HttpSessionEvent se)</td><td>会话域中数据活化时执行该方法</td></tr></tbody></table></li></ul><hr><h3 id="监听器使用" tabindex="-1"><a class="header-anchor" href="#监听器使用" aria-hidden="true">#</a> 监听器使用</h3><h4 id="servletcontextlistener" tabindex="-1"><a class="header-anchor" href="#servletcontextlistener" aria-hidden="true">#</a> ServletContextListener</h4><p>ServletContext对象的创建和销毁的监听器</p><p>注解方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebListener</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContextListenerDemo</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建时执行此方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到对象的创建....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动服务器就创建</span>

        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//销毁时执行的方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到对象的销毁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭服务器就销毁</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置web.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--配置监听器--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>listener.ServletContextAttributeListenerDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="servletcontextattributelistener" tabindex="-1"><a class="header-anchor" href="#servletcontextattributelistener" aria-hidden="true">#</a> ServletContextAttributeListener</h4><p>应用域对象中的属性变化的监听器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContextAttributeListenerDemo</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextAttributeListener</span><span class="token punctuation">{</span>
    <span class="token comment">/*
        向应用域对象中添加属性时执行此方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到了属性的添加...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取应用域对象</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> scae<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取属性</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//zhangsan </span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
        向应用域对象中替换属性时执行此方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到了属性的替换...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取应用域对象</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> scae<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取属性</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lisi</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
        向应用域对象中移除属性时执行此方法
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到了属性的移除...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取应用域对象</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> scae<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取属性</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContextListenerDemo</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span><span class="token punctuation">{</span>
    <span class="token comment">//ServletContext对象创建的时候执行此方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到了对象的创建...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取对象</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//添加属性</span>
        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//替换属性</span>
        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//移除属性</span>
        servletContext<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//ServletContext对象销毁的时候执行此方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到了对象的销毁...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台输出：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>监听到了对象的创建...
监听到了属性的添加...
zhangsan
监听到了属性的替换
lisi
监听到属性的移除
null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function Wn(zn,Bn){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,n("p",null,[s("其中，"),r,s(" 组织的全称是 Java Community Process，是一个开放的国际组织，主要由 Java 开发者以及被授权者组成，职能是发展和更新。成立于 1998 年。官网是："),n("a",d,[s("JCP"),t(a)])]),k,n("p",null,[s("详情请参考："),n("a",v,[s("JavaEE8 规范概览"),t(a)])]),m,n("p",null,[s("下载地址："),n("a",g,[s("http://tomcat.apache.org/"),t(a)])]),b,n("p",null,[s("Tomcat服务器的启动文件在二进制文件目录bin中：startup.bat，"),n("a",h,[s("startup.sh"),t(a)])]),n("p",null,[s("Tomcat服务器的停止文件也在二进制文件目录bin中：shutdown.bat，"),n("a",S,[s("shutdown.sh"),t(a)]),s(" （推荐直接关闭控制台）")]),q,n("ul",null,[n("li",null,[n("p",null,[s("直接访问："),n("a",f,[s("http://localhost:8080/Tomcat/login/login.html"),t(a)])])]),x]),y,n("p",null,[s("参考文章："),n("a",w,[s("https://www.jianshu.com/p/7c9401b85704"),t(a)])]),n("p",null,[s("参考文章："),n("a",C,[s("https://www.yuque.com/yinhuidong/yu877c/ktq82e"),t(a)])]),E,n("p",null,[s("启动两个浏览器，输入不同的参数("),n("a",j,[s("http://localhost:8080/ServletDemo/username=aaa"),t(a)]),s(" 或者bbb)，访问之后发现输出的结果都是一样，所以出现线程安全问题。")]),R,H,P,D,_,n("ol",null,[n("li",null,[n("p",null,[s("具体名称方式"),I,s(" 这种方式，只有和映射配置一模一样时，Servlet才会接收和响应来自客户端的请求。"),T,s(" 访问URL："),n("a",O,[s("http://localhost:8080/servlet/servletDemo"),t(a)])]),F]),n("li",null,[n("p",null,[s("/开头+通配符的方式"),A,s(" 这种方式，只要符合目录结构即可，不用考虑结尾是什么"),J,s(" 访问URL："),n("a",L,[s("http://localhost:8080/servlet/"),t(a)]),s(" + 任何字符")]),W]),n("li",null,[n("p",null,[s("通配符+固定格式结尾"),z,s(" 这种方式，只要符合固定结尾格式即可，其前面的访问URI无须关心（注意协议，主机和端口必须正确）"),B,s(" 访问URL："),n("a",N,[s("http://localhost:8080/任何字符任何目录"),t(a)]),s(" + .do ("),n("a",U,[s("http://localhost:8080/seazean/i.do"),t(a)]),s(")")]),M])]),G,n("table",null,[$,n("tbody",null,[V,X,Y,K,Q,Z,nn,sn,n("tr",null,[an,n("td",null,[s("获取统一资源定位符（"),n("a",tn,[s("http://localhost:8080/request/servletDemo01）"),t(a)])])]),en,pn,on,ln])]),cn,n("p",null,[s("过程：浏览器访问 "),n("a",un,[s("http://localhost:8080/request/servletDemo09，/servletDemo10也会执行"),t(a)])]),rn,n("p",null,[s("参考文章："),n("a",dn,[s("https://blog.csdn.net/weixin_43625577/article/details/92393581"),t(a)])]),kn,n("table",null,[vn,n("tbody",null,[n("tr",null,[n("td",null,[n("a",mn,[s("servletDemo02"),t(a)])]),gn,bn,hn,Sn]),n("tr",null,[n("td",null,[n("a",qn,[s("servletDemo03"),t(a)])]),fn,xn,yn,wn]),n("tr",null,[n("td",null,[n("a",Cn,[s("servletDemo04"),t(a)])]),En,jn,Rn,Hn]),n("tr",null,[n("td",null,[n("a",Pn,[s("servletDemo05"),t(a)])]),Dn,_n,In,Tn])])]),On,n("ul",null,[Fn,n("li",null,[n("p",null,[s("访问URL："),n("a",An,[s("http://localhost:8080/filter/servletDemo03"),t(a)])])]),Jn]),Ln])}const Mn=p(i,[["render",Wn],["__file","Servlet.html.vue"]]);export{Mn as default};
