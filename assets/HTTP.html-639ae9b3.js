import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as o,a as t,d as n,b as l,e as a}from"./app-109af9bf.js";const r={},d=a('<h1 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h1><h2 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念" aria-hidden="true">#</a> 相关概念</h2><p>HTTP：Hyper Text Transfer Protocol，意为超文本传输协议，是建立在 <strong>TCP/IP 协议</strong>基础上，指的是服务器和客户端之间交互必须遵循的一问一答的规则，形容这个规则：问答机制、握手机制</p><p>HTTP 协议是<strong>一个无状态的面向连接的协议</strong>，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。所以打开一个服务器上的网页和上一次打开这个服务器上的网页之间没有任何联系</p><p>注意：无状态并不是代表 HTTP 就是 UDP，面向连接也不是代表 HTTP 就是TCP</p><p>HTTP 作用：用于定义 WEB 浏览器与 WEB 服务器之间交换数据的过程和数据本身的内容</p><p>浏览器和服务器交互过程：浏览器请求，服务请求响应</p><ul><li>请求（请求行、请求头、请求体）</li><li>响应（响应行、响应头、响应体）</li></ul><p>URL 和 URI</p>',9),c=t("p",null,"URL：统一资源定位符",-1),u={href:"http://127.0.0.1:8080/request/servletDemo01",target:"_blank",rel:"noopener noreferrer"},T=t("li",null,"详解：http：协议；127.0.0.1：域名；8080：端口；request/servletDemo01：请求资源路径",-1),h=t("li",null,[t("p",null,"URI：统一资源标志符"),t("ul",null,[t("li",null,"格式：/request/servletDemo01")])],-1),g=t("li",null,[t("p",null,[n("区别："),t("code",null,"URL - HOST = URI"),n("，URI 是抽象的定义，URL 用地址定位，URI 用名称定位。"),t("strong",null,"只要能唯一标识资源的是 URI，在 URI 的基础上给出其资源的访问方式的是 URL")])],-1),P=a("<p><strong>从浏览器地址栏输入 URL 到请求返回发生了什么？</strong></p><ul><li><p>进行 URL 解析，进行编码</p></li><li><p>DNS 解析，顺序是先查 hosts 文件是否有记录，有的话就会把相对应映射的 IP 返回，然后去本地 DNS 缓存中寻找，然后依次向本地域名服务器、根域名服务器、顶级域名服务器、权限域名服务器发起查询请求，最终返回 IP 地址给本地域名服务器</p><p>本地域名服务器将得到的 IP 地址返回给操作系统，同时将 IP 地址缓存起来；操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来</p></li><li><p>查找到 IP 之后，进行 TCP 协议的三次握手建立连接</p></li><li><p>发出 HTTP 请求，取文件指令</p></li><li><p>服务器处理请求，返回响应</p></li><li><p>释放 TCP 连接</p></li><li><p>浏览器解析渲染页面</p></li></ul>",2),m={href:"https://xiaolincoding.com/network/",target:"_blank",rel:"noopener noreferrer"},k=a('<hr><h2 id="版本区别" tabindex="-1"><a class="header-anchor" href="#版本区别" aria-hidden="true">#</a> 版本区别</h2><p>版本介绍：</p><ul><li>HTTP/0.9 仅支持 GET 请求，不支持请求头</li><li>HTTP/1.0 默认短连接（一次请求建议一次 TCP 连接，请求完就断开），支持 GET、POST、 HEAD 请求</li><li>HTTP/1.1 默认长连接（一次 TCP 连接可以多次请求）；支持 PUT、DELETE、PATCH 等六种请求；增加 HOST 头，支持虚拟主机；支持<strong>断点续传</strong>功能</li><li>HTTP/2.0 多路复用，降低开销（一次 TCP 连接可以处理多个请求）；服务器主动推送（相关资源一个请求全部推送）；解析基于二进制，解析错误少，更高效（HTTP/1.X 解析基于文本）；报头压缩，降低开销</li><li>HTTP/3.0 QUIC (Quick UDP Internet Connections)，快速 UDP 互联网连接，基于 UDP 协议</li></ul><p>HTTP 1.0 和 HTTP 1.1 的主要区别：</p><ul><li><p>长短连接：</p><p><strong>在HTTP/1.0中，默认使用的是短连接</strong>，每次请求都要重新建立一次连接，比如获取 HTML 和 CSS 文件，需要两次请求。HTTP 基于 TCP/IP 协议的，每一次建立或者断开连接都需要三次握手四次挥手，开销会比较大</p><p><strong>HTTP 1.1起，默认使用长连接</strong> ，默认开启 <code>Connection: keep-alive</code>，Keep-Alive 有一个保持时间，不会永久保持连接。持续连接有非流水线方式和流水线方式 ，流水线方式是客户端在收到 HTTP 的响应报文之前就能接着发送新的请求报文，非流水线方式是客户端在收到前一个响应后才能发送下一个请求</p><p>HTTP 协议的长连接和短连接，实质上是 TCP 协议的长连接和短连接</p></li><li><p>错误状态响应码：在 HTTP1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突，410（Gone）表示服务器上的某个资源被永久性的删除</p></li><li><p>缓存处理：在 HTTP1.0 中主要使用 header 里的 If-Modified-Since，Expires 来做为缓存判断的标准，HTTP1.1 则引入了更多的缓存控制策略，例如 Entity tag，If-Unmodified-Since，If-Match，If-None-Match等</p></li><li><p>带宽优化及网络连接的使用：HTTP1.0 存在一些浪费带宽的现象，例如客户端只需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持<strong>断点续传</strong>功能，HTTP1.1 则在请求头引入了 range 头域，允许只<strong>请求资源的某个部分</strong>，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接</p></li><li><p>HOST 头处理：在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此请求消息中的 URL 并没有传递主机名。HTTP1.1 时代虚拟主机技术发展迅速，在一台物理服务器上可以存在多个虚拟主机，并且共享一个 IP 地址，故 HTTP1.1 增加了 HOST 信息</p></li></ul><p>HTTP 1.1 和 HTTP 2.0 的主要区别：</p><ul><li>新的二进制格式：HTTP1.1 基于文本格式传输数据，HTTP2.0 采用二进制格式传输数据，解析更高效</li><li><strong>多路复用</strong>：在一个连接里，允许同时发送多个请求或响应，并且这些请求或响应能够并行的传输而不被阻塞，避免 HTTP1.1 出现的队头堵塞问题</li><li>头部压缩，HTTP1.1 的 header 带有大量信息，而且每次都要重复发送；HTTP2.0 把 header 从数据中分离，并封装成头帧和数据帧，使用特定算法压缩头帧。并且 HTTP2.0 在客户端和服务器端记录了之前发送的键值对，对于相同的数据不会重复发送。比如请求 A 发送了所有的头信息字段，请求 B 则只需要发送差异数据，这样可以减少冗余数据，降低开销</li><li><strong>服务端推送</strong>：HTTP2.0 允许服务器向客户端推送资源，无需客户端发送请求到服务器获取</li></ul><hr><h2 id="安全请求" tabindex="-1"><a class="header-anchor" href="#安全请求" aria-hidden="true">#</a> 安全请求</h2><p>HTTP 和 HTTPS 的区别：</p><ul><li>端口 ：HTTP 默认使用端口 80，HTTPS 默认使用端口 443</li><li>安全性：HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份；HTTPS 是运行在 SSL/TLS 之上的 HTTP 协议，SSL/TLS 运行在 TCP 之上，所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密</li><li>资源消耗：HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源</li></ul><p><strong>对称加密和非对称加密</strong></p><ul><li><p>对称加密：加密和解密使用同一个秘钥，把密钥转发给需要发送数据的客户机，中途会被拦截（类似于把带锁的箱子和钥匙给别人，对方打开箱子放入数据，上锁后发送），私钥用来解密数据，典型的对称加密算法有 DES、AES 等</p><ul><li>优点：运算速度快</li><li>缺点：无法安全的将密钥传输给通信方</li></ul></li><li><p>非对称加密：加密和解密使用不同的秘钥，一把作为公开的公钥，另一把作为私钥，<strong>公钥公开给任何人</strong>（类似于把锁和箱子给别人，对方打开箱子放入数据，上锁后发送），典型的非对称加密算法有 RSA、DSA 等</p><ul><li>公钥加密，私钥解密：为了<strong>保证内容传输的安全</strong>，因为被公钥加密的内容，其他人是无法解密的，只有持有私钥的人，才能解密出实际的内容</li><li>私钥加密，公钥解密：为了<strong>保证消息不会被冒充</strong>，因为私钥是不可泄露的，如果公钥能正常解密出私钥加密的内容，就能证明这个消息是来源于持有私钥身份的人发送的</li><li>可以更安全地将公开密钥传输给通信发送方，但是运算速度慢</li></ul></li><li><p><strong>使用对称加密和非对称加密的方式传送数据</strong></p><ul><li>使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性</li><li>获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率</li></ul><p>思想：锁上加锁</p></li></ul><p>名词解释：</p><ul><li><p>哈希算法：通过哈希函数计算出内容的哈希值，传输到对端后会重新计算内容的哈希，进行哈希比对来校验内容的完整性</p></li><li><p>数字签名：附加在报文上的特殊加密校验码，可以防止报文被篡改。一般是通过私钥对内容的哈希值进行加密，公钥正常解密并对比哈希值后，可以确保该内容就是对端发出的，防止出现中间人替换的问题</p></li><li><p>数字证书：由权威机构给某网站颁发的一种认可凭证</p></li></ul><p>HTTPS 工作流程：服务器端的公钥和私钥，用来进行非对称加密，客户端生成的随机密钥，用来进行对称加密</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/HTTP-HTTPS加密过程.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>客户端向服务器发起 HTTPS 请求，连接到服务器的 443 端口，请求携带了浏览器支持的加密算法和哈希算法，协商加密算法</li><li>服务器端会向数字证书认证机构注册公开密钥，认证机构<strong>用 CA 私钥</strong>对公开密钥做数字签名后绑定在数字证书（又叫公钥证书，内容有公钥，网站地址，证书颁发机构，失效日期等）</li><li>服务器将数字证书发送给客户端，私钥由服务器持有</li><li>客户端收到服务器端的数字证书后<strong>通过 CA 公钥</strong>（事先置入浏览器或操作系统）对证书进行检查，验证其合法性。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，将该密钥称之为 client key（客户端密钥、会话密钥）。用服务器的公钥对客户端密钥进行非对称加密，这样客户端密钥就变成密文，HTTPS 中的第一次 HTTP 请求结束</li><li>客户端会发起 HTTPS 中的第二个 HTTP 请求，将加密之后的客户端密钥发送给服务器</li><li>服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文</li><li>服务器将加密后的密文发送给客户端</li><li>客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据，这样 HTTPS 中的第二个 HTTP 请求结束，整个 HTTPS 传输完成</li></ol>',19),b={href:"https://www.cnblogs.com/linianhui/p/security-https-workflow.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.jianshu.com/p/14cd2c9d2cd2",target:"_blank",rel:"noopener noreferrer"},_=a(`<hr><h2 id="请求部分" tabindex="-1"><a class="header-anchor" href="#请求部分" aria-hidden="true">#</a> 请求部分</h2><p>请求行： 永远位于请求的第一行</p><p>请求头： 从第二行开始，到第一个空行结束</p><p>请求体： 从第一个空行后开始，到正文的结束（GET 没有）</p><ul><li><p>请求方式</p><ul><li>POST</li></ul><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/HTTP请求部分.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>GET</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>【请求行】
GET /myApp/success.html?username=zs&amp;password=123456 HTTP/1.1

【请求头】
Accept: text/html, application/xhtml+xml, */*; X-HttpWatch-RID: 41723-10011
Referer: http://localhost:8080/myApp/login.html
Accept-Language: zh-Hans-CN,zh-Hans;q=0.5
User-Agent: Mozilla/5.0 (MSIE 9.0; qdesk 2.4.1266.203; Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko
Accept-Encoding: gzip, deflate
Host: localhost:8080
Connection: Keep-Alive
Cookie: Idea-b77ddca6=4bc282fe-febf-4fd1-b6c9-72e9e0f381e8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>GET 和 POST 比较</strong></p><p>作用：GET 用于获取资源，而 POST 用于传输实体主体</p><p>参数：GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中（GET 也有请求体，POST 也可以通过 URL 传输参数）。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看</p><p>安全：安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。GET 方法是安全的，而 POST 不是，因为 POST 的目的是传送实体主体内容</p><ul><li>安全的方法除了 GET 之外还有：HEAD、OPTIONS</li><li>不安全的方法除了 POST 之外还有 PUT、DELETE</li></ul><p>幂等性：同样的请求<strong>被执行一次与连续执行多次的效果是一样的</strong>，服务器的状态也是一样的，所有的安全方法也都是幂等的。在正确实现条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，POST 方法不是</p><p>可缓存：如果要对响应进行缓存，需要满足以下条件</p><ul><li>请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存</li><li>响应报文的状态码是可缓存的，包括：200、203、204、206、300、301、404、405、410、414 and 501</li><li>响应报文的 Cache-Control 首部字段没有指定不进行缓存</li></ul></li><li><p>PUT 和 POST 的区别</p><p>PUT 请求：如果两个请求相同，后一个请求会把第一个请求覆盖掉（幂等），所以 PUT 用来修改资源</p><p>POST 请求：后一个请求不会把第一个请求覆盖掉（非幂等），所以 POST 用来创建资源</p><p>PATCH 方法 是新引入的，是对 PUT 方法的补充，用来对已知资源进行<strong>局部更新</strong></p></li></ul></li><li><p>请求行详解</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>GET  /myApp/success.html?username=zs&amp;password=123456 HTTP/1.1	
POST /myApp/success.html HTTP/1.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>GET/POST</td><td>请求的方式。</td></tr><tr><td>/myApp/success.html</td><td>请求的资源。</td></tr><tr><td>HTTP/1.1</td><td>使用的协议，及协议的版本。</td></tr></tbody></table></li><li><p>请求头详解</p><p>从第 2 行到空行处，都叫请求头，以键值对的形式存在，但存在一个 key 对应多个值的请求头</p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>告知服务器，客户浏览器支持的 MIME 类型</td></tr><tr><td>User-Agent</td><td>浏览器相关信息</td></tr><tr><td>Accept-Charset</td><td>告诉服务器，客户浏览器支持哪种字符集</td></tr><tr><td>Accept-Encoding</td><td>告知服务器，客户浏览器支持的压缩编码格式，常用 gzip 压缩</td></tr><tr><td>Accept-Language</td><td>告知服务器，客户浏览器支持的语言，zh_CN 或 en_US 等</td></tr><tr><td>Host</td><td>初始 URL 中的主机和端口</td></tr><tr><td>Referer</td><td>告知服务器，当前请求的来源。只有当前请求有来源，才有这个消息头。<br>作用：1 投放广告 2 防盗链</td></tr><tr><td>Content-Type</td><td>告知服务器，请求正文的 MIME 类型，文件传输的类型，<br>application/x-www-form-urlencoded</td></tr><tr><td>Content-Length</td><td>告知服务器，请求正文的长度。</td></tr><tr><td>Connection</td><td>表示是否需要持久连接，一般是 <code>Keep -Alive</code>（HTTP 1.1 默认进行持久连接 )</td></tr><tr><td>If-Modified-Since</td><td>告知服务器，客户浏览器缓存文件的最后修改时间</td></tr><tr><td>Cookie</td><td>会话管理相关（非常的重要）</td></tr></tbody></table></li><li><p>请求体详解</p><ul><li><p>只有 POST 请求方式，才有请求的正文，GET 方式的正文是在地址栏中的</p></li><li><p>表单的输入域有 name 属性的才会被提交，不分 GET 和 POST 的请求方式</p></li><li><p>表单的 enctype 属性取值决定了请求正文的体现形式</p><table><thead><tr><th>enctype取值</th><th>请求正文体现形式</th><th>示例</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>key=value&amp;key=value</td><td>username=test&amp;password=1234</td></tr><tr><td>multipart/form-data</td><td>此时变成了多部分表单数据。多部分是靠分隔符分隔的。</td><td>-----------------------------7df23a16c0210<br>Content-Disposition: form-data; name=&quot;username&quot;<br>test<br>-----------------------------7df23a16c0210<br>Content-Disposition: form-data; name=&quot;password&quot;<br>1234<br>-------------------------------7df23a16c0210</td></tr></tbody></table></li></ul></li></ul><hr><h2 id="响应部分" tabindex="-1"><a class="header-anchor" href="#响应部分" aria-hidden="true">#</a> 响应部分</h2><p>响应部分图：</p><figure><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/HTTP响应部分.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,10),v=a('<li><p>响应行</p><p>HTTP/1.1：使用协议的版本</p><p>200：响应状态码</p><p>OK：状态码描述</p><ul><li><p>响应状态码：<br><img src="https://seazean.oss-cn-beijing.aliyuncs.com/img/Web/HTTP状态响应码.png" alt="" loading="lazy"></p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>一切都 OK，与服务器连接成功，发送请求成功</td></tr><tr><td>302/307</td><td>请求重定向（客户端行为，两次请求，地址栏发生改变）</td></tr><tr><td>304</td><td>请求资源未改变，使用缓存</td></tr><tr><td>400</td><td>客户端错误，请求错误，最常见的就是请求参数有问题</td></tr><tr><td>403</td><td>客户端错误，但 forbidden 权限不够，拒绝处理</td></tr><tr><td>404</td><td>客户端错误，请求资源未找到</td></tr><tr><td>500</td><td>服务器错误，服务器运行内部错误</td></tr></tbody></table></li></ul><p>转移：</p><ul><li>301 redirect：301 代表永久性转移 (Permanently Moved)</li><li>302 redirect：302 代表暂时性转移 (Temporarily Moved )</li></ul></li>',1),f=t("p",null,"响应头：以 key:vaue 存在，可能多个 value 情况",-1),S=t("thead",null,[t("tr",null,[t("th",null,"消息头"),t("th",null,"说明")])],-1),E=t("tr",null,[t("td",null,"Location"),t("td",null,"请求重定向的地址，常与 302，307 配合使用。")],-1),y=t("tr",null,[t("td",null,"Server"),t("td",null,"服务器相关信息")],-1),C=t("tr",null,[t("td",null,"Content-Type"),t("td",null,"告知客户浏览器，响应正文的MIME类型")],-1),U=t("tr",null,[t("td",null,"Content-Length"),t("td",null,"告知客户浏览器，响应正文的长度")],-1),x=t("tr",null,[t("td",null,"Content-Encoding"),t("td",null,"告知客户浏览器，响应正文使用的压缩编码格式，常用的 gzip 压缩")],-1),I=t("tr",null,[t("td",null,"Content-Language"),t("td",null,"告知客户浏览器，响应正文的语言，zh_CN 或 en_US 等")],-1),w=t("tr",null,[t("td",null,"Content-Disposition"),t("td",null,"告知客户浏览器，以下载的方式打开响应正文")],-1),q=t("tr",null,[t("td",null,"Refresh"),t("td",null,"客户端的刷新频率，单位是秒")],-1),A=t("tr",null,[t("td",null,"Last-Modified"),t("td",null,"服务器资源的最后修改时间")],-1),L=t("tr",null,[t("td",null,"Set-Cookie"),t("td",null,"服务器端发送的 Cookie，会话管理相关")],-1),O=t("tr",null,[t("td",null,"Expires:-1"),t("td",null,"服务器资源到客户浏览器后的缓存时间")],-1),D=t("td",null,"Catch-Control: no-catch",-1),R={href:"//xn--http1-i37hl13cy63grwq.xn--1-856b314a",target:"_blank",rel:"noopener noreferrer"},G=t("td",null,"Pragma:no-catch",-1),z={href:"//xn--http1-i37hl13cy63grwq.xn--0-856b314a",target:"_blank",rel:"noopener noreferrer"},M=a(`<li><p>响应体：页面展示内容, 类似网页的源码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>css.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.jpg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),N=t("hr",null,null,-1);function W(j,K){const s=i("ExternalLinkIcon");return p(),o("div",null,[d,t("ul",null,[t("li",null,[c,t("ul",null,[t("li",null,[n("格式："),t("a",u,[n("http://127.0.0.1:8080/request/servletDemo01"),l(s)])]),T])]),h,g]),P,t("p",null,[n("推荐阅读："),t("a",m,[n("https://xiaolincoding.com/network/"),l(s)])]),k,t("p",null,[n("参考文章："),t("a",b,[n("https://www.cnblogs.com/linianhui/p/security-https-workflow.html"),l(s)])]),t("p",null,[n("参考文章："),t("a",H,[n("https://www.jianshu.com/p/14cd2c9d2cd2"),l(s)])]),_,t("ul",null,[v,t("li",null,[f,t("table",null,[S,t("tbody",null,[E,y,C,U,x,I,w,q,A,L,O,t("tr",null,[D,t("td",null,[n("不要缓存，"),t("a",R,[n("//针对http协议1.1版本"),l(s)])])]),t("tr",null,[G,t("td",null,[n("不要缓存，"),t("a",z,[n("//针对http协议1.0版本"),l(s)])])])])])]),M]),N])}const Q=e(r,[["render",W],["__file","HTTP.html.vue"]]);export{Q as default};
