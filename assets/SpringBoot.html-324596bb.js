const e=JSON.parse('{"key":"v-d662e6ee","path":"/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/SpringBoot.html","title":"SpringBoot","lang":"zh-CN","frontmatter":{"description":"SpringBoot 基本介绍 Boot介绍 SpringBoot 提供了一种快速使用 Spring 的方式，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率 SpringBoot 功能： 自动配置，自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素选择使用哪个配置，该过程是SpringBoot 自动完成的 起步依赖，起步依赖本质上是一个 Maven 项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能 辅助功能，提供了一些大型项目中常见的非功能性特性，如内嵌 web 服务器、安全、指标，健康检测、外部配置等","head":[["meta",{"property":"og:url","content":"https://newzone.top/learn_data/Spring%E5%85%A8%E5%AE%B6%E6%A1%B6/SpringBoot.html"}],["meta",{"property":"og:site_name","content":"挨踢牛马"}],["meta",{"property":"og:title","content":"SpringBoot"}],["meta",{"property":"og:description","content":"SpringBoot 基本介绍 Boot介绍 SpringBoot 提供了一种快速使用 Spring 的方式，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率 SpringBoot 功能： 自动配置，自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素选择使用哪个配置，该过程是SpringBoot 自动完成的 起步依赖，起步依赖本质上是一个 Maven 项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能 辅助功能，提供了一些大型项目中常见的非功能性特性，如内嵌 web 服务器、安全、指标，健康检测、外部配置等"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-16T07:46:55.000Z"}],["meta",{"property":"article:author","content":"挨踢牛马"}],["meta",{"property":"article:modified_time","content":"2023-08-16T07:46:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-16T07:46:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"挨踢牛马\\",\\"url\\":\\"https://newzone.top\\"}]}"]]},"headers":[{"level":2,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[{"level":3,"title":"Boot介绍","slug":"boot介绍","link":"#boot介绍","children":[]},{"level":3,"title":"构建工程","slug":"构建工程","link":"#构建工程","children":[]}]},{"level":2,"title":"自动装配","slug":"自动装配","link":"#自动装配","children":[{"level":3,"title":"依赖管理","slug":"依赖管理","link":"#依赖管理","children":[]},{"level":3,"title":"底层注解","slug":"底层注解","link":"#底层注解","children":[]},{"level":3,"title":"装配原理","slug":"装配原理","link":"#装配原理","children":[]},{"level":3,"title":"事件监听","slug":"事件监听","link":"#事件监听","children":[]}]},{"level":2,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[{"level":3,"title":"配置方式","slug":"配置方式","link":"#配置方式","children":[]},{"level":3,"title":"yaml语法","slug":"yaml语法","link":"#yaml语法","children":[]},{"level":3,"title":"获取配置","slug":"获取配置","link":"#获取配置","children":[]},{"level":3,"title":"配置提示","slug":"配置提示","link":"#配置提示","children":[]},{"level":3,"title":"Profile","slug":"profile","link":"#profile","children":[]}]},{"level":2,"title":"Web开发","slug":"web开发","link":"#web开发","children":[{"level":3,"title":"功能支持","slug":"功能支持","link":"#功能支持","children":[]},{"level":3,"title":"静态资源","slug":"静态资源","link":"#静态资源","children":[]},{"level":3,"title":"Rest映射","slug":"rest映射","link":"#rest映射","children":[]},{"level":3,"title":"内嵌容器","slug":"内嵌容器","link":"#内嵌容器","children":[]},{"level":3,"title":"自定义","slug":"自定义","link":"#自定义","children":[]}]},{"level":2,"title":"数据访问","slug":"数据访问","link":"#数据访问","children":[{"level":3,"title":"JDBC","slug":"jdbc","link":"#jdbc","children":[]},{"level":3,"title":"Druid","slug":"druid","link":"#druid","children":[]},{"level":3,"title":"MyBatis","slug":"mybatis","link":"#mybatis","children":[]},{"level":3,"title":"Redis","slug":"redis","link":"#redis","children":[]}]},{"level":2,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[{"level":3,"title":"Junit5","slug":"junit5","link":"#junit5","children":[]},{"level":3,"title":"常用注解","slug":"常用注解-1","link":"#常用注解-1","children":[]},{"level":3,"title":"断言机制","slug":"断言机制","link":"#断言机制","children":[]},{"level":3,"title":"前置条件","slug":"前置条件","link":"#前置条件","children":[]},{"level":3,"title":"嵌套测试","slug":"嵌套测试","link":"#嵌套测试","children":[]},{"level":3,"title":"参数测试","slug":"参数测试","link":"#参数测试","children":[]}]},{"level":2,"title":"指标监控","slug":"指标监控","link":"#指标监控","children":[{"level":3,"title":"Actuator","slug":"actuator","link":"#actuator","children":[]},{"level":3,"title":"Endpoint","slug":"endpoint","link":"#endpoint","children":[]}]},{"level":2,"title":"项目部署","slug":"项目部署","link":"#项目部署","children":[]}],"git":{"createdTime":1692172015000,"updatedTime":1692172015000,"contributors":[{"name":"mnz","email":"dhuhua@foxmail.com","commits":1}]},"readingTime":{"minutes":33.21,"words":9963},"filePathRelative":"Spring全家桶/SpringBoot.md","localizedDate":"2023年8月16日","excerpt":"<h1> SpringBoot</h1>\\n<h2> 基本介绍</h2>\\n<h3> Boot介绍</h3>\\n<p>SpringBoot 提供了一种快速使用 Spring 的方式，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率</p>\\n<p>SpringBoot 功能：</p>\\n<ul>\\n<li>\\n<p>自动配置，自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素选择使用哪个配置，该过程是SpringBoot 自动完成的</p>\\n</li>\\n<li>\\n<p>起步依赖，起步依赖本质上是一个 Maven 项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能</p>\\n</li>\\n<li>\\n<p>辅助功能，提供了一些大型项目中常见的非功能性特性，如内嵌 web 服务器、安全、指标，健康检测、外部配置等</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
